
little_FS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b390  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010ec  0800b448  0800b448  0000c448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c534  0800c534  0000e144  2**0
                  CONTENTS
  4 .ARM          00000000  0800c534  0800c534  0000e144  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c534  0800c534  0000e144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c534  0800c534  0000d534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c538  0800c538  0000d538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  20000000  0800c53c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000002a0  20000144  0800c680  0000e144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  0800c680  0000e3e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e144  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124eb  00000000  00000000  0000e16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287d  00000000  00000000  00020657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00022ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dbe  00000000  00000000  00023e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f2a  00000000  00000000  00024c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fbf  00000000  00000000  0003bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a40  00000000  00000000  0004eb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d756f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004330  00000000  00000000  000d75b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000db8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000144 	.word	0x20000144
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800b41c 	.word	0x0800b41c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000148 	.word	0x20000148
 80000fc:	0800b41c 	.word	0x0800b41c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <__ctzsi2>:
 800044c:	4241      	negs	r1, r0
 800044e:	4008      	ands	r0, r1
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__ctzsi2+0x12>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__ctzsi2+0x1c>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__ctzsi2+0x26>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	@ (adr r2, 800047c <__ctzsi2+0x30>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1a40      	subs	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	1d1d1c1b 	.word	0x1d1d1c1b
 8000480:	1e1e1e1e 	.word	0x1e1e1e1e
 8000484:	1f1f1f1f 	.word	0x1f1f1f1f
 8000488:	1f1f1f1f 	.word	0x1f1f1f1f

0800048c <__popcountsi2>:
 800048c:	4a09      	ldr	r2, [pc, #36]	@ (80004b4 <__popcountsi2+0x28>)
 800048e:	0843      	lsrs	r3, r0, #1
 8000490:	4013      	ands	r3, r2
 8000492:	1ac0      	subs	r0, r0, r3
 8000494:	0002      	movs	r2, r0
 8000496:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <__popcountsi2+0x2c>)
 8000498:	0880      	lsrs	r0, r0, #2
 800049a:	4018      	ands	r0, r3
 800049c:	401a      	ands	r2, r3
 800049e:	1812      	adds	r2, r2, r0
 80004a0:	0913      	lsrs	r3, r2, #4
 80004a2:	189b      	adds	r3, r3, r2
 80004a4:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <__popcountsi2+0x30>)
 80004a6:	4013      	ands	r3, r2
 80004a8:	0218      	lsls	r0, r3, #8
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	0403      	lsls	r3, r0, #16
 80004ae:	18c0      	adds	r0, r0, r3
 80004b0:	0e00      	lsrs	r0, r0, #24
 80004b2:	4770      	bx	lr
 80004b4:	55555555 	.word	0x55555555
 80004b8:	33333333 	.word	0x33333333
 80004bc:	0f0f0f0f 	.word	0x0f0f0f0f

080004c0 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d200      	bcs.n	80004d4 <lfs_max+0x14>
 80004d2:	0013      	movs	r3, r2
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}

080004dc <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d900      	bls.n	80004f0 <lfs_min+0x14>
 80004ee:	0013      	movs	r3, r2
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6839      	ldr	r1, [r7, #0]
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff fe92 	bl	8000230 <__aeabi_uidivmod>
 800050c:	000b      	movs	r3, r1
 800050e:	001a      	movs	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	1a9b      	subs	r3, r3, r2
}
 8000514:	0018      	movs	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	b002      	add	sp, #8
 800051a:	bd80      	pop	{r7, pc}

0800051c <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	18d3      	adds	r3, r2, r3
 800052c:	3b01      	subs	r3, #1
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f7ff ffe0 	bl	80004f8 <lfs_aligndown>
 8000538:	0003      	movs	r3, r0
}
 800053a:	0018      	movs	r0, r3
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}

08000542 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3b01      	subs	r3, #1
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff ff5e 	bl	8000410 <__clzsi2>
 8000554:	0003      	movs	r3, r0
 8000556:	001a      	movs	r2, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800055c:	0018      	movs	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff ff6d 	bl	800044c <__ctzsi2>
 8000572:	0003      	movs	r3, r0
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	b002      	add	sp, #8
 800057a:	bd80      	pop	{r7, pc}

0800057c <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff ff81 	bl	800048c <__popcountsi2>
 800058a:	0003      	movs	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	b002      	add	sp, #8
 8000592:	bd80      	pop	{r7, pc}

08000594 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	1ad3      	subs	r3, r2, r3
}
 80005a4:	0018      	movs	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b002      	add	sp, #8
 80005aa:	bd80      	pop	{r7, pc}

080005ac <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80005b4:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80005b6:	0018      	movs	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}

080005be <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	0018      	movs	r0, r3
 80005ca:	f7ff ffef 	bl	80005ac <lfs_fromle32>
 80005ce:	0003      	movs	r3, r0
}
 80005d0:	0018      	movs	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b002      	add	sp, #8
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80005e4:	0018      	movs	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b002      	add	sp, #8
 80005ea:	bd80      	pop	{r7, pc}

080005ec <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff ffee 	bl	80005d8 <lfs_frombe32>
 80005fc:	0003      	movs	r3, r0
}
 80005fe:	0018      	movs	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}

08000606 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	0018      	movs	r0, r3
 8000612:	f009 fef3 	bl	800a3fc <malloc>
 8000616:	0003      	movs	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8000618:	0018      	movs	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	b002      	add	sp, #8
 800061e:	bd80      	pop	{r7, pc}

08000620 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	0018      	movs	r0, r3
 800062c:	f009 fef0 	bl	800a410 <free>
#else
    (void)p;
#endif
}
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}

08000638 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	2201      	movs	r2, #1
 8000646:	4252      	negs	r2, r2
 8000648:	601a      	str	r2, [r3, #0]
}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}

08000652 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	68d8      	ldr	r0, [r3, #12]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000666:	001a      	movs	r2, r3
 8000668:	21ff      	movs	r1, #255	@ 0xff
 800066a:	f00a f8cb 	bl	800a804 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	2201      	movs	r2, #1
 8000672:	4252      	negs	r2, r2
 8000674:	601a      	str	r2, [r3, #0]
}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af02      	add	r7, sp, #8
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800068e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000690:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8000692:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000696:	18d2      	adds	r2, r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d80a      	bhi.n	80006b8 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d100      	bne.n	80006ac <lfs_bd_read+0x2c>
 80006aa:	e130      	b.n	800090e <lfs_bd_read+0x28e>
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80006b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d200      	bcs.n	80006b8 <lfs_bd_read+0x38>
 80006b6:	e12a      	b.n	800090e <lfs_bd_read+0x28e>
        return LFS_ERR_CORRUPT;
 80006b8:	2354      	movs	r3, #84	@ 0x54
 80006ba:	425b      	negs	r3, r3
 80006bc:	e12c      	b.n	8000918 <lfs_bd_read+0x298>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80006be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006c0:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d043      	beq.n	8000750 <lfs_bd_read+0xd0>
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d13e      	bne.n	8000750 <lfs_bd_read+0xd0>
                off < pcache->off + pcache->size) {
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	18d3      	adds	r3, r2, r3
        if (pcache && block == pcache->block &&
 80006dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80006de:	429a      	cmp	r2, r3
 80006e0:	d236      	bcs.n	8000750 <lfs_bd_read+0xd0>
            if (off >= pcache->off) {
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d326      	bcc.n	800073a <lfs_bd_read+0xba>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	6859      	ldr	r1, [r3, #4]
 80006f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006f6:	1acb      	subs	r3, r1, r3
 80006f8:	18d2      	adds	r2, r2, r3
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f7ff feec 	bl	80004dc <lfs_min>
 8000704:	0003      	movs	r3, r0
 8000706:	61bb      	str	r3, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	68da      	ldr	r2, [r3, #12]
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000712:	1acb      	subs	r3, r1, r3
 8000714:	18d1      	adds	r1, r2, r3
 8000716:	69ba      	ldr	r2, [r7, #24]
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	0018      	movs	r0, r3
 800071c:	f00a f929 	bl	800a972 <memcpy>

                data += diff;
 8000720:	69fa      	ldr	r2, [r7, #28]
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	18d3      	adds	r3, r2, r3
 8000726:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000728:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	18d3      	adds	r3, r2, r3
 800072e:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8000730:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8000738:	e0e9      	b.n	800090e <lfs_bd_read+0x28e>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000740:	1ad2      	subs	r2, r2, r3
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	0011      	movs	r1, r2
 8000746:	0018      	movs	r0, r3
 8000748:	f7ff fec8 	bl	80004dc <lfs_min>
 800074c:	0003      	movs	r3, r0
 800074e:	61bb      	str	r3, [r7, #24]
        }

        if (block == rcache->block &&
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000756:	429a      	cmp	r2, r3
 8000758:	d13e      	bne.n	80007d8 <lfs_bd_read+0x158>
                off < rcache->off + rcache->size) {
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685a      	ldr	r2, [r3, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	18d3      	adds	r3, r2, r3
        if (block == rcache->block &&
 8000764:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000766:	429a      	cmp	r2, r3
 8000768:	d236      	bcs.n	80007d8 <lfs_bd_read+0x158>
            if (off >= rcache->off) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000770:	429a      	cmp	r2, r3
 8000772:	d326      	bcc.n	80007c2 <lfs_bd_read+0x142>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	689a      	ldr	r2, [r3, #8]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6859      	ldr	r1, [r3, #4]
 800077c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800077e:	1acb      	subs	r3, r1, r3
 8000780:	18d2      	adds	r2, r2, r3
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	0011      	movs	r1, r2
 8000786:	0018      	movs	r0, r3
 8000788:	f7ff fea8 	bl	80004dc <lfs_min>
 800078c:	0003      	movs	r3, r0
 800078e:	61bb      	str	r3, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	68da      	ldr	r2, [r3, #12]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800079a:	1acb      	subs	r3, r1, r3
 800079c:	18d1      	adds	r1, r2, r3
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f00a f8e5 	bl	800a972 <memcpy>

                data += diff;
 80007a8:	69fa      	ldr	r2, [r7, #28]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	18d3      	adds	r3, r2, r3
 80007ae:	61fb      	str	r3, [r7, #28]
                off += diff;
 80007b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	18d3      	adds	r3, r2, r3
 80007b6:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 80007b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 80007c0:	e0a5      	b.n	800090e <lfs_bd_read+0x28e>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	685a      	ldr	r2, [r3, #4]
 80007c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007c8:	1ad2      	subs	r2, r2, r3
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fe84 	bl	80004dc <lfs_min>
 80007d4:	0003      	movs	r3, r0
 80007d6:	61bb      	str	r3, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80007d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d339      	bcc.n	8000854 <lfs_bd_read+0x1d4>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80007e4:	695a      	ldr	r2, [r3, #20]
 80007e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007e8:	0011      	movs	r1, r2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff fd20 	bl	8000230 <__aeabi_uidivmod>
 80007f0:	1e0b      	subs	r3, r1, #0
 80007f2:	d12f      	bne.n	8000854 <lfs_bd_read+0x1d4>
                size >= lfs->cfg->read_size) {
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80007f8:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80007fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d329      	bcc.n	8000854 <lfs_bd_read+0x1d4>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000804:	695a      	ldr	r2, [r3, #20]
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff fe74 	bl	80004f8 <lfs_aligndown>
 8000810:	0003      	movs	r3, r0
 8000812:	61bb      	str	r3, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000818:	685c      	ldr	r4, [r3, #4]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800081e:	69fd      	ldr	r5, [r7, #28]
 8000820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000822:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	002b      	movs	r3, r5
 800082a:	47a0      	blx	r4
 800082c:	0003      	movs	r3, r0
 800082e:	617b      	str	r3, [r7, #20]
            if (err) {
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <lfs_bd_read+0x1ba>
                return err;
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	e06e      	b.n	8000918 <lfs_bd_read+0x298>
            }

            data += diff;
 800083a:	69fa      	ldr	r2, [r7, #28]
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	18d3      	adds	r3, r2, r3
 8000840:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	18d3      	adds	r3, r2, r3
 8000848:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 800084a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 8000852:	e05c      	b.n	800090e <lfs_bd_read+0x28e>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000858:	2b00      	cmp	r3, #0
 800085a:	d00a      	beq.n	8000872 <lfs_bd_read+0x1f2>
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000862:	429a      	cmp	r2, r3
 8000864:	d305      	bcc.n	8000872 <lfs_bd_read+0x1f2>
 8000866:	4b2e      	ldr	r3, [pc, #184]	@ (8000920 <lfs_bd_read+0x2a0>)
 8000868:	4a2e      	ldr	r2, [pc, #184]	@ (8000924 <lfs_bd_read+0x2a4>)
 800086a:	482f      	ldr	r0, [pc, #188]	@ (8000928 <lfs_bd_read+0x2a8>)
 800086c:	216b      	movs	r1, #107	@ 0x6b
 800086e:	f009 fda7 	bl	800a3c0 <__assert_func>
        rcache->block = block;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000876:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff fe38 	bl	80004f8 <lfs_aligndown>
 8000888:	0002      	movs	r2, r0
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800088e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	18d2      	adds	r2, r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000898:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 800089a:	0019      	movs	r1, r3
 800089c:	0010      	movs	r0, r2
 800089e:	f7ff fe3d 	bl	800051c <lfs_alignup>
 80008a2:	0002      	movs	r2, r0
                    lfs->cfg->block_size)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80008a8:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 80008aa:	0019      	movs	r1, r3
 80008ac:	0010      	movs	r0, r2
 80008ae:	f7ff fe15 	bl	80004dc <lfs_min>
 80008b2:	0002      	movs	r2, r0
                - rcache->off,
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 80008b8:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80008be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 80008c0:	0019      	movs	r1, r3
 80008c2:	0010      	movs	r0, r2
 80008c4:	f7ff fe0a 	bl	80004dc <lfs_min>
 80008c8:	0002      	movs	r2, r0
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80008d2:	685c      	ldr	r4, [r3, #4]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6819      	ldr	r1, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	002b      	movs	r3, r5
 80008ec:	47a0      	blx	r4
 80008ee:	0003      	movs	r3, r0
 80008f0:	613b      	str	r3, [r7, #16]
        LFS_ASSERT(err <= 0);
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dd05      	ble.n	8000904 <lfs_bd_read+0x284>
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <lfs_bd_read+0x2ac>)
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <lfs_bd_read+0x2a4>)
 80008fc:	480a      	ldr	r0, [pc, #40]	@ (8000928 <lfs_bd_read+0x2a8>)
 80008fe:	2176      	movs	r1, #118	@ 0x76
 8000900:	f009 fd5e 	bl	800a3c0 <__assert_func>
        if (err) {
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <lfs_bd_read+0x28e>
            return err;
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	e004      	b.n	8000918 <lfs_bd_read+0x298>
    while (size > 0) {
 800090e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000910:	2b00      	cmp	r3, #0
 8000912:	d000      	beq.n	8000916 <lfs_bd_read+0x296>
 8000914:	e6d3      	b.n	80006be <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8000916:	2300      	movs	r3, #0
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b008      	add	sp, #32
 800091e:	bdb0      	pop	{r4, r5, r7, pc}
 8000920:	0800b448 	.word	0x0800b448
 8000924:	0800c2b8 	.word	0x0800c2b8
 8000928:	0800b478 	.word	0x0800b478
 800092c:	0800b48c 	.word	0x0800b48c

08000930 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b090      	sub	sp, #64	@ 0x40
 8000934:	af04      	add	r7, sp, #16
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800093e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800094a:	e03d      	b.n	80009c8 <lfs_bd_cmp+0x98>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800094c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800094e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	2108      	movs	r1, #8
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff fdc1 	bl	80004dc <lfs_min>
 800095a:	0003      	movs	r3, r0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000962:	1ad5      	subs	r5, r2, r3
 8000964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000968:	18d3      	adds	r3, r2, r3
 800096a:	687c      	ldr	r4, [r7, #4]
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000972:	9203      	str	r2, [sp, #12]
 8000974:	2214      	movs	r2, #20
 8000976:	18ba      	adds	r2, r7, r2
 8000978:	9202      	str	r2, [sp, #8]
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	002b      	movs	r3, r5
 8000982:	0022      	movs	r2, r4
 8000984:	f7ff fe7c 	bl	8000680 <lfs_bd_read>
 8000988:	0003      	movs	r3, r0
 800098a:	623b      	str	r3, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <lfs_bd_cmp+0x66>
            return err;
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	e01d      	b.n	80009d2 <lfs_bd_cmp+0xa2>
        }

        int res = memcmp(dat, data + i, diff);
 8000996:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800099a:	18d1      	adds	r1, r2, r3
 800099c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800099e:	2314      	movs	r3, #20
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	0018      	movs	r0, r3
 80009a4:	f009 ff20 	bl	800a7e8 <memcmp>
 80009a8:	0003      	movs	r3, r0
 80009aa:	61fb      	str	r3, [r7, #28]
        if (res) {
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d006      	beq.n	80009c0 <lfs_bd_cmp+0x90>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	da01      	bge.n	80009bc <lfs_bd_cmp+0x8c>
 80009b8:	2301      	movs	r3, #1
 80009ba:	e00a      	b.n	80009d2 <lfs_bd_cmp+0xa2>
 80009bc:	2302      	movs	r3, #2
 80009be:	e008      	b.n	80009d2 <lfs_bd_cmp+0xa2>
    for (lfs_off_t i = 0; i < size; i += diff) {
 80009c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3bd      	bcc.n	800094c <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b00c      	add	sp, #48	@ 0x30
 80009d8:	bdb0      	pop	{r4, r5, r7, pc}

080009da <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 80009da:	b5b0      	push	{r4, r5, r7, lr}
 80009dc:	b08e      	sub	sp, #56	@ 0x38
 80009de:	af04      	add	r7, sp, #16
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80009f0:	e033      	b.n	8000a5a <lfs_bd_crc+0x80>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 80009f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80009f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	2108      	movs	r1, #8
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fd6e 	bl	80004dc <lfs_min>
 8000a00:	0003      	movs	r3, r0
 8000a02:	623b      	str	r3, [r7, #32]
        int err = lfs_bd_read(lfs,
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a08:	1ad5      	subs	r5, r2, r3
 8000a0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0e:	18d3      	adds	r3, r2, r3
 8000a10:	687c      	ldr	r4, [r7, #4]
 8000a12:	68b9      	ldr	r1, [r7, #8]
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	6a3a      	ldr	r2, [r7, #32]
 8000a18:	9203      	str	r2, [sp, #12]
 8000a1a:	2214      	movs	r2, #20
 8000a1c:	18ba      	adds	r2, r7, r2
 8000a1e:	9202      	str	r2, [sp, #8]
 8000a20:	9301      	str	r3, [sp, #4]
 8000a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	002b      	movs	r3, r5
 8000a28:	0022      	movs	r2, r4
 8000a2a:	f7ff fe29 	bl	8000680 <lfs_bd_read>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	61fb      	str	r3, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <lfs_bd_crc+0x62>
            return err;
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	e013      	b.n	8000a64 <lfs_bd_crc+0x8a>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8000a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6a3a      	ldr	r2, [r7, #32]
 8000a42:	2114      	movs	r1, #20
 8000a44:	1879      	adds	r1, r7, r1
 8000a46:	0018      	movs	r0, r3
 8000a48:	f007 f91a 	bl	8007c80 <lfs_crc>
 8000a4c:	0002      	movs	r2, r0
 8000a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a50:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	18d3      	adds	r3, r2, r3
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d3c7      	bcc.n	80009f2 <lfs_bd_crc+0x18>
    }

    return 0;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b00a      	add	sp, #40	@ 0x28
 8000a6a:	bdb0      	pop	{r4, r5, r7, pc}

08000a6c <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6e:	b08d      	sub	sp, #52	@ 0x34
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	001a      	movs	r2, r3
 8000a7a:	1cfb      	adds	r3, r7, #3
 8000a7c:	701a      	strb	r2, [r3, #0]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	d06a      	beq.n	8000b5c <lfs_bd_flush+0xf0>
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	d066      	beq.n	8000b5c <lfs_bd_flush+0xf0>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d305      	bcc.n	8000aa6 <lfs_bd_flush+0x3a>
 8000a9a:	4b33      	ldr	r3, [pc, #204]	@ (8000b68 <lfs_bd_flush+0xfc>)
 8000a9c:	4a33      	ldr	r2, [pc, #204]	@ (8000b6c <lfs_bd_flush+0x100>)
 8000a9e:	4834      	ldr	r0, [pc, #208]	@ (8000b70 <lfs_bd_flush+0x104>)
 8000aa0:	21b3      	movs	r1, #179	@ 0xb3
 8000aa2:	f009 fc8d 	bl	800a3c0 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	f7ff fd32 	bl	800051c <lfs_alignup>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	61fb      	str	r3, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ac0:	689c      	ldr	r4, [r3, #8]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	6819      	ldr	r1, [r3, #0]
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	002b      	movs	r3, r5
 8000ad8:	47a0      	blx	r4
 8000ada:	0003      	movs	r3, r0
 8000adc:	61bb      	str	r3, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	dd05      	ble.n	8000af0 <lfs_bd_flush+0x84>
 8000ae4:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <lfs_bd_flush+0x108>)
 8000ae6:	4a21      	ldr	r2, [pc, #132]	@ (8000b6c <lfs_bd_flush+0x100>)
 8000ae8:	4821      	ldr	r0, [pc, #132]	@ (8000b70 <lfs_bd_flush+0x104>)
 8000aea:	21b7      	movs	r1, #183	@ 0xb7
 8000aec:	f009 fc68 	bl	800a3c0 <__assert_func>
        if (err) {
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <lfs_bd_flush+0x8e>
            return err;
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	e031      	b.n	8000b5e <lfs_bd_flush+0xf2>
        }

        if (validate) {
 8000afa:	1cfb      	adds	r3, r7, #3
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d026      	beq.n	8000b50 <lfs_bd_flush+0xe4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fd95 	bl	8000638 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	6859      	ldr	r1, [r3, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	68db      	ldr	r3, [r3, #12]
            int res = lfs_bd_cmp(lfs,
 8000b1a:	69fe      	ldr	r6, [r7, #28]
 8000b1c:	687d      	ldr	r5, [r7, #4]
 8000b1e:	68fc      	ldr	r4, [r7, #12]
 8000b20:	69f8      	ldr	r0, [r7, #28]
 8000b22:	9003      	str	r0, [sp, #12]
 8000b24:	9302      	str	r3, [sp, #8]
 8000b26:	9101      	str	r1, [sp, #4]
 8000b28:	9200      	str	r2, [sp, #0]
 8000b2a:	0033      	movs	r3, r6
 8000b2c:	002a      	movs	r2, r5
 8000b2e:	2100      	movs	r1, #0
 8000b30:	0020      	movs	r0, r4
 8000b32:	f7ff fefd 	bl	8000930 <lfs_bd_cmp>
 8000b36:	0003      	movs	r3, r0
 8000b38:	617b      	str	r3, [r7, #20]
            if (res < 0) {
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	da01      	bge.n	8000b44 <lfs_bd_flush+0xd8>
                return res;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	e00c      	b.n	8000b5e <lfs_bd_flush+0xf2>
            }

            if (res != LFS_CMP_EQ) {
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <lfs_bd_flush+0xe4>
                return LFS_ERR_CORRUPT;
 8000b4a:	2354      	movs	r3, #84	@ 0x54
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	e006      	b.n	8000b5e <lfs_bd_flush+0xf2>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	0011      	movs	r1, r2
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fd7b 	bl	8000652 <lfs_cache_zero>
    }

    return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	0018      	movs	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b009      	add	sp, #36	@ 0x24
 8000b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	0800b498 	.word	0x0800b498
 8000b6c:	0800c2c4 	.word	0x0800c2c4
 8000b70:	0800b478 	.word	0x0800b478
 8000b74:	0800b48c 	.word	0x0800b48c

08000b78 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	001a      	movs	r2, r3
 8000b86:	1cfb      	adds	r3, r7, #3
 8000b88:	701a      	strb	r2, [r3, #0]
    lfs_cache_drop(lfs, rcache);
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fd51 	bl	8000638 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000b96:	1cfb      	adds	r3, r7, #3
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff ff64 	bl	8000a6c <lfs_bd_flush>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	617b      	str	r3, [r7, #20]
    if (err) {
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <lfs_bd_sync+0x3a>
        return err;
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	e012      	b.n	8000bd8 <lfs_bd_sync+0x60>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	4790      	blx	r2
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	617b      	str	r3, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	dd05      	ble.n	8000bd6 <lfs_bd_sync+0x5e>
 8000bca:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <lfs_bd_sync+0x68>)
 8000bcc:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <lfs_bd_sync+0x6c>)
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <lfs_bd_sync+0x70>)
 8000bd0:	21dd      	movs	r1, #221	@ 0xdd
 8000bd2:	f009 fbf5 	bl	800a3c0 <__assert_func>
    return err;
 8000bd6:	697b      	ldr	r3, [r7, #20]
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b006      	add	sp, #24
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	0800b48c 	.word	0x0800b48c
 8000be4:	0800c2d4 	.word	0x0800c2d4
 8000be8:	0800b478 	.word	0x0800b478

08000bec <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	1cfb      	adds	r3, r7, #3
 8000bfc:	701a      	strb	r2, [r3, #0]
    const uint8_t *data = buffer;
 8000bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c00:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8000c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c04:	3302      	adds	r3, #2
 8000c06:	d00a      	beq.n	8000c1e <lfs_bd_prog+0x32>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d305      	bcc.n	8000c1e <lfs_bd_prog+0x32>
 8000c12:	4b4b      	ldr	r3, [pc, #300]	@ (8000d40 <lfs_bd_prog+0x154>)
 8000c14:	4a4b      	ldr	r2, [pc, #300]	@ (8000d44 <lfs_bd_prog+0x158>)
 8000c16:	484c      	ldr	r0, [pc, #304]	@ (8000d48 <lfs_bd_prog+0x15c>)
 8000c18:	21e8      	movs	r1, #232	@ 0xe8
 8000c1a:	f009 fbd1 	bl	800a3c0 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8000c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c22:	18d2      	adds	r2, r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d800      	bhi.n	8000c30 <lfs_bd_prog+0x44>
 8000c2e:	e07e      	b.n	8000d2e <lfs_bd_prog+0x142>
 8000c30:	4b46      	ldr	r3, [pc, #280]	@ (8000d4c <lfs_bd_prog+0x160>)
 8000c32:	4a44      	ldr	r2, [pc, #272]	@ (8000d44 <lfs_bd_prog+0x158>)
 8000c34:	4844      	ldr	r0, [pc, #272]	@ (8000d48 <lfs_bd_prog+0x15c>)
 8000c36:	21e9      	movs	r1, #233	@ 0xe9
 8000c38:	f009 fbc2 	bl	800a3c0 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d155      	bne.n	8000cf2 <lfs_bd_prog+0x106>
                off >= pcache->off &&
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8000c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d350      	bcc.n	8000cf2 <lfs_bd_prog+0x106>
                off < pcache->off + lfs->cfg->cache_size) {
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5a:	18d3      	adds	r3, r2, r3
                off >= pcache->off &&
 8000c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d247      	bcs.n	8000cf2 <lfs_bd_prog+0x106>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	6859      	ldr	r1, [r3, #4]
 8000c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c6e:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8000c70:	18d2      	adds	r2, r2, r3
 8000c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff fc30 	bl	80004dc <lfs_min>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	61bb      	str	r3, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	18d3      	adds	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	69f9      	ldr	r1, [r7, #28]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f009 fe6d 	bl	800a972 <memcpy>

            data += diff;
 8000c98:	69fa      	ldr	r2, [r7, #28]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	18d3      	adds	r3, r2, r3
 8000c9e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000ca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	18d3      	adds	r3, r2, r3
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 8000ca8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	6898      	ldr	r0, [r3, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	f7ff fbff 	bl	80004c0 <lfs_max>
 8000cc2:	0002      	movs	r2, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d12a      	bne.n	8000d2c <lfs_bd_prog+0x140>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000cd6:	1cfb      	adds	r3, r7, #3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f7ff fec4 	bl	8000a6c <lfs_bd_flush>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	617b      	str	r3, [r7, #20]
                if (err) {
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01e      	beq.n	8000d2c <lfs_bd_prog+0x140>
                    return err;
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	e021      	b.n	8000d36 <lfs_bd_prog+0x14a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	d006      	beq.n	8000d08 <lfs_bd_prog+0x11c>
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <lfs_bd_prog+0x164>)
 8000cfc:	4a11      	ldr	r2, [pc, #68]	@ (8000d44 <lfs_bd_prog+0x158>)
 8000cfe:	2183      	movs	r1, #131	@ 0x83
 8000d00:	0049      	lsls	r1, r1, #1
 8000d02:	4811      	ldr	r0, [pc, #68]	@ (8000d48 <lfs_bd_prog+0x15c>)
 8000d04:	f009 fb5c 	bl	800a3c0 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d0c:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d12:	699a      	ldr	r2, [r3, #24]
 8000d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff fbed 	bl	80004f8 <lfs_aligndown>
 8000d1e:	0002      	movs	r2, r0
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	e000      	b.n	8000d2e <lfs_bd_prog+0x142>
            continue;
 8000d2c:	46c0      	nop			@ (mov r8, r8)
    while (size > 0) {
 8000d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d183      	bne.n	8000c3c <lfs_bd_prog+0x50>
    }

    return 0;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b008      	add	sp, #32
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	0800b4bc 	.word	0x0800b4bc
 8000d44:	0800c2e0 	.word	0x0800c2e0
 8000d48:	0800b478 	.word	0x0800b478
 8000d4c:	0800b4f4 	.word	0x0800b4f4
 8000d50:	0800b518 	.word	0x0800b518

08000d54 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d306      	bcc.n	8000d76 <lfs_bd_erase+0x22>
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <lfs_bd_erase+0x54>)
 8000d6a:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <lfs_bd_erase+0x58>)
 8000d6c:	218a      	movs	r1, #138	@ 0x8a
 8000d6e:	0049      	lsls	r1, r1, #1
 8000d70:	480f      	ldr	r0, [pc, #60]	@ (8000db0 <lfs_bd_erase+0x5c>)
 8000d72:	f009 fb25 	bl	800a3c0 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d80:	6839      	ldr	r1, [r7, #0]
 8000d82:	0018      	movs	r0, r3
 8000d84:	4790      	blx	r2
 8000d86:	0003      	movs	r3, r0
 8000d88:	60fb      	str	r3, [r7, #12]
    LFS_ASSERT(err <= 0);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dd06      	ble.n	8000d9e <lfs_bd_erase+0x4a>
 8000d90:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <lfs_bd_erase+0x60>)
 8000d92:	4a06      	ldr	r2, [pc, #24]	@ (8000dac <lfs_bd_erase+0x58>)
 8000d94:	218b      	movs	r1, #139	@ 0x8b
 8000d96:	0049      	lsls	r1, r1, #1
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <lfs_bd_erase+0x5c>)
 8000d9a:	f009 fb11 	bl	800a3c0 <__assert_func>
    return err;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b004      	add	sp, #16
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	0800b53c 	.word	0x0800b53c
 8000dac:	0800c2ec 	.word	0x0800c2ec
 8000db0:	0800b478 	.word	0x0800b478
 8000db4:	0800b48c 	.word	0x0800b48c

08000db8 <lfs_path_namelen>:


/// Small type-level utilities ///

// some operations on paths
static inline lfs_size_t lfs_path_namelen(const char *path) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
    return strcspn(path, "/");
 8000dc0:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <lfs_path_namelen+0x20>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0011      	movs	r1, r2
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f009 fd24 	bl	800a814 <strcspn>
 8000dcc:	0003      	movs	r3, r0
}
 8000dce:	0018      	movs	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	0800b558 	.word	0x0800b558

08000ddc <lfs_path_islast>:

static inline bool lfs_path_islast(const char *path) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    lfs_size_t namelen = lfs_path_namelen(path);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff ffe6 	bl	8000db8 <lfs_path_namelen>
 8000dec:	0003      	movs	r3, r0
 8000dee:	60fb      	str	r3, [r7, #12]
    return path[namelen + strspn(path + namelen, "/")] == '\0';
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	18d3      	adds	r3, r2, r3
 8000df6:	4a09      	ldr	r2, [pc, #36]	@ (8000e1c <lfs_path_islast+0x40>)
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f009 fd1b 	bl	800a836 <strspn>
 8000e00:	0002      	movs	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	18d3      	adds	r3, r2, r3
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	425a      	negs	r2, r3
 8000e0e:	4153      	adcs	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b004      	add	sp, #16
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	0800b558 	.word	0x0800b558

08000e20 <lfs_path_isdir>:

static inline bool lfs_path_isdir(const char *path) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    return path[lfs_path_namelen(path)] != '\0';
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff ffc4 	bl	8000db8 <lfs_path_namelen>
 8000e30:	0002      	movs	r2, r0
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	189b      	adds	r3, r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	4193      	sbcs	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <lfs_pair_swap>:

// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3304      	adds	r3, #4
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	46c0      	nop			@ (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b004      	add	sp, #16
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	d004      	beq.n	8000e86 <lfs_pair_isnull+0x1a>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3304      	adds	r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	d101      	bne.n	8000e8a <lfs_pair_isnull+0x1e>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <lfs_pair_isnull+0x20>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	1c1a      	adds	r2, r3, #0
 8000e8e:	2301      	movs	r3, #1
 8000e90:	4013      	ands	r3, r2
 8000e92:	b2db      	uxtb	r3, r3
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d017      	beq.n	8000ee2 <lfs_pair_cmp+0x46>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	3304      	adds	r3, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d00f      	beq.n	8000ee2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d008      	beq.n	8000ee2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d001      	beq.n	8000ee2 <lfs_pair_cmp+0x46>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <lfs_pair_cmp+0x48>
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}

08000eec <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d107      	bne.n	8000f12 <lfs_pair_issync+0x26>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3304      	adds	r3, #4
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d00d      	beq.n	8000f2e <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d108      	bne.n	8000f32 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3304      	adds	r3, #4
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d101      	bne.n	8000f32 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <lfs_pair_issync+0x48>
 8000f32:	2300      	movs	r3, #0
 8000f34:	1c1a      	adds	r2, r3, #0
 8000f36:	2301      	movs	r3, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	b2db      	uxtb	r3, r3
}
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff fb2b 	bl	80005ac <lfs_fromle32>
 8000f56:	0002      	movs	r2, r0
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	1d1c      	adds	r4, r3, #4
 8000f66:	0010      	movs	r0, r2
 8000f68:	f7ff fb20 	bl	80005ac <lfs_fromle32>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	6023      	str	r3, [r4, #0]
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b003      	add	sp, #12
 8000f76:	bd90      	pop	{r4, r7, pc}

08000f78 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff fb1a 	bl	80005be <lfs_tole32>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3304      	adds	r3, #4
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	1d1c      	adds	r4, r3, #4
 8000f9a:	0010      	movs	r0, r2
 8000f9c:	f7ff fb0f 	bl	80005be <lfs_tole32>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	6023      	str	r3, [r4, #0]
}
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b003      	add	sp, #12
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	0fdb      	lsrs	r3, r3, #31
 8000fba:	b2db      	uxtb	r3, r3
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b002      	add	sp, #8
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	059b      	lsls	r3, r3, #22
 8000fd0:	159b      	asrs	r3, r3, #22
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	425a      	negs	r2, r3
 8000fd6:	4153      	adcs	r3, r2
 8000fd8:	b2db      	uxtb	r3, r3
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	0d1b      	lsrs	r3, r3, #20
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	23e0      	movs	r3, #224	@ 0xe0
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	b29b      	uxth	r3, r3
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	0d1b      	lsrs	r3, r3, #20
 800100c:	b29a      	uxth	r2, r3
 800100e:	23f0      	movs	r3, #240	@ 0xf0
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	4013      	ands	r3, r2
 8001014:	b29b      	uxth	r3, r3
}
 8001016:	0018      	movs	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}

0800101e <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	0d1b      	lsrs	r3, r3, #20
 800102a:	b29b      	uxth	r3, r3
 800102c:	055b      	lsls	r3, r3, #21
 800102e:	0d5b      	lsrs	r3, r3, #21
 8001030:	b29b      	uxth	r3, r3
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}

0800103a <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0d1b      	lsrs	r3, r3, #20
 8001046:	b2db      	uxtb	r3, r3
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}

08001050 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff ffed 	bl	800103a <lfs_tag_chunk>
 8001060:	0003      	movs	r3, r0
 8001062:	b25b      	sxtb	r3, r3
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}

0800106c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	0a9b      	lsrs	r3, r3, #10
 8001078:	b29b      	uxth	r3, r3
 800107a:	059b      	lsls	r3, r3, #22
 800107c:	0d9b      	lsrs	r3, r3, #22
 800107e:	b29b      	uxth	r3, r3
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}

08001088 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	059b      	lsls	r3, r3, #22
 8001094:	0d9b      	lsrs	r3, r3, #22
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}

0800109e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff ff8b 	bl	8000fc4 <lfs_tag_isdelete>
 80010ae:	0003      	movs	r3, r0
 80010b0:	001a      	movs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	18d3      	adds	r3, r2, r3
 80010b6:	0018      	movs	r0, r3
 80010b8:	f7ff ffe6 	bl	8001088 <lfs_tag_size>
 80010bc:	0003      	movs	r3, r0
 80010be:	3304      	adds	r3, #4
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
    a->tag ^= b->tag;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	405a      	eors	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	601a      	str	r2, [r3, #0]
    a->pair[0] ^= b->pair[0];
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	405a      	eors	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	605a      	str	r2, [r3, #4]
    a->pair[1] ^= b->pair[1];
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	405a      	eors	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
}
 80010fc:	46c0      	nop			@ (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    return a->tag == 0
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
            && a->pair[0] == 0
            && a->pair[1] == 0;
 8001110:	2b00      	cmp	r3, #0
 8001112:	d109      	bne.n	8001128 <lfs_gstate_iszero+0x24>
            && a->pair[0] == 0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d105      	bne.n	8001128 <lfs_gstate_iszero+0x24>
            && a->pair[1] == 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <lfs_gstate_iszero+0x24>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <lfs_gstate_iszero+0x26>
 8001128:	2300      	movs	r3, #0
 800112a:	1c1a      	adds	r2, r3, #0
 800112c:	2301      	movs	r3, #1
 800112e:	4013      	ands	r3, r2
 8001130:	b2db      	uxtb	r3, r3
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}

0800113a <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	0018      	movs	r0, r3
 8001148:	f7ff ff9e 	bl	8001088 <lfs_tag_size>
 800114c:	0003      	movs	r3, r0
 800114e:	1e5a      	subs	r2, r3, #1
 8001150:	4193      	sbcs	r3, r2
 8001152:	b2db      	uxtb	r3, r3
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}

0800115c <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ff8d 	bl	8001088 <lfs_tag_size>
 800116e:	0003      	movs	r3, r0
 8001170:	b2db      	uxtb	r3, r3
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}

0800117a <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff ff2b 	bl	8000fe2 <lfs_tag_type1>
 800118c:	0003      	movs	r3, r0
 800118e:	1e5a      	subs	r2, r3, #1
 8001190:	4193      	sbcs	r3, r2
 8001192:	b2db      	uxtb	r3, r3
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	b002      	add	sp, #8
 800119a:	bd80      	pop	{r7, pc}

0800119c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff ff6d 	bl	8001088 <lfs_tag_size>
 80011ae:	0003      	movs	r3, r0
 80011b0:	0a5b      	lsrs	r3, r3, #9
 80011b2:	1e5a      	subs	r2, r3, #1
 80011b4:	4193      	sbcs	r3, r2
 80011b6:	b2db      	uxtb	r3, r3
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}

080011c0 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff ff07 	bl	8000fe2 <lfs_tag_type1>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d00a      	beq.n	80011ee <lfs_gstate_hasmovehere+0x2e>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3304      	adds	r3, #4
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	0011      	movs	r1, r2
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff fe5b 	bl	8000e9c <lfs_pair_cmp>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d101      	bne.n	80011ee <lfs_gstate_hasmovehere+0x2e>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <lfs_gstate_hasmovehere+0x30>
 80011ee:	2300      	movs	r3, #0
 80011f0:	1c1a      	adds	r2, r3, #0
 80011f2:	2301      	movs	r3, #1
 80011f4:	4013      	ands	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff f9cd 	bl	80005ac <lfs_fromle32>
 8001212:	0002      	movs	r2, r0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	0018      	movs	r0, r3
 800121e:	f7ff f9c5 	bl	80005ac <lfs_fromle32>
 8001222:	0002      	movs	r2, r0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff f9bd 	bl	80005ac <lfs_fromle32>
 8001232:	0002      	movs	r2, r0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	609a      	str	r2, [r3, #8]
}
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff f9b6 	bl	80005be <lfs_tole32>
 8001252:	0002      	movs	r2, r0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff f9ae 	bl	80005be <lfs_tole32>
 8001262:	0002      	movs	r2, r0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff f9a6 	bl	80005be <lfs_tole32>
 8001272:	0002      	movs	r2, r0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]
}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}

08001280 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff f98d 	bl	80005ac <lfs_fromle32>
 8001292:	0002      	movs	r2, r0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff f985 	bl	80005ac <lfs_fromle32>
 80012a2:	0002      	movs	r2, r0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	605a      	str	r2, [r3, #4]
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff f97e 	bl	80005be <lfs_tole32>
 80012c2:	0002      	movs	r2, r0
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff f976 	bl	80005be <lfs_tole32>
 80012d2:	0002      	movs	r2, r0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	605a      	str	r2, [r3, #4]
}
 80012d8:	46c0      	nop			@ (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff f95d 	bl	80005ac <lfs_fromle32>
 80012f2:	0002      	movs	r2, r0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff f955 	bl	80005ac <lfs_fromle32>
 8001302:	0002      	movs	r2, r0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	605a      	str	r2, [r3, #4]
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff f94e 	bl	80005be <lfs_tole32>
 8001322:	0002      	movs	r2, r0
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	0018      	movs	r0, r3
 800132e:	f7ff f946 	bl	80005be <lfs_tole32>
 8001332:	0002      	movs	r2, r0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	605a      	str	r2, [r3, #4]
}
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff f92d 	bl	80005ac <lfs_fromle32>
 8001352:	0002      	movs	r2, r0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff f925 	bl	80005ac <lfs_fromle32>
 8001362:	0002      	movs	r2, r0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff f91d 	bl	80005ac <lfs_fromle32>
 8001372:	0002      	movs	r2, r0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff f915 	bl	80005ac <lfs_fromle32>
 8001382:	0002      	movs	r2, r0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff f90d 	bl	80005ac <lfs_fromle32>
 8001392:	0002      	movs	r2, r0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff f905 	bl	80005ac <lfs_fromle32>
 80013a2:	0002      	movs	r2, r0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	615a      	str	r2, [r3, #20]
}
 80013a8:	46c0      	nop			@ (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff f8fe 	bl	80005be <lfs_tole32>
 80013c2:	0002      	movs	r2, r0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff f8f6 	bl	80005be <lfs_tole32>
 80013d2:	0002      	movs	r2, r0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff f8ee 	bl	80005be <lfs_tole32>
 80013e2:	0002      	movs	r2, r0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff f8e6 	bl	80005be <lfs_tole32>
 80013f2:	0002      	movs	r2, r0
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff f8de 	bl	80005be <lfs_tole32>
 8001402:	0002      	movs	r2, r0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff f8d6 	bl	80005be <lfs_tole32>
 8001412:	0002      	movs	r2, r0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	615a      	str	r2, [r3, #20]
}
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}

08001420 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e009      	b.n	8001444 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d101      	bne.n	800143e <lfs_mlist_isopen+0x1e>
            return true;
 800143a:	2301      	movs	r3, #1
 800143c:	e007      	b.n	800144e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f1      	bne.n	8001430 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800144c:	2300      	movs	r3, #0
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}

08001456 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3328      	adds	r3, #40	@ 0x28
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e00d      	b.n	8001484 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d105      	bne.n	800147e <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	601a      	str	r2, [r3, #0]
            break;
 800147c:	e007      	b.n	800148e <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ed      	bne.n	8001468 <lfs_mlist_remove+0x12>
        }
    }
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b004      	add	sp, #16
 8001494:	bd80      	pop	{r7, pc}

08001496 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 80014c0:	4b02      	ldr	r3, [pc, #8]	@ (80014cc <lfs_fs_disk_version+0x14>)
    }
}
 80014c2:	0018      	movs	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	00020001 	.word	0x00020001

080014d0 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff ffec 	bl	80014b8 <lfs_fs_disk_version>
 80014e0:	0003      	movs	r3, r0
 80014e2:	0c1b      	lsrs	r3, r3, #16
 80014e4:	b29b      	uxth	r3, r3

}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7ff ffdd 	bl	80014b8 <lfs_fs_disk_version>
 80014fe:	0003      	movs	r3, r0
 8001500:	b29b      	uxth	r3, r3
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b002      	add	sp, #8
 8001508:	bd80      	pop	{r7, pc}

0800150a <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}

08001522 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff ffe6 	bl	800150a <lfs_alloc_ckpoint>
}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}

08001546 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001560:	18d2      	adds	r2, r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8001566:	0019      	movs	r1, r3
 8001568:	0010      	movs	r0, r2
 800156a:	f7fe fe61 	bl	8000230 <__aeabi_uidivmod>
 800156e:	000b      	movs	r3, r1
 8001570:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	429a      	cmp	r2, r3
 800157a:	d213      	bcs.n	80015a4 <lfs_alloc_lookahead+0x5e>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	18d2      	adds	r2, r2, r3
 8001586:	7810      	ldrb	r0, [r2, #0]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	2107      	movs	r1, #7
 800158c:	400a      	ands	r2, r1
 800158e:	2101      	movs	r1, #1
 8001590:	4091      	lsls	r1, r2
 8001592:	000a      	movs	r2, r1
 8001594:	b2d1      	uxtb	r1, r2
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800159a:	18d3      	adds	r3, r2, r3
 800159c:	0002      	movs	r2, r0
 800159e:	430a      	orrs	r2, r1
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c0:	18d2      	adds	r2, r2, r3
            % lfs->block_count;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015c6:	0019      	movs	r1, r3
 80015c8:	0010      	movs	r0, r2
 80015ca:	f7fe fe31 	bl	8000230 <__aeabi_uidivmod>
 80015ce:	000b      	movs	r3, r1
 80015d0:	001a      	movs	r2, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80015e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 80015e2:	00da      	lsls	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e8:	0019      	movs	r1, r3
 80015ea:	0010      	movs	r0, r2
 80015ec:	f7fe ff76 	bl	80004dc <lfs_min>
 80015f0:	0002      	movs	r2, r0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80015fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001600:	001a      	movs	r2, r3
 8001602:	2100      	movs	r1, #0
 8001604:	f009 f8fe 	bl	800a804 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	490a      	ldr	r1, [pc, #40]	@ (8001634 <lfs_alloc_scan+0x84>)
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	2301      	movs	r3, #1
 8001610:	f005 fb52 	bl	8006cb8 <lfs_fs_traverse_>
 8001614:	0003      	movs	r3, r0
 8001616:	60fb      	str	r3, [r7, #12]
    if (err) {
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <lfs_alloc_scan+0x7a>
        lfs_alloc_drop(lfs);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff ff7e 	bl	8001522 <lfs_alloc_drop>
        return err;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	e000      	b.n	800162c <lfs_alloc_scan+0x7c>
    }

    return 0;
 800162a:	2300      	movs	r3, #0
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}
 8001634:	08001547 	.word	0x08001547

08001638 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b087      	sub	sp, #28
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8001642:	e04c      	b.n	80016de <lfs_alloc+0xa6>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	18d3      	adds	r3, r2, r3
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	0019      	movs	r1, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001658:	2207      	movs	r2, #7
 800165a:	4013      	ands	r3, r2
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800165c:	40d9      	lsrs	r1, r3
 800165e:	000b      	movs	r3, r1
 8001660:	2201      	movs	r2, #1
 8001662:	4013      	ands	r3, r2
 8001664:	d131      	bne.n	80016ca <lfs_alloc+0x92>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166e:	18d2      	adds	r2, r2, r3
                        % lfs->block_count;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001674:	0019      	movs	r1, r3
 8001676:	0010      	movs	r0, r2
 8001678:	f7fe fdda 	bl	8000230 <__aeabi_uidivmod>
 800167c:	000b      	movs	r3, r1
 800167e:	001a      	movs	r2, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001692:	1e5a      	subs	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d210      	bcs.n	80016c6 <lfs_alloc+0x8e>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	0019      	movs	r1, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b8:	2207      	movs	r2, #7
 80016ba:	4013      	ands	r3, r2
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80016bc:	40d9      	lsrs	r1, r3
 80016be:	000b      	movs	r3, r1
 80016c0:	2201      	movs	r2, #1
 80016c2:	4013      	ands	r3, r2
 80016c4:	d1de      	bne.n	8001684 <lfs_alloc+0x4c>
                        return 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e035      	b.n	8001736 <lfs_alloc+0xfe>
                    }
                }
            }

            lfs->lookahead.next += 1;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d8:	1e5a      	subs	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d3ac      	bcc.n	8001644 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d117      	bne.n	8001722 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fa:	18d2      	adds	r2, r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001700:	0019      	movs	r1, r3
 8001702:	0010      	movs	r0, r2
 8001704:	f7fe fd94 	bl	8000230 <__aeabi_uidivmod>
 8001708:	000b      	movs	r3, r1
 800170a:	001c      	movs	r4, r3
 800170c:	4a0c      	ldr	r2, [pc, #48]	@ (8001740 <lfs_alloc+0x108>)
 800170e:	490d      	ldr	r1, [pc, #52]	@ (8001744 <lfs_alloc+0x10c>)
 8001710:	480d      	ldr	r0, [pc, #52]	@ (8001748 <lfs_alloc+0x110>)
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <lfs_alloc+0x114>)
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	0023      	movs	r3, r4
 8001718:	f009 f80a 	bl	800a730 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 800171c:	231c      	movs	r3, #28
 800171e:	425b      	negs	r3, r3
 8001720:	e009      	b.n	8001736 <lfs_alloc+0xfe>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff ff43 	bl	80015b0 <lfs_alloc_scan>
 800172a:	0003      	movs	r3, r0
 800172c:	60fb      	str	r3, [r7, #12]
        if(err) {
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d086      	beq.n	8001642 <lfs_alloc+0xa>
            return err;
 8001734:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001736:	0018      	movs	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	b005      	add	sp, #20
 800173c:	bd90      	pop	{r4, r7, pc}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	000002bd 	.word	0x000002bd
 8001744:	0800b478 	.word	0x0800b478
 8001748:	0800b55c 	.word	0x0800b55c
 800174c:	0800b588 	.word	0x0800b588

08001750 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b08e      	sub	sp, #56	@ 0x38
 8001754:	af04      	add	r7, sp, #16
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	333c      	adds	r3, #60	@ 0x3c
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	0011      	movs	r1, r2
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fd22 	bl	80011c0 <lfs_gstate_hasmovehere>
 800177c:	1e03      	subs	r3, r0, #0
 800177e:	d100      	bne.n	8001782 <lfs_dir_getslice+0x32>
 8001780:	e0d5      	b.n	800192e <lfs_dir_getslice+0x1de>
            lfs_tag_id(gmask) != 0) {
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff fc71 	bl	800106c <lfs_tag_id>
 800178a:	1e03      	subs	r3, r0, #0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800178c:	d100      	bne.n	8001790 <lfs_dir_getslice+0x40>
 800178e:	e0ce      	b.n	800192e <lfs_dir_getslice+0x1de>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff fc69 	bl	800106c <lfs_tag_id>
 800179a:	0003      	movs	r3, r0
 800179c:	001c      	movs	r4, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff fc63 	bl	800106c <lfs_tag_id>
 80017a6:	0003      	movs	r3, r0
 80017a8:	429c      	cmp	r4, r3
 80017aa:	d102      	bne.n	80017b2 <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 80017ac:	2302      	movs	r3, #2
 80017ae:	425b      	negs	r3, r3
 80017b0:	e0c9      	b.n	8001946 <lfs_dir_getslice+0x1f6>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fc58 	bl	800106c <lfs_tag_id>
 80017bc:	0003      	movs	r3, r0
 80017be:	001c      	movs	r4, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	0018      	movs	r0, r3
 80017c4:	f7ff fc52 	bl	800106c <lfs_tag_id>
 80017c8:	0003      	movs	r3, r0
 80017ca:	429c      	cmp	r4, r3
 80017cc:	d300      	bcc.n	80017d0 <lfs_dir_getslice+0x80>
 80017ce:	e0ae      	b.n	800192e <lfs_dir_getslice+0x1de>
            gdiff -= LFS_MKTAG(0, 1, 0);
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001950 <lfs_dir_getslice+0x200>)
 80017d4:	4694      	mov	ip, r2
 80017d6:	4463      	add	r3, ip
 80017d8:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80017da:	e0a8      	b.n	800192e <lfs_dir_getslice+0x1de>
        off -= lfs_tag_dsize(ntag);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	0018      	movs	r0, r3
 80017e0:	f7ff fc5d 	bl	800109e <lfs_tag_dsize>
 80017e4:	0002      	movs	r2, r0
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80017f0:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	2204      	movs	r2, #4
 80017fa:	9203      	str	r2, [sp, #12]
 80017fc:	2210      	movs	r2, #16
 80017fe:	18ba      	adds	r2, r7, r2
 8001800:	9202      	str	r2, [sp, #8]
 8001802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001804:	9201      	str	r2, [sp, #4]
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2304      	movs	r3, #4
 800180a:	000a      	movs	r2, r1
 800180c:	2100      	movs	r1, #0
 800180e:	f7fe ff37 	bl	8000680 <lfs_bd_read>
 8001812:	0003      	movs	r3, r0
 8001814:	61bb      	str	r3, [r7, #24]
        if (err) {
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <lfs_dir_getslice+0xd0>
            return err;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	e092      	b.n	8001946 <lfs_dir_getslice+0x1f6>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	0018      	movs	r0, r3
 8001824:	f7fe fed8 	bl	80005d8 <lfs_frombe32>
 8001828:	0002      	movs	r2, r0
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4053      	eors	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff fc18 	bl	800106c <lfs_tag_id>
 800183c:	1e03      	subs	r3, r0, #0
 800183e:	d02e      	beq.n	800189e <lfs_dir_getslice+0x14e>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	0018      	movs	r0, r3
 8001844:	f7ff fbcd 	bl	8000fe2 <lfs_tag_type1>
 8001848:	0003      	movs	r3, r0
 800184a:	001a      	movs	r2, r3
        if (lfs_tag_id(gmask) != 0 &&
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	429a      	cmp	r2, r3
 8001852:	d124      	bne.n	800189e <lfs_dir_getslice+0x14e>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff fc08 	bl	800106c <lfs_tag_id>
 800185c:	0003      	movs	r3, r0
 800185e:	001c      	movs	r4, r3
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	0018      	movs	r0, r3
 8001868:	f7ff fc00 	bl	800106c <lfs_tag_id>
 800186c:	0003      	movs	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800186e:	429c      	cmp	r4, r3
 8001870:	d815      	bhi.n	800189e <lfs_dir_getslice+0x14e>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	4a36      	ldr	r2, [pc, #216]	@ (8001954 <lfs_dir_getslice+0x204>)
 800187a:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800187c:	4a36      	ldr	r2, [pc, #216]	@ (8001958 <lfs_dir_getslice+0x208>)
 800187e:	4313      	orrs	r3, r2
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	429a      	cmp	r2, r3
 8001884:	d102      	bne.n	800188c <lfs_dir_getslice+0x13c>
                // found where we were created
                return LFS_ERR_NOENT;
 8001886:	2302      	movs	r3, #2
 8001888:	425b      	negs	r3, r3
 800188a:	e05c      	b.n	8001946 <lfs_dir_getslice+0x1f6>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff fbde 	bl	8001050 <lfs_tag_splice>
 8001894:	0003      	movs	r3, r0
 8001896:	029a      	lsls	r2, r3, #10
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	18d3      	adds	r3, r2, r3
 800189c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	401a      	ands	r2, r3
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	1acb      	subs	r3, r1, r3
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	400b      	ands	r3, r1
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d13d      	bne.n	800192e <lfs_dir_getslice+0x1de>
            if (lfs_tag_isdelete(tag)) {
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fb85 	bl	8000fc4 <lfs_tag_isdelete>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d002      	beq.n	80018c4 <lfs_dir_getslice+0x174>
                return LFS_ERR_NOENT;
 80018be:	2302      	movs	r3, #2
 80018c0:	425b      	negs	r3, r3
 80018c2:	e040      	b.n	8001946 <lfs_dir_getslice+0x1f6>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7ff fbde 	bl	8001088 <lfs_tag_size>
 80018cc:	0002      	movs	r2, r0
 80018ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018d0:	0019      	movs	r1, r3
 80018d2:	0010      	movs	r0, r2
 80018d4:	f7fe fe02 	bl	80004dc <lfs_min>
 80018d8:	0003      	movs	r3, r0
 80018da:	617b      	str	r3, [r7, #20]
            err = lfs_bd_read(lfs,
 80018dc:	68fc      	ldr	r4, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018e6:	188a      	adds	r2, r1, r2
            err = lfs_bd_read(lfs,
 80018e8:	3204      	adds	r2, #4
 80018ea:	697d      	ldr	r5, [r7, #20]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	6979      	ldr	r1, [r7, #20]
 80018f0:	9103      	str	r1, [sp, #12]
 80018f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80018f4:	9102      	str	r1, [sp, #8]
 80018f6:	9201      	str	r2, [sp, #4]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	002b      	movs	r3, r5
 80018fc:	0022      	movs	r2, r4
 80018fe:	2100      	movs	r1, #0
 8001900:	f7fe febe 	bl	8000680 <lfs_bd_read>
 8001904:	0003      	movs	r3, r0
 8001906:	61bb      	str	r3, [r7, #24]
            if (err) {
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <lfs_dir_getslice+0x1c2>
                return err;
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	e019      	b.n	8001946 <lfs_dir_getslice+0x1f6>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001912:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	18d0      	adds	r0, r2, r3
 8001918:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	001a      	movs	r2, r3
 8001920:	2100      	movs	r1, #0
 8001922:	f008 ff6f 	bl	800a804 <memset>

            return tag + gdiff;
 8001926:	6a3a      	ldr	r2, [r7, #32]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	18d3      	adds	r3, r2, r3
 800192c:	e00b      	b.n	8001946 <lfs_dir_getslice+0x1f6>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff fbb4 	bl	800109e <lfs_tag_dsize>
 8001936:	0003      	movs	r3, r0
 8001938:	3304      	adds	r3, #4
 800193a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193c:	429a      	cmp	r2, r3
 800193e:	d300      	bcc.n	8001942 <lfs_dir_getslice+0x1f2>
 8001940:	e74c      	b.n	80017dc <lfs_dir_getslice+0x8c>
        }
    }

    return LFS_ERR_NOENT;
 8001942:	2302      	movs	r3, #2
 8001944:	425b      	negs	r3, r3
}
 8001946:	0018      	movs	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	b00a      	add	sp, #40	@ 0x28
 800194c:	bdb0      	pop	{r4, r5, r7, pc}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	fffffc00 	.word	0xfffffc00
 8001954:	000ffc00 	.word	0x000ffc00
 8001958:	40100000 	.word	0x40100000

0800195c <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af04      	add	r7, sp, #16
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff fb8b 	bl	8001088 <lfs_tag_size>
 8001972:	0003      	movs	r3, r0
 8001974:	683c      	ldr	r4, [r7, #0]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	2300      	movs	r3, #0
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	0023      	movs	r3, r4
 8001988:	f7ff fee2 	bl	8001750 <lfs_dir_getslice>
 800198c:	0003      	movs	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b005      	add	sp, #20
 8001994:	bd90      	pop	{r4, r7, pc}

08001996 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001998:	b08d      	sub	sp, #52	@ 0x34
 800199a:	af04      	add	r7, sp, #16
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80019a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019a6:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 80019a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019ac:	18d2      	adds	r2, r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d800      	bhi.n	80019ba <lfs_dir_getread+0x24>
 80019b8:	e0ca      	b.n	8001b50 <lfs_dir_getread+0x1ba>
        return LFS_ERR_CORRUPT;
 80019ba:	2354      	movs	r3, #84	@ 0x54
 80019bc:	425b      	negs	r3, r3
 80019be:	e0cc      	b.n	8001b5a <lfs_dir_getread+0x1c4>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80019c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019c2:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d042      	beq.n	8001a50 <lfs_dir_getread+0xba>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3302      	adds	r3, #2
 80019d0:	d13e      	bne.n	8001a50 <lfs_dir_getread+0xba>
                off < pcache->off + pcache->size) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	18d3      	adds	r3, r2, r3
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80019dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019de:	429a      	cmp	r2, r3
 80019e0:	d236      	bcs.n	8001a50 <lfs_dir_getread+0xba>
            if (off >= pcache->off) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d326      	bcc.n	8001a3a <lfs_dir_getread+0xa4>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6859      	ldr	r1, [r3, #4]
 80019f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f6:	1acb      	subs	r3, r1, r3
 80019f8:	18d2      	adds	r2, r2, r3
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	0011      	movs	r1, r2
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7fe fd6c 	bl	80004dc <lfs_min>
 8001a04:	0003      	movs	r3, r0
 8001a06:	61bb      	str	r3, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001a12:	1acb      	subs	r3, r1, r3
 8001a14:	18d1      	adds	r1, r2, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f008 ffa9 	bl	800a972 <memcpy>

                data += diff;
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	18d3      	adds	r3, r2, r3
 8001a26:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001a28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	18d3      	adds	r3, r2, r3
 8001a2e:	647b      	str	r3, [r7, #68]	@ 0x44
                size -= diff;
 8001a30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
                continue;
 8001a38:	e08a      	b.n	8001b50 <lfs_dir_getread+0x1ba>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a40:	1ad2      	subs	r2, r2, r3
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	0011      	movs	r1, r2
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7fe fd48 	bl	80004dc <lfs_min>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	61bb      	str	r3, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3302      	adds	r3, #2
 8001a56:	d13e      	bne.n	8001ad6 <lfs_dir_getread+0x140>
                off < rcache->off + rcache->size) {
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	18d3      	adds	r3, r2, r3
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d236      	bcs.n	8001ad6 <lfs_dir_getread+0x140>
            if (off >= rcache->off) {
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d326      	bcc.n	8001ac0 <lfs_dir_getread+0x12a>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6859      	ldr	r1, [r3, #4]
 8001a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a7c:	1acb      	subs	r3, r1, r3
 8001a7e:	18d2      	adds	r2, r2, r3
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	0011      	movs	r1, r2
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7fe fd29 	bl	80004dc <lfs_min>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	61bb      	str	r3, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001a98:	1acb      	subs	r3, r1, r3
 8001a9a:	18d1      	adds	r1, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f008 ff66 	bl	800a972 <memcpy>

                data += diff;
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	18d3      	adds	r3, r2, r3
 8001aac:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001aae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	18d3      	adds	r3, r2, r3
 8001ab4:	647b      	str	r3, [r7, #68]	@ 0x44
                size -= diff;
 8001ab6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                continue;
 8001abe:	e047      	b.n	8001b50 <lfs_dir_getread+0x1ba>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ac6:	1ad2      	subs	r2, r2, r3
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	0011      	movs	r1, r2
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7fe fd05 	bl	80004dc <lfs_min>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	61bb      	str	r3, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	4252      	negs	r2, r2
 8001adc:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae6:	0011      	movs	r1, r2
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7fe fd05 	bl	80004f8 <lfs_aligndown>
 8001aee:	0002      	movs	r2, r0
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af8:	18d2      	adds	r2, r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	0019      	movs	r1, r3
 8001b02:	0010      	movs	r0, r2
 8001b04:	f7fe fd0a 	bl	800051c <lfs_alignup>
 8001b08:	0002      	movs	r2, r0
                lfs->cfg->cache_size);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001b10:	0019      	movs	r1, r3
 8001b12:	0010      	movs	r0, r2
 8001b14:	f7fe fce2 	bl	80004dc <lfs_min>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68d9      	ldr	r1, [r3, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
 8001b2c:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8001b2e:	68bc      	ldr	r4, [r7, #8]
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	9101      	str	r1, [sp, #4]
 8001b36:	9200      	str	r2, [sp, #0]
 8001b38:	0033      	movs	r3, r6
 8001b3a:	002a      	movs	r2, r5
 8001b3c:	0021      	movs	r1, r4
 8001b3e:	f7ff fe07 	bl	8001750 <lfs_dir_getslice>
 8001b42:	0003      	movs	r3, r0
 8001b44:	617b      	str	r3, [r7, #20]
        if (err < 0) {
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da01      	bge.n	8001b50 <lfs_dir_getread+0x1ba>
            return err;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	e004      	b.n	8001b5a <lfs_dir_getread+0x1c4>
    while (size > 0) {
 8001b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d000      	beq.n	8001b58 <lfs_dir_getread+0x1c2>
 8001b56:	e733      	b.n	80019c0 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b009      	add	sp, #36	@ 0x24
 8001b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b64 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	2380      	movs	r3, #128	@ 0x80
 8001b78:	055b      	lsls	r3, r3, #21
 8001b7a:	4013      	ands	r3, r2
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001b7c:	d001      	beq.n	8001b82 <lfs_dir_traverse_filter+0x1e>
 8001b7e:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <lfs_dir_traverse_filter+0xb0>)
 8001b80:	e000      	b.n	8001b84 <lfs_dir_traverse_filter+0x20>
 8001b82:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <lfs_dir_traverse_filter+0xb4>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001b84:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	4053      	eors	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	d011      	beq.n	8001bb8 <lfs_dir_traverse_filter+0x54>
            lfs_tag_isdelete(*filtertag) ||
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff fa13 	bl	8000fc4 <lfs_tag_isdelete>
 8001b9e:	1e03      	subs	r3, r0, #0
    if ((mask & tag) == (mask & *filtertag) ||
 8001ba0:	d10a      	bne.n	8001bb8 <lfs_dir_traverse_filter+0x54>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c14 <lfs_dir_traverse_filter+0xb0>)
 8001ba6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	491b      	ldr	r1, [pc, #108]	@ (8001c1c <lfs_dir_traverse_filter+0xb8>)
 8001bae:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001bb0:	491b      	ldr	r1, [pc, #108]	@ (8001c20 <lfs_dir_traverse_filter+0xbc>)
 8001bb2:	430b      	orrs	r3, r1
            lfs_tag_isdelete(*filtertag) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d104      	bne.n	8001bc2 <lfs_dir_traverse_filter+0x5e>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
        return true;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e023      	b.n	8001c0a <lfs_dir_traverse_filter+0xa6>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff fa0c 	bl	8000fe2 <lfs_tag_type1>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	001a      	movs	r2, r3
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d118      	bne.n	8001c08 <lfs_dir_traverse_filter+0xa4>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fa47 	bl	800106c <lfs_tag_id>
 8001bde:	0003      	movs	r3, r0
 8001be0:	001c      	movs	r4, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff fa40 	bl	800106c <lfs_tag_id>
 8001bec:	0003      	movs	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001bee:	429c      	cmp	r4, r3
 8001bf0:	d80a      	bhi.n	8001c08 <lfs_dir_traverse_filter+0xa4>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff fa2b 	bl	8001050 <lfs_tag_splice>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	029a      	lsls	r2, r3, #10
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	18d2      	adds	r2, r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b007      	add	sp, #28
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	7ffffc00 	.word	0x7ffffc00
 8001c18:	700ffc00 	.word	0x700ffc00
 8001c1c:	000ffc00 	.word	0x000ffc00
 8001c20:	4ff00000 	.word	0x4ff00000

08001c24 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	b0c1      	sub	sp, #260	@ 0x104
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	22ec      	movs	r2, #236	@ 0xec
 8001c36:	18ba      	adds	r2, r7, r2
 8001c38:	6013      	str	r3, [r2, #0]
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8001c3a:	234c      	movs	r3, #76	@ 0x4c
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	0018      	movs	r0, r3
 8001c40:	2308      	movs	r3, #8
 8001c42:	001a      	movs	r2, r3
 8001c44:	2100      	movs	r1, #0
 8001c46:	f008 fddd 	bl	800a804 <memset>
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff fa26 	bl	800109e <lfs_tag_dsize>
 8001c52:	0002      	movs	r2, r0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	18d2      	adds	r2, r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d23f      	bcs.n	8001ce0 <lfs_dir_traverse+0xbc>
                off += lfs_tag_dsize(ptag);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7ff fa1b 	bl	800109e <lfs_tag_dsize>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	189b      	adds	r3, r3, r2
 8001c6e:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001c70:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	9203      	str	r2, [sp, #12]
 8001c7c:	2254      	movs	r2, #84	@ 0x54
 8001c7e:	18ba      	adds	r2, r7, r2
 8001c80:	9202      	str	r2, [sp, #8]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	9201      	str	r2, [sp, #4]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2304      	movs	r3, #4
 8001c8a:	000a      	movs	r2, r1
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	f7fe fcf7 	bl	8000680 <lfs_bd_read>
 8001c92:	0003      	movs	r3, r0
 8001c94:	22dc      	movs	r2, #220	@ 0xdc
 8001c96:	18b9      	adds	r1, r7, r2
 8001c98:	600b      	str	r3, [r1, #0]
                if (err) {
 8001c9a:	18bb      	adds	r3, r7, r2
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <lfs_dir_traverse+0x86>
                    return err;
 8001ca2:	18bb      	adds	r3, r7, r2
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f000 fc75 	bl	8002594 <lfs_dir_traverse+0x970>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7fe fc93 	bl	80005d8 <lfs_frombe32>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4053      	eors	r3, r2
 8001cb8:	2280      	movs	r2, #128	@ 0x80
 8001cba:	0612      	lsls	r2, r2, #24
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	214c      	movs	r1, #76	@ 0x4c
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	601a      	str	r2, [r3, #0]
                disk.off = off+sizeof(lfs_tag_t);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	1d1a      	adds	r2, r3, #4
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	605a      	str	r2, [r3, #4]
                buffer = &disk;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	22e4      	movs	r2, #228	@ 0xe4
 8001cd6:	18ba      	adds	r2, r7, r2
 8001cd8:	6013      	str	r3, [r2, #0]
                ptag = tag;
 8001cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	e021      	b.n	8001d24 <lfs_dir_traverse+0x100>
            } else if (attrcount > 0) {
 8001ce0:	2086      	movs	r0, #134	@ 0x86
 8001ce2:	0040      	lsls	r0, r0, #1
 8001ce4:	183b      	adds	r3, r7, r0
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	dd16      	ble.n	8001d1a <lfs_dir_traverse+0xf6>
                tag = attrs[0].tag;
 8001cec:	2184      	movs	r1, #132	@ 0x84
 8001cee:	0049      	lsls	r1, r1, #1
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	22e4      	movs	r2, #228	@ 0xe4
 8001d00:	18ba      	adds	r2, r7, r2
 8001d02:	6013      	str	r3, [r2, #0]
                attrs += 1;
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3308      	adds	r3, #8
 8001d0a:	187a      	adds	r2, r7, r1
 8001d0c:	6013      	str	r3, [r2, #0]
                attrcount -= 1;
 8001d0e:	183b      	adds	r3, r7, r0
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	183a      	adds	r2, r7, r0
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e004      	b.n	8001d24 <lfs_dir_traverse+0x100>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	22e8      	movs	r2, #232	@ 0xe8
 8001d1e:	18ba      	adds	r2, r7, r2
 8001d20:	6013      	str	r3, [r2, #0]
                break;
 8001d22:	e34a      	b.n	80023ba <lfs_dir_traverse+0x796>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8001d24:	4b9e      	ldr	r3, [pc, #632]	@ (8001fa0 <lfs_dir_traverse+0x37c>)
 8001d26:	21d8      	movs	r1, #216	@ 0xd8
 8001d28:	187a      	adds	r2, r7, r1
 8001d2a:	6013      	str	r3, [r2, #0]
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8001d2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d2e:	2386      	movs	r3, #134	@ 0x86
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2408      	movs	r4, #8
 8001d34:	191b      	adds	r3, r3, r4
 8001d36:	19db      	adds	r3, r3, r7
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4053      	eors	r3, r2
 8001d3c:	187a      	adds	r2, r7, r1
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	2084      	movs	r0, #132	@ 0x84
 8001d42:	0040      	lsls	r0, r0, #1
 8001d44:	1901      	adds	r1, r0, r4
 8001d46:	19c9      	adds	r1, r1, r7
 8001d48:	6809      	ldr	r1, [r1, #0]
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d000      	beq.n	8001d52 <lfs_dir_traverse+0x12e>
 8001d50:	e325      	b.n	800239e <lfs_dir_traverse+0x77a>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8001d52:	1903      	adds	r3, r0, r4
 8001d54:	19db      	adds	r3, r3, r7
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff f987 	bl	800106c <lfs_tag_id>
 8001d5e:	1e03      	subs	r3, r0, #0
 8001d60:	d100      	bne.n	8001d64 <lfs_dir_traverse+0x140>
 8001d62:	e129      	b.n	8001fb8 <lfs_dir_traverse+0x394>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8001d64:	23ec      	movs	r3, #236	@ 0xec
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d905      	bls.n	8001d7a <lfs_dir_traverse+0x156>
 8001d6e:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa4 <lfs_dir_traverse+0x380>)
 8001d70:	4a8d      	ldr	r2, [pc, #564]	@ (8001fa8 <lfs_dir_traverse+0x384>)
 8001d72:	498e      	ldr	r1, [pc, #568]	@ (8001fac <lfs_dir_traverse+0x388>)
 8001d74:	488e      	ldr	r0, [pc, #568]	@ (8001fb0 <lfs_dir_traverse+0x38c>)
 8001d76:	f008 fb23 	bl	800a3c0 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8001d7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d7c:	2558      	movs	r5, #88	@ 0x58
 8001d7e:	1978      	adds	r0, r7, r5
 8001d80:	24ec      	movs	r4, #236	@ 0xec
 8001d82:	193b      	adds	r3, r7, r4
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	0013      	movs	r3, r2
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	501a      	str	r2, [r3, r0]
 8001d92:	1978      	adds	r0, r7, r5
 8001d94:	193b      	adds	r3, r7, r4
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	0013      	movs	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	18c3      	adds	r3, r0, r3
 8001da2:	3304      	adds	r3, #4
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	1978      	adds	r0, r7, r5
 8001daa:	193b      	adds	r3, r7, r4
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	0013      	movs	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	18c3      	adds	r3, r0, r3
 8001db8:	3308      	adds	r3, #8
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	1978      	adds	r0, r7, r5
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	18c3      	adds	r3, r0, r3
 8001dce:	330c      	adds	r3, #12
 8001dd0:	2284      	movs	r2, #132	@ 0x84
 8001dd2:	0052      	lsls	r2, r2, #1
 8001dd4:	18ba      	adds	r2, r7, r2
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	1978      	adds	r0, r7, r5
 8001ddc:	193b      	adds	r3, r7, r4
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	0013      	movs	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	18c3      	adds	r3, r0, r3
 8001dea:	3310      	adds	r3, #16
 8001dec:	2286      	movs	r2, #134	@ 0x86
 8001dee:	0052      	lsls	r2, r2, #1
 8001df0:	18ba      	adds	r2, r7, r2
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	1978      	adds	r0, r7, r5
 8001df8:	193b      	adds	r3, r7, r4
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	18c3      	adds	r3, r0, r3
 8001e06:	3314      	adds	r3, #20
 8001e08:	2684      	movs	r6, #132	@ 0x84
 8001e0a:	0076      	lsls	r6, r6, #1
 8001e0c:	2008      	movs	r0, #8
 8001e0e:	1832      	adds	r2, r6, r0
 8001e10:	19d2      	adds	r2, r2, r7
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	1978      	adds	r0, r7, r5
 8001e18:	193b      	adds	r3, r7, r4
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	18c3      	adds	r3, r0, r3
 8001e26:	3318      	adds	r3, #24
 8001e28:	2286      	movs	r2, #134	@ 0x86
 8001e2a:	0052      	lsls	r2, r2, #1
 8001e2c:	2008      	movs	r0, #8
 8001e2e:	1812      	adds	r2, r2, r0
 8001e30:	19d0      	adds	r0, r2, r7
 8001e32:	6802      	ldr	r2, [r0, #0]
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	1978      	adds	r0, r7, r5
 8001e38:	193b      	adds	r3, r7, r4
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	18c3      	adds	r3, r0, r3
 8001e46:	331c      	adds	r3, #28
 8001e48:	2088      	movs	r0, #136	@ 0x88
 8001e4a:	0040      	lsls	r0, r0, #1
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	1882      	adds	r2, r0, r2
 8001e50:	19d2      	adds	r2, r2, r7
 8001e52:	8812      	ldrh	r2, [r2, #0]
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	1978      	adds	r0, r7, r5
 8001e58:	193b      	adds	r3, r7, r4
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	18c3      	adds	r3, r0, r3
 8001e66:	331e      	adds	r3, #30
 8001e68:	228a      	movs	r2, #138	@ 0x8a
 8001e6a:	0052      	lsls	r2, r2, #1
 8001e6c:	2008      	movs	r0, #8
 8001e6e:	1812      	adds	r2, r2, r0
 8001e70:	19d2      	adds	r2, r2, r7
 8001e72:	8812      	ldrh	r2, [r2, #0]
 8001e74:	801a      	strh	r2, [r3, #0]
 8001e76:	1978      	adds	r0, r7, r5
 8001e78:	193b      	adds	r3, r7, r4
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	18c3      	adds	r3, r0, r3
 8001e86:	3320      	adds	r3, #32
 8001e88:	208c      	movs	r0, #140	@ 0x8c
 8001e8a:	0040      	lsls	r0, r0, #1
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	1880      	adds	r0, r0, r2
 8001e90:	19c2      	adds	r2, r0, r7
 8001e92:	8812      	ldrh	r2, [r2, #0]
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	1978      	adds	r0, r7, r5
 8001e98:	193b      	adds	r3, r7, r4
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	18c3      	adds	r3, r0, r3
 8001ea6:	3324      	adds	r3, #36	@ 0x24
 8001ea8:	228e      	movs	r2, #142	@ 0x8e
 8001eaa:	0052      	lsls	r2, r2, #1
 8001eac:	2008      	movs	r0, #8
 8001eae:	1812      	adds	r2, r2, r0
 8001eb0:	19d0      	adds	r0, r2, r7
 8001eb2:	6802      	ldr	r2, [r0, #0]
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	1978      	adds	r0, r7, r5
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	18c3      	adds	r3, r0, r3
 8001ec6:	3328      	adds	r3, #40	@ 0x28
 8001ec8:	2090      	movs	r0, #144	@ 0x90
 8001eca:	0040      	lsls	r0, r0, #1
 8001ecc:	2208      	movs	r2, #8
 8001ece:	1882      	adds	r2, r0, r2
 8001ed0:	19d2      	adds	r2, r2, r7
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	1978      	adds	r0, r7, r5
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	0013      	movs	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	18c3      	adds	r3, r0, r3
 8001ee6:	332c      	adds	r3, #44	@ 0x2c
 8001ee8:	6019      	str	r1, [r3, #0]
 8001eea:	1979      	adds	r1, r7, r5
 8001eec:	0020      	movs	r0, r4
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	18cb      	adds	r3, r1, r3
 8001efc:	3330      	adds	r3, #48	@ 0x30
 8001efe:	21e4      	movs	r1, #228	@ 0xe4
 8001f00:	1879      	adds	r1, r7, r1
 8001f02:	680a      	ldr	r2, [r1, #0]
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	1979      	adds	r1, r7, r5
 8001f08:	0004      	movs	r4, r0
 8001f0a:	183b      	adds	r3, r7, r0
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2030      	movs	r0, #48	@ 0x30
 8001f10:	0013      	movs	r3, r2
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	18cb      	adds	r3, r1, r3
 8001f1a:	181b      	adds	r3, r3, r0
 8001f1c:	214c      	movs	r1, #76	@ 0x4c
 8001f1e:	187a      	adds	r2, r7, r1
 8001f20:	3304      	adds	r3, #4
 8001f22:	ca03      	ldmia	r2!, {r0, r1}
 8001f24:	c303      	stmia	r3!, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8001f26:	0021      	movs	r1, r4
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	187c      	adds	r4, r7, r1
 8001f30:	6023      	str	r3, [r4, #0]

                tmask = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	2008      	movs	r0, #8
 8001f36:	1832      	adds	r2, r6, r0
 8001f38:	19d4      	adds	r4, r2, r7
 8001f3a:	6023      	str	r3, [r4, #0]
                ttag = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2286      	movs	r2, #134	@ 0x86
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	0006      	movs	r6, r0
 8001f44:	1812      	adds	r2, r2, r0
 8001f46:	19d4      	adds	r4, r2, r7
 8001f48:	6023      	str	r3, [r4, #0]
                begin = 0;
 8001f4a:	2088      	movs	r0, #136	@ 0x88
 8001f4c:	0040      	lsls	r0, r0, #1
 8001f4e:	0034      	movs	r4, r6
 8001f50:	1903      	adds	r3, r0, r4
 8001f52:	19db      	adds	r3, r3, r7
 8001f54:	2200      	movs	r2, #0
 8001f56:	801a      	strh	r2, [r3, #0]
                end = 0;
 8001f58:	228a      	movs	r2, #138	@ 0x8a
 8001f5a:	0052      	lsls	r2, r2, #1
 8001f5c:	1913      	adds	r3, r2, r4
 8001f5e:	19db      	adds	r3, r3, r7
 8001f60:	2200      	movs	r2, #0
 8001f62:	801a      	strh	r2, [r3, #0]
                diff = 0;
 8001f64:	208c      	movs	r0, #140	@ 0x8c
 8001f66:	0040      	lsls	r0, r0, #1
 8001f68:	1903      	adds	r3, r0, r4
 8001f6a:	19db      	adds	r3, r3, r7
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	801a      	strh	r2, [r3, #0]
                cb = lfs_dir_traverse_filter;
 8001f70:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <lfs_dir_traverse+0x390>)
 8001f72:	228e      	movs	r2, #142	@ 0x8e
 8001f74:	0052      	lsls	r2, r2, #1
 8001f76:	1912      	adds	r2, r2, r4
 8001f78:	19d2      	adds	r2, r2, r7
 8001f7a:	6013      	str	r3, [r2, #0]
                data = &stack[sp-1].tag;
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	1e5a      	subs	r2, r3, #1
 8001f82:	1979      	adds	r1, r7, r5
 8001f84:	0013      	movs	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	3328      	adds	r3, #40	@ 0x28
 8001f8e:	18cb      	adds	r3, r1, r3
 8001f90:	3304      	adds	r3, #4
 8001f92:	2090      	movs	r0, #144	@ 0x90
 8001f94:	0040      	lsls	r0, r0, #1
 8001f96:	1902      	adds	r2, r0, r4
 8001f98:	19d2      	adds	r2, r2, r7
 8001f9a:	6013      	str	r3, [r2, #0]
                continue;
 8001f9c:	e206      	b.n	80023ac <lfs_dir_traverse+0x788>
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	7ff00000 	.word	0x7ff00000
 8001fa4:	0800b58c 	.word	0x0800b58c
 8001fa8:	0800c2fc 	.word	0x0800c2fc
 8001fac:	000003c2 	.word	0x000003c2
 8001fb0:	0800b478 	.word	0x0800b478
 8001fb4:	08001b65 	.word	0x08001b65
            }
        }

popped:
 8001fb8:	46c0      	nop			@ (mov r8, r8)
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8001fba:	2384      	movs	r3, #132	@ 0x84
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2408      	movs	r4, #8
 8001fc0:	191b      	adds	r3, r3, r4
 8001fc2:	19db      	adds	r3, r3, r7
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7ff f850 	bl	800106c <lfs_tag_id>
 8001fcc:	1e03      	subs	r3, r0, #0
 8001fce:	d01b      	beq.n	8002008 <lfs_dir_traverse+0x3e4>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f7ff f84a 	bl	800106c <lfs_tag_id>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	001a      	movs	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8001fdc:	2388      	movs	r3, #136	@ 0x88
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	191b      	adds	r3, r3, r4
 8001fe2:	19db      	adds	r3, r3, r7
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d900      	bls.n	8001fec <lfs_dir_traverse+0x3c8>
 8001fea:	e1da      	b.n	80023a2 <lfs_dir_traverse+0x77e>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7ff f83c 	bl	800106c <lfs_tag_id>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	001a      	movs	r2, r3
 8001ff8:	238a      	movs	r3, #138	@ 0x8a
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	191b      	adds	r3, r3, r4
 8001ffe:	19db      	adds	r3, r3, r7
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	4293      	cmp	r3, r2
 8002004:	d800      	bhi.n	8002008 <lfs_dir_traverse+0x3e4>
 8002006:	e1cc      	b.n	80023a2 <lfs_dir_traverse+0x77e>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200a:	0018      	movs	r0, r3
 800200c:	f7ff f807 	bl	800101e <lfs_tag_type3>
 8002010:	1e03      	subs	r3, r0, #0
 8002012:	d100      	bne.n	8002016 <lfs_dir_traverse+0x3f2>
 8002014:	e619      	b.n	8001c4a <lfs_dir_traverse+0x26>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff f800 	bl	800101e <lfs_tag_type3>
 800201e:	0003      	movs	r3, r0
 8002020:	001a      	movs	r2, r3
 8002022:	2302      	movs	r3, #2
 8002024:	33ff      	adds	r3, #255	@ 0xff
 8002026:	429a      	cmp	r2, r3
 8002028:	d000      	beq.n	800202c <lfs_dir_traverse+0x408>
 800202a:	e113      	b.n	8002254 <lfs_dir_traverse+0x630>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800202c:	238e      	movs	r3, #142	@ 0x8e
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2608      	movs	r6, #8
 8002032:	199b      	adds	r3, r3, r6
 8002034:	19d9      	adds	r1, r3, r7
 8002036:	680a      	ldr	r2, [r1, #0]
 8002038:	4bdd      	ldr	r3, [pc, #884]	@ (80023b0 <lfs_dir_traverse+0x78c>)
 800203a:	429a      	cmp	r2, r3
 800203c:	d100      	bne.n	8002040 <lfs_dir_traverse+0x41c>
 800203e:	e1b2      	b.n	80023a6 <lfs_dir_traverse+0x782>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8002040:	2558      	movs	r5, #88	@ 0x58
 8002042:	1979      	adds	r1, r7, r5
 8002044:	24ec      	movs	r4, #236	@ 0xec
 8002046:	1938      	adds	r0, r7, r4
 8002048:	6802      	ldr	r2, [r0, #0]
 800204a:	0013      	movs	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	18cb      	adds	r3, r1, r3
 8002054:	223c      	movs	r2, #60	@ 0x3c
 8002056:	2100      	movs	r1, #0
 8002058:	0018      	movs	r0, r3
 800205a:	f008 fbd3 	bl	800a804 <memset>
 800205e:	1979      	adds	r1, r7, r5
 8002060:	0020      	movs	r0, r4
 8002062:	183c      	adds	r4, r7, r0
 8002064:	6822      	ldr	r2, [r4, #0]
 8002066:	0013      	movs	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	505a      	str	r2, [r3, r1]
 8002072:	002c      	movs	r4, r5
 8002074:	1939      	adds	r1, r7, r4
 8002076:	183d      	adds	r5, r7, r0
 8002078:	682a      	ldr	r2, [r5, #0]
 800207a:	0013      	movs	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	18cb      	adds	r3, r1, r3
 8002084:	3304      	adds	r3, #4
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	1939      	adds	r1, r7, r4
 800208c:	183d      	adds	r5, r7, r0
 800208e:	682a      	ldr	r2, [r5, #0]
 8002090:	0013      	movs	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	18cb      	adds	r3, r1, r3
 800209a:	3308      	adds	r3, #8
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	1939      	adds	r1, r7, r4
 80020a2:	183d      	adds	r5, r7, r0
 80020a4:	682a      	ldr	r2, [r5, #0]
 80020a6:	0013      	movs	r3, r2
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	18cb      	adds	r3, r1, r3
 80020b0:	330c      	adds	r3, #12
 80020b2:	2284      	movs	r2, #132	@ 0x84
 80020b4:	0052      	lsls	r2, r2, #1
 80020b6:	18b9      	adds	r1, r7, r2
 80020b8:	680a      	ldr	r2, [r1, #0]
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	1939      	adds	r1, r7, r4
 80020be:	183d      	adds	r5, r7, r0
 80020c0:	682a      	ldr	r2, [r5, #0]
 80020c2:	0013      	movs	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	18cb      	adds	r3, r1, r3
 80020cc:	3310      	adds	r3, #16
 80020ce:	2286      	movs	r2, #134	@ 0x86
 80020d0:	0052      	lsls	r2, r2, #1
 80020d2:	18b9      	adds	r1, r7, r2
 80020d4:	680a      	ldr	r2, [r1, #0]
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	1939      	adds	r1, r7, r4
 80020da:	183d      	adds	r5, r7, r0
 80020dc:	682a      	ldr	r2, [r5, #0]
 80020de:	0013      	movs	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	18cb      	adds	r3, r1, r3
 80020e8:	3314      	adds	r3, #20
 80020ea:	2184      	movs	r1, #132	@ 0x84
 80020ec:	0049      	lsls	r1, r1, #1
 80020ee:	198d      	adds	r5, r1, r6
 80020f0:	19ed      	adds	r5, r5, r7
 80020f2:	682a      	ldr	r2, [r5, #0]
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	1939      	adds	r1, r7, r4
 80020f8:	183d      	adds	r5, r7, r0
 80020fa:	682a      	ldr	r2, [r5, #0]
 80020fc:	0013      	movs	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	18cb      	adds	r3, r1, r3
 8002106:	3318      	adds	r3, #24
 8002108:	2586      	movs	r5, #134	@ 0x86
 800210a:	006d      	lsls	r5, r5, #1
 800210c:	19ad      	adds	r5, r5, r6
 800210e:	19ee      	adds	r6, r5, r7
 8002110:	6832      	ldr	r2, [r6, #0]
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	1939      	adds	r1, r7, r4
 8002116:	183e      	adds	r6, r7, r0
 8002118:	6832      	ldr	r2, [r6, #0]
 800211a:	0013      	movs	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	18cb      	adds	r3, r1, r3
 8002124:	331c      	adds	r3, #28
 8002126:	2688      	movs	r6, #136	@ 0x88
 8002128:	0076      	lsls	r6, r6, #1
 800212a:	2508      	movs	r5, #8
 800212c:	1975      	adds	r5, r6, r5
 800212e:	19ea      	adds	r2, r5, r7
 8002130:	8812      	ldrh	r2, [r2, #0]
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	1939      	adds	r1, r7, r4
 8002136:	183d      	adds	r5, r7, r0
 8002138:	682a      	ldr	r2, [r5, #0]
 800213a:	0013      	movs	r3, r2
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	18cb      	adds	r3, r1, r3
 8002144:	331e      	adds	r3, #30
 8002146:	258a      	movs	r5, #138	@ 0x8a
 8002148:	006d      	lsls	r5, r5, #1
 800214a:	2608      	movs	r6, #8
 800214c:	19ae      	adds	r6, r5, r6
 800214e:	19f2      	adds	r2, r6, r7
 8002150:	8812      	ldrh	r2, [r2, #0]
 8002152:	801a      	strh	r2, [r3, #0]
 8002154:	1939      	adds	r1, r7, r4
 8002156:	183e      	adds	r6, r7, r0
 8002158:	6832      	ldr	r2, [r6, #0]
 800215a:	0013      	movs	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	18cb      	adds	r3, r1, r3
 8002164:	3320      	adds	r3, #32
 8002166:	268c      	movs	r6, #140	@ 0x8c
 8002168:	0076      	lsls	r6, r6, #1
 800216a:	2508      	movs	r5, #8
 800216c:	1972      	adds	r2, r6, r5
 800216e:	19d2      	adds	r2, r2, r7
 8002170:	8812      	ldrh	r2, [r2, #0]
 8002172:	801a      	strh	r2, [r3, #0]
 8002174:	1939      	adds	r1, r7, r4
 8002176:	183a      	adds	r2, r7, r0
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	0013      	movs	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	18cb      	adds	r3, r1, r3
 8002184:	3324      	adds	r3, #36	@ 0x24
 8002186:	228e      	movs	r2, #142	@ 0x8e
 8002188:	0052      	lsls	r2, r2, #1
 800218a:	1952      	adds	r2, r2, r5
 800218c:	19d2      	adds	r2, r2, r7
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	1939      	adds	r1, r7, r4
 8002194:	183c      	adds	r4, r7, r0
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	0013      	movs	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	18cb      	adds	r3, r1, r3
 80021a2:	3328      	adds	r3, #40	@ 0x28
 80021a4:	2490      	movs	r4, #144	@ 0x90
 80021a6:	0064      	lsls	r4, r4, #1
 80021a8:	1964      	adds	r4, r4, r5
 80021aa:	19e4      	adds	r4, r4, r7
 80021ac:	6822      	ldr	r2, [r4, #0]
 80021ae:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80021b0:	183c      	adds	r4, r7, r0
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	1838      	adds	r0, r7, r0
 80021b8:	6003      	str	r3, [r0, #0]

            uint16_t fromid = lfs_tag_size(tag);
 80021ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021bc:	0018      	movs	r0, r3
 80021be:	f7fe ff63 	bl	8001088 <lfs_tag_size>
 80021c2:	0002      	movs	r2, r0
 80021c4:	25d2      	movs	r5, #210	@ 0xd2
 80021c6:	197b      	adds	r3, r7, r5
 80021c8:	801a      	strh	r2, [r3, #0]
            uint16_t toid = lfs_tag_id(tag);
 80021ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021cc:	20d0      	movs	r0, #208	@ 0xd0
 80021ce:	183c      	adds	r4, r7, r0
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fe ff4b 	bl	800106c <lfs_tag_id>
 80021d6:	0003      	movs	r3, r0
 80021d8:	8023      	strh	r3, [r4, #0]
            dir = buffer;
 80021da:	24e4      	movs	r4, #228	@ 0xe4
 80021dc:	193c      	adds	r4, r7, r4
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	60bb      	str	r3, [r7, #8]
            off = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80021e6:	2301      	movs	r3, #1
 80021e8:	425b      	negs	r3, r3
 80021ea:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	2184      	movs	r1, #132	@ 0x84
 80021f0:	0049      	lsls	r1, r1, #1
 80021f2:	187c      	adds	r4, r7, r1
 80021f4:	6023      	str	r3, [r4, #0]
            attrcount = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	2286      	movs	r2, #134	@ 0x86
 80021fa:	0052      	lsls	r2, r2, #1
 80021fc:	18bc      	adds	r4, r7, r2
 80021fe:	6023      	str	r3, [r4, #0]
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8002200:	4b6c      	ldr	r3, [pc, #432]	@ (80023b4 <lfs_dir_traverse+0x790>)
 8002202:	2008      	movs	r0, #8
 8002204:	1809      	adds	r1, r1, r0
 8002206:	19c9      	adds	r1, r1, r7
 8002208:	600b      	str	r3, [r1, #0]
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	059b      	lsls	r3, r3, #22
 800220e:	0001      	movs	r1, r0
 8002210:	1852      	adds	r2, r2, r1
 8002212:	19d2      	adds	r2, r2, r7
 8002214:	6013      	str	r3, [r2, #0]
            begin = fromid;
 8002216:	2388      	movs	r3, #136	@ 0x88
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	185b      	adds	r3, r3, r1
 800221c:	19db      	adds	r3, r3, r7
 800221e:	197a      	adds	r2, r7, r5
 8002220:	8812      	ldrh	r2, [r2, #0]
 8002222:	801a      	strh	r2, [r3, #0]
            end = fromid+1;
 8002224:	238a      	movs	r3, #138	@ 0x8a
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	185b      	adds	r3, r3, r1
 800222a:	19db      	adds	r3, r3, r7
 800222c:	197a      	adds	r2, r7, r5
 800222e:	8812      	ldrh	r2, [r2, #0]
 8002230:	3201      	adds	r2, #1
 8002232:	801a      	strh	r2, [r3, #0]
            diff = toid-fromid+diff;
 8002234:	20d0      	movs	r0, #208	@ 0xd0
 8002236:	183a      	adds	r2, r7, r0
 8002238:	197b      	adds	r3, r7, r5
 800223a:	8812      	ldrh	r2, [r2, #0]
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	b29a      	uxth	r2, r3
 8002242:	1873      	adds	r3, r6, r1
 8002244:	19db      	adds	r3, r3, r7
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	18d3      	adds	r3, r2, r3
 800224a:	b29a      	uxth	r2, r3
 800224c:	1873      	adds	r3, r6, r1
 800224e:	19db      	adds	r3, r3, r7
 8002250:	801a      	strh	r2, [r3, #0]
 8002252:	e4fa      	b.n	8001c4a <lfs_dir_traverse+0x26>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002256:	0018      	movs	r0, r3
 8002258:	f7fe fee1 	bl	800101e <lfs_tag_type3>
 800225c:	0003      	movs	r3, r0
 800225e:	001a      	movs	r2, r3
 8002260:	2381      	movs	r3, #129	@ 0x81
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	429a      	cmp	r2, r3
 8002266:	d170      	bne.n	800234a <lfs_dir_traverse+0x726>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002268:	2300      	movs	r3, #0
 800226a:	22e0      	movs	r2, #224	@ 0xe0
 800226c:	18ba      	adds	r2, r7, r2
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e060      	b.n	8002334 <lfs_dir_traverse+0x710>
                const struct lfs_attr *a = buffer;
 8002272:	23e4      	movs	r3, #228	@ 0xe4
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	25d4      	movs	r5, #212	@ 0xd4
 800227a:	197a      	adds	r2, r7, r5
 800227c:	6013      	str	r3, [r2, #0]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800227e:	26e0      	movs	r6, #224	@ 0xe0
 8002280:	19bb      	adds	r3, r7, r6
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	0013      	movs	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	189b      	adds	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	001a      	movs	r2, r3
 800228e:	197b      	adds	r3, r7, r5
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	189b      	adds	r3, r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	22c0      	movs	r2, #192	@ 0xc0
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	4694      	mov	ip, r2
 800229c:	4463      	add	r3, ip
 800229e:	051c      	lsls	r4, r3, #20
 80022a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7fe fee2 	bl	800106c <lfs_tag_id>
 80022a8:	0003      	movs	r3, r0
 80022aa:	001a      	movs	r2, r3
 80022ac:	238c      	movs	r3, #140	@ 0x8c
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2008      	movs	r0, #8
 80022b2:	181b      	adds	r3, r3, r0
 80022b4:	19db      	adds	r3, r3, r7
 80022b6:	2100      	movs	r1, #0
 80022b8:	5e5b      	ldrsh	r3, [r3, r1]
 80022ba:	18d3      	adds	r3, r2, r3
 80022bc:	029b      	lsls	r3, r3, #10
 80022be:	0021      	movs	r1, r4
 80022c0:	4319      	orrs	r1, r3
 80022c2:	19bb      	adds	r3, r7, r6
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	0013      	movs	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	001a      	movs	r2, r3
 80022d0:	197b      	adds	r3, r7, r5
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	189b      	adds	r3, r3, r2
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80022da:	19bb      	adds	r3, r7, r6
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	0013      	movs	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	189b      	adds	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	001a      	movs	r2, r3
 80022e8:	197b      	adds	r3, r7, r5
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80022f0:	2390      	movs	r3, #144	@ 0x90
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	0004      	movs	r4, r0
 80022f6:	181b      	adds	r3, r3, r0
 80022f8:	19db      	adds	r3, r3, r7
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	238e      	movs	r3, #142	@ 0x8e
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	191b      	adds	r3, r3, r4
 8002302:	19db      	adds	r3, r3, r7
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4798      	blx	r3
 8002308:	0003      	movs	r3, r0
 800230a:	22e8      	movs	r2, #232	@ 0xe8
 800230c:	18b9      	adds	r1, r7, r2
 800230e:	600b      	str	r3, [r1, #0]
                if (res < 0) {
 8002310:	18bb      	adds	r3, r7, r2
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	da02      	bge.n	800231e <lfs_dir_traverse+0x6fa>
                    return res;
 8002318:	18bb      	adds	r3, r7, r2
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e13a      	b.n	8002594 <lfs_dir_traverse+0x970>
                }

                if (res) {
 800231e:	23e8      	movs	r3, #232	@ 0xe8
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d140      	bne.n	80023aa <lfs_dir_traverse+0x786>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002328:	22e0      	movs	r2, #224	@ 0xe0
 800232a:	18bb      	adds	r3, r7, r2
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	18ba      	adds	r2, r7, r2
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002336:	0018      	movs	r0, r3
 8002338:	f7fe fea6 	bl	8001088 <lfs_tag_size>
 800233c:	0002      	movs	r2, r0
 800233e:	23e0      	movs	r3, #224	@ 0xe0
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4293      	cmp	r3, r2
 8002346:	d394      	bcc.n	8002272 <lfs_dir_traverse+0x64e>
 8002348:	e47f      	b.n	8001c4a <lfs_dir_traverse+0x26>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800234a:	238c      	movs	r3, #140	@ 0x8c
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2008      	movs	r0, #8
 8002350:	181b      	adds	r3, r3, r0
 8002352:	19db      	adds	r3, r3, r7
 8002354:	2200      	movs	r2, #0
 8002356:	5e9b      	ldrsh	r3, [r3, r2]
 8002358:	029a      	lsls	r2, r3, #10
 800235a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235c:	18d1      	adds	r1, r2, r3
 800235e:	23e4      	movs	r3, #228	@ 0xe4
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2390      	movs	r3, #144	@ 0x90
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	0004      	movs	r4, r0
 800236a:	181b      	adds	r3, r3, r0
 800236c:	19db      	adds	r3, r3, r7
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	238e      	movs	r3, #142	@ 0x8e
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	191b      	adds	r3, r3, r4
 8002376:	19db      	adds	r3, r3, r7
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4798      	blx	r3
 800237c:	0003      	movs	r3, r0
 800237e:	22e8      	movs	r2, #232	@ 0xe8
 8002380:	18b9      	adds	r1, r7, r2
 8002382:	600b      	str	r3, [r1, #0]
            if (res < 0) {
 8002384:	18bb      	adds	r3, r7, r2
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da02      	bge.n	8002392 <lfs_dir_traverse+0x76e>
                return res;
 800238c:	18bb      	adds	r3, r7, r2
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	e100      	b.n	8002594 <lfs_dir_traverse+0x970>
            }

            if (res) {
 8002392:	23e8      	movs	r3, #232	@ 0xe8
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10d      	bne.n	80023b8 <lfs_dir_traverse+0x794>
 800239c:	e455      	b.n	8001c4a <lfs_dir_traverse+0x26>
                continue;
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	e453      	b.n	8001c4a <lfs_dir_traverse+0x26>
            continue;
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	e451      	b.n	8001c4a <lfs_dir_traverse+0x26>
                continue;
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	e44f      	b.n	8001c4a <lfs_dir_traverse+0x26>
                    break;
 80023aa:	46c0      	nop			@ (mov r8, r8)
        {
 80023ac:	e44d      	b.n	8001c4a <lfs_dir_traverse+0x26>
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	08001b65 	.word	0x08001b65
 80023b4:	600ffc00 	.word	0x600ffc00
                break;
 80023b8:	46c0      	nop			@ (mov r8, r8)
            }
        }
    }

    if (sp > 0) {
 80023ba:	25ec      	movs	r5, #236	@ 0xec
 80023bc:	197b      	adds	r3, r7, r5
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d100      	bne.n	80023c6 <lfs_dir_traverse+0x7a2>
 80023c4:	e0e3      	b.n	800258e <lfs_dir_traverse+0x96a>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80023c6:	197b      	adds	r3, r7, r5
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	1e5a      	subs	r2, r3, #1
 80023cc:	2058      	movs	r0, #88	@ 0x58
 80023ce:	1839      	adds	r1, r7, r0
 80023d0:	0013      	movs	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	585b      	ldr	r3, [r3, r1]
 80023da:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80023dc:	197b      	adds	r3, r7, r5
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	1e5a      	subs	r2, r3, #1
 80023e2:	1839      	adds	r1, r7, r0
 80023e4:	0013      	movs	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	18cb      	adds	r3, r1, r3
 80023ee:	3304      	adds	r3, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80023f4:	197b      	adds	r3, r7, r5
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	1839      	adds	r1, r7, r0
 80023fc:	0013      	movs	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	18cb      	adds	r3, r1, r3
 8002406:	3308      	adds	r3, #8
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800240c:	197b      	adds	r3, r7, r5
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	1839      	adds	r1, r7, r0
 8002414:	0013      	movs	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	18cb      	adds	r3, r1, r3
 800241e:	330c      	adds	r3, #12
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2484      	movs	r4, #132	@ 0x84
 8002424:	0064      	lsls	r4, r4, #1
 8002426:	193a      	adds	r2, r7, r4
 8002428:	6013      	str	r3, [r2, #0]
        attrcount   = stack[sp-1].attrcount;
 800242a:	197b      	adds	r3, r7, r5
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	1e5a      	subs	r2, r3, #1
 8002430:	1839      	adds	r1, r7, r0
 8002432:	0013      	movs	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	18cb      	adds	r3, r1, r3
 800243c:	3310      	adds	r3, #16
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2686      	movs	r6, #134	@ 0x86
 8002442:	0076      	lsls	r6, r6, #1
 8002444:	19ba      	adds	r2, r7, r6
 8002446:	6013      	str	r3, [r2, #0]
        tmask       = stack[sp-1].tmask;
 8002448:	197b      	adds	r3, r7, r5
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	1839      	adds	r1, r7, r0
 8002450:	0013      	movs	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	18cb      	adds	r3, r1, r3
 800245a:	3314      	adds	r3, #20
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0022      	movs	r2, r4
 8002460:	2408      	movs	r4, #8
 8002462:	1912      	adds	r2, r2, r4
 8002464:	19d2      	adds	r2, r2, r7
 8002466:	6013      	str	r3, [r2, #0]
        ttag        = stack[sp-1].ttag;
 8002468:	197b      	adds	r3, r7, r5
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	1839      	adds	r1, r7, r0
 8002470:	0013      	movs	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	18cb      	adds	r3, r1, r3
 800247a:	3318      	adds	r3, #24
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0032      	movs	r2, r6
 8002480:	0026      	movs	r6, r4
 8002482:	1992      	adds	r2, r2, r6
 8002484:	19d2      	adds	r2, r2, r7
 8002486:	6013      	str	r3, [r2, #0]
        begin       = stack[sp-1].begin;
 8002488:	197b      	adds	r3, r7, r5
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	1e5a      	subs	r2, r3, #1
 800248e:	2388      	movs	r3, #136	@ 0x88
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	199b      	adds	r3, r3, r6
 8002494:	19d9      	adds	r1, r3, r7
 8002496:	0004      	movs	r4, r0
 8002498:	1938      	adds	r0, r7, r4
 800249a:	0013      	movs	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	18c3      	adds	r3, r0, r3
 80024a4:	331c      	adds	r3, #28
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	800b      	strh	r3, [r1, #0]
        end         = stack[sp-1].end;
 80024aa:	197b      	adds	r3, r7, r5
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	1e5a      	subs	r2, r3, #1
 80024b0:	238a      	movs	r3, #138	@ 0x8a
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	199b      	adds	r3, r3, r6
 80024b6:	19d9      	adds	r1, r3, r7
 80024b8:	1938      	adds	r0, r7, r4
 80024ba:	0013      	movs	r3, r2
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	18c3      	adds	r3, r0, r3
 80024c4:	331e      	adds	r3, #30
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	800b      	strh	r3, [r1, #0]
        diff        = stack[sp-1].diff;
 80024ca:	197b      	adds	r3, r7, r5
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	1e5a      	subs	r2, r3, #1
 80024d0:	238c      	movs	r3, #140	@ 0x8c
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	199b      	adds	r3, r3, r6
 80024d6:	19d9      	adds	r1, r3, r7
 80024d8:	1938      	adds	r0, r7, r4
 80024da:	0013      	movs	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	18c3      	adds	r3, r0, r3
 80024e4:	3320      	adds	r3, #32
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	800b      	strh	r3, [r1, #0]
        cb          = stack[sp-1].cb;
 80024ea:	197b      	adds	r3, r7, r5
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	0020      	movs	r0, r4
 80024f2:	1839      	adds	r1, r7, r0
 80024f4:	0013      	movs	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	18cb      	adds	r3, r1, r3
 80024fe:	3324      	adds	r3, #36	@ 0x24
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	228e      	movs	r2, #142	@ 0x8e
 8002504:	0052      	lsls	r2, r2, #1
 8002506:	1992      	adds	r2, r2, r6
 8002508:	19d2      	adds	r2, r2, r7
 800250a:	6013      	str	r3, [r2, #0]
        data        = stack[sp-1].data;
 800250c:	197b      	adds	r3, r7, r5
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	1839      	adds	r1, r7, r0
 8002514:	0013      	movs	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	18cb      	adds	r3, r1, r3
 800251e:	3328      	adds	r3, #40	@ 0x28
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2290      	movs	r2, #144	@ 0x90
 8002524:	0052      	lsls	r2, r2, #1
 8002526:	1992      	adds	r2, r2, r6
 8002528:	19d2      	adds	r2, r2, r7
 800252a:	6013      	str	r3, [r2, #0]
        tag         = stack[sp-1].tag;
 800252c:	197b      	adds	r3, r7, r5
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	1839      	adds	r1, r7, r0
 8002534:	0013      	movs	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	18cb      	adds	r3, r1, r3
 800253e:	332c      	adds	r3, #44	@ 0x2c
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 8002544:	197b      	adds	r3, r7, r5
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	1e5a      	subs	r2, r3, #1
 800254a:	1839      	adds	r1, r7, r0
 800254c:	0013      	movs	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	18cb      	adds	r3, r1, r3
 8002556:	3330      	adds	r3, #48	@ 0x30
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	22e4      	movs	r2, #228	@ 0xe4
 800255c:	18ba      	adds	r2, r7, r2
 800255e:	6013      	str	r3, [r2, #0]
        disk        = stack[sp-1].disk;
 8002560:	197b      	adds	r3, r7, r5
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	234c      	movs	r3, #76	@ 0x4c
 8002568:	18fc      	adds	r4, r7, r3
 800256a:	1839      	adds	r1, r7, r0
 800256c:	2030      	movs	r0, #48	@ 0x30
 800256e:	0013      	movs	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	18cb      	adds	r3, r1, r3
 8002578:	181b      	adds	r3, r3, r0
 800257a:	0022      	movs	r2, r4
 800257c:	3304      	adds	r3, #4
 800257e:	cb03      	ldmia	r3!, {r0, r1}
 8002580:	c203      	stmia	r2!, {r0, r1}
        sp -= 1;
 8002582:	197b      	adds	r3, r7, r5
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3b01      	subs	r3, #1
 8002588:	197a      	adds	r2, r7, r5
 800258a:	6013      	str	r3, [r2, #0]
        goto popped;
 800258c:	e515      	b.n	8001fba <lfs_dir_traverse+0x396>
    } else {
        return res;
 800258e:	23e8      	movs	r3, #232	@ 0xe8
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	681b      	ldr	r3, [r3, #0]
    }
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b03d      	add	sp, #244	@ 0xf4
 800259a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800259c <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259e:	46c6      	mov	lr, r8
 80025a0:	b500      	push	{lr}
 80025a2:	b0a2      	sub	sp, #136	@ 0x88
 80025a4:	af04      	add	r7, sp, #16
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	425b      	negs	r3, r3
 80025b2:	677b      	str	r3, [r7, #116]	@ 0x74

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d010      	beq.n	80025de <lfs_dir_fetchmatch+0x42>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d206      	bcs.n	80025d6 <lfs_dir_fetchmatch+0x3a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d303      	bcc.n	80025de <lfs_dir_fetchmatch+0x42>
        return LFS_ERR_CORRUPT;
 80025d6:	2354      	movs	r3, #84	@ 0x54
 80025d8:	425b      	negs	r3, r3
 80025da:	f000 fbc6 	bl	8002d6a <lfs_dir_fetchmatch+0x7ce>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80025de:	213c      	movs	r1, #60	@ 0x3c
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	2200      	movs	r2, #0
 80025ea:	605a      	str	r2, [r3, #4]
    int r = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	673b      	str	r3, [r7, #112]	@ 0x70
    for (int i = 0; i < 2; i++) {
 80025f0:	2300      	movs	r3, #0
 80025f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025f4:	e04e      	b.n	8002694 <lfs_dir_fetchmatch+0xf8>
        int err = lfs_bd_read(lfs,
 80025f6:	68fc      	ldr	r4, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80025f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	18d3      	adds	r3, r2, r3
        int err = lfs_bd_read(lfs,
 8002600:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002602:	253c      	movs	r5, #60	@ 0x3c
 8002604:	1979      	adds	r1, r7, r5
 8002606:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	188a      	adds	r2, r1, r2
        int err = lfs_bd_read(lfs,
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	2104      	movs	r1, #4
 8002610:	9103      	str	r1, [sp, #12]
 8002612:	9202      	str	r2, [sp, #8]
 8002614:	2200      	movs	r2, #0
 8002616:	9201      	str	r2, [sp, #4]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2304      	movs	r3, #4
 800261c:	0022      	movs	r2, r4
 800261e:	2100      	movs	r1, #0
 8002620:	f7fe f82e 	bl	8000680 <lfs_bd_read>
 8002624:	0003      	movs	r3, r0
 8002626:	647b      	str	r3, [r7, #68]	@ 0x44
        revs[i] = lfs_fromle32(revs[i]);
 8002628:	197b      	adds	r3, r7, r5
 800262a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800262c:	0092      	lsls	r2, r2, #2
 800262e:	58d3      	ldr	r3, [r2, r3]
 8002630:	0018      	movs	r0, r3
 8002632:	f7fd ffbb 	bl	80005ac <lfs_fromle32>
 8002636:	0001      	movs	r1, r0
 8002638:	197b      	adds	r3, r7, r5
 800263a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800263c:	0092      	lsls	r2, r2, #2
 800263e:	50d1      	str	r1, [r2, r3]
        if (err && err != LFS_ERR_CORRUPT) {
 8002640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <lfs_dir_fetchmatch+0xb6>
 8002646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002648:	3354      	adds	r3, #84	@ 0x54
 800264a:	d002      	beq.n	8002652 <lfs_dir_fetchmatch+0xb6>
            return err;
 800264c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800264e:	f000 fb8c 	bl	8002d6a <lfs_dir_fetchmatch+0x7ce>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002654:	3354      	adds	r3, #84	@ 0x54
 8002656:	d01a      	beq.n	800268e <lfs_dir_fetchmatch+0xf2>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002658:	233c      	movs	r3, #60	@ 0x3c
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	58d0      	ldr	r0, [r2, r3]
 8002662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002664:	3301      	adds	r3, #1
 8002666:	4add      	ldr	r2, [pc, #884]	@ (80029dc <lfs_dir_fetchmatch+0x440>)
 8002668:	4013      	ands	r3, r2
 800266a:	d504      	bpl.n	8002676 <lfs_dir_fetchmatch+0xda>
 800266c:	3b01      	subs	r3, #1
 800266e:	2202      	movs	r2, #2
 8002670:	4252      	negs	r2, r2
 8002672:	4313      	orrs	r3, r2
 8002674:	3301      	adds	r3, #1
 8002676:	001a      	movs	r2, r3
 8002678:	233c      	movs	r3, #60	@ 0x3c
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	58d3      	ldr	r3, [r2, r3]
 8002680:	0019      	movs	r1, r3
 8002682:	f7fd ff87 	bl	8000594 <lfs_scmp>
 8002686:	1e03      	subs	r3, r0, #0
        if (err != LFS_ERR_CORRUPT &&
 8002688:	dd01      	ble.n	800268e <lfs_dir_fetchmatch+0xf2>
            r = i;
 800268a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800268c:	673b      	str	r3, [r7, #112]	@ 0x70
    for (int i = 0; i < 2; i++) {
 800268e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002690:	3301      	adds	r3, #1
 8002692:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002696:	2b01      	cmp	r3, #1
 8002698:	ddad      	ble.n	80025f6 <lfs_dir_fetchmatch+0x5a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800269a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800269c:	4acf      	ldr	r2, [pc, #828]	@ (80029dc <lfs_dir_fetchmatch+0x440>)
 800269e:	4013      	ands	r3, r2
 80026a0:	d504      	bpl.n	80026ac <lfs_dir_fetchmatch+0x110>
 80026a2:	3b01      	subs	r3, #1
 80026a4:	2202      	movs	r2, #2
 80026a6:	4252      	negs	r2, r2
 80026a8:	4313      	orrs	r3, r2
 80026aa:	3301      	adds	r3, #1
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	18d3      	adds	r3, r2, r3
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80026b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026ba:	3301      	adds	r3, #1
 80026bc:	4ac7      	ldr	r2, [pc, #796]	@ (80029dc <lfs_dir_fetchmatch+0x440>)
 80026be:	4013      	ands	r3, r2
 80026c0:	d504      	bpl.n	80026cc <lfs_dir_fetchmatch+0x130>
 80026c2:	3b01      	subs	r3, #1
 80026c4:	2202      	movs	r2, #2
 80026c6:	4252      	negs	r2, r2
 80026c8:	4313      	orrs	r3, r2
 80026ca:	3301      	adds	r3, #1
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	18d3      	adds	r3, r2, r3
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 80026d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026da:	4ac0      	ldr	r2, [pc, #768]	@ (80029dc <lfs_dir_fetchmatch+0x440>)
 80026dc:	4013      	ands	r3, r2
 80026de:	d504      	bpl.n	80026ea <lfs_dir_fetchmatch+0x14e>
 80026e0:	3b01      	subs	r3, #1
 80026e2:	2202      	movs	r2, #2
 80026e4:	4252      	negs	r2, r2
 80026e6:	4313      	orrs	r3, r2
 80026e8:	3301      	adds	r3, #1
 80026ea:	001a      	movs	r2, r3
 80026ec:	233c      	movs	r3, #60	@ 0x3c
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	58d2      	ldr	r2, [r2, r3]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80026fe:	2300      	movs	r3, #0
 8002700:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002702:	e31e      	b.n	8002d42 <lfs_dir_fetchmatch+0x7a6>
        lfs_off_t off = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	667b      	str	r3, [r7, #100]	@ 0x64
        lfs_tag_t ptag = 0xffffffff;
 8002708:	2301      	movs	r3, #1
 800270a:	425b      	negs	r3, r3
 800270c:	663b      	str	r3, [r7, #96]	@ 0x60

        uint16_t tempcount = 0;
 800270e:	235e      	movs	r3, #94	@ 0x5e
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2200      	movs	r2, #0
 8002714:	801a      	strh	r2, [r3, #0]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002716:	2334      	movs	r3, #52	@ 0x34
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	4ab1      	ldr	r2, [pc, #708]	@ (80029e0 <lfs_dir_fetchmatch+0x444>)
 800271c:	ca03      	ldmia	r2!, {r0, r1}
 800271e:	c303      	stmia	r3!, {r0, r1}
        bool tempsplit = false;
 8002720:	235d      	movs	r3, #93	@ 0x5d
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
        lfs_stag_t tempbesttag = besttag;
 8002728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272a:	65bb      	str	r3, [r7, #88]	@ 0x58

        // assume not erased until proven otherwise
        bool maybeerased = false;
 800272c:	2357      	movs	r3, #87	@ 0x57
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
        bool hasfcrc = false;
 8002734:	2356      	movs	r3, #86	@ 0x56
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	0018      	movs	r0, r3
 8002742:	f7fd ff3c 	bl	80005be <lfs_tole32>
 8002746:	0002      	movs	r2, r0
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	3308      	adds	r3, #8
 8002750:	0019      	movs	r1, r3
 8002752:	2301      	movs	r3, #1
 8002754:	425b      	negs	r3, r3
 8002756:	2204      	movs	r2, #4
 8002758:	0018      	movs	r0, r3
 800275a:	f005 fa91 	bl	8007c80 <lfs_crc>
 800275e:	0003      	movs	r3, r0
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
        dir->rev = lfs_fromle32(dir->rev);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0018      	movs	r0, r3
 8002768:	f7fd ff20 	bl	80005ac <lfs_fromle32>
 800276c:	0002      	movs	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002774:	0018      	movs	r0, r3
 8002776:	f7fe fc92 	bl	800109e <lfs_tag_dsize>
 800277a:	0002      	movs	r2, r0
 800277c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800277e:	189b      	adds	r3, r3, r2
 8002780:	667b      	str	r3, [r7, #100]	@ 0x64
            int err = lfs_bd_read(lfs,
 8002782:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002788:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	2204      	movs	r2, #4
 8002792:	9203      	str	r2, [sp, #12]
 8002794:	2224      	movs	r2, #36	@ 0x24
 8002796:	18ba      	adds	r2, r7, r2
 8002798:	9202      	str	r2, [sp, #8]
 800279a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800279c:	9201      	str	r2, [sp, #4]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	0023      	movs	r3, r4
 80027a2:	000a      	movs	r2, r1
 80027a4:	2100      	movs	r1, #0
 80027a6:	f7fd ff6b 	bl	8000680 <lfs_bd_read>
 80027aa:	0003      	movs	r3, r0
 80027ac:	653b      	str	r3, [r7, #80]	@ 0x50
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80027ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <lfs_dir_fetchmatch+0x224>
                if (err == LFS_ERR_CORRUPT) {
 80027b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b6:	3354      	adds	r3, #84	@ 0x54
 80027b8:	d100      	bne.n	80027bc <lfs_dir_fetchmatch+0x220>
 80027ba:	e1ee      	b.n	8002b9a <lfs_dir_fetchmatch+0x5fe>
                    // can't continue?
                    break;
                }
                return err;
 80027bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027be:	e2d4      	b.n	8002d6a <lfs_dir_fetchmatch+0x7ce>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80027c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c2:	2224      	movs	r2, #36	@ 0x24
 80027c4:	18b9      	adds	r1, r7, r2
 80027c6:	2204      	movs	r2, #4
 80027c8:	0018      	movs	r0, r3
 80027ca:	f005 fa59 	bl	8007c80 <lfs_crc>
 80027ce:	0003      	movs	r3, r0
 80027d0:	62bb      	str	r3, [r7, #40]	@ 0x28
            tag = lfs_frombe32(tag) ^ ptag;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7fd feff 	bl	80005d8 <lfs_frombe32>
 80027da:	0002      	movs	r2, r0
 80027dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027de:	4053      	eors	r3, r2
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fe fbe1 	bl	8000fac <lfs_tag_isvalid>
 80027ea:	0003      	movs	r3, r0
 80027ec:	001a      	movs	r2, r3
 80027ee:	2301      	movs	r3, #1
 80027f0:	4053      	eors	r3, r2
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <lfs_dir_fetchmatch+0x27a>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 80027f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fe fc00 	bl	8001000 <lfs_tag_type2>
 8002800:	0003      	movs	r3, r0
 8002802:	001a      	movs	r2, r3
 8002804:	2357      	movs	r3, #87	@ 0x57
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	4976      	ldr	r1, [pc, #472]	@ (80029e4 <lfs_dir_fetchmatch+0x448>)
 800280a:	468c      	mov	ip, r1
 800280c:	4462      	add	r2, ip
 800280e:	4251      	negs	r1, r2
 8002810:	414a      	adcs	r2, r1
 8002812:	701a      	strb	r2, [r3, #0]
                break;
 8002814:	e1d0      	b.n	8002bb8 <lfs_dir_fetchmatch+0x61c>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	0018      	movs	r0, r3
 800281a:	f7fe fc40 	bl	800109e <lfs_tag_dsize>
 800281e:	0002      	movs	r2, r0
 8002820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002822:	18d2      	adds	r2, r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	429a      	cmp	r2, r3
 800282c:	d900      	bls.n	8002830 <lfs_dir_fetchmatch+0x294>
 800282e:	e1b6      	b.n	8002b9e <lfs_dir_fetchmatch+0x602>
                break;
            }

            ptag = tag;
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	663b      	str	r3, [r7, #96]	@ 0x60

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	0018      	movs	r0, r3
 8002838:	f7fe fbe2 	bl	8001000 <lfs_tag_type2>
 800283c:	0003      	movs	r3, r0
 800283e:	001a      	movs	r2, r3
 8002840:	23a0      	movs	r3, #160	@ 0xa0
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	429a      	cmp	r2, r3
 8002846:	d163      	bne.n	8002910 <lfs_dir_fetchmatch+0x374>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8002848:	68fc      	ldr	r4, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800284e:	69dd      	ldr	r5, [r3, #28]
                err = lfs_bd_read(lfs,
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002856:	3204      	adds	r2, #4
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	2104      	movs	r1, #4
 800285c:	9103      	str	r1, [sp, #12]
 800285e:	2120      	movs	r1, #32
 8002860:	1879      	adds	r1, r7, r1
 8002862:	9102      	str	r1, [sp, #8]
 8002864:	9201      	str	r2, [sp, #4]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	002b      	movs	r3, r5
 800286a:	0022      	movs	r2, r4
 800286c:	2100      	movs	r1, #0
 800286e:	f7fd ff07 	bl	8000680 <lfs_bd_read>
 8002872:	0003      	movs	r3, r0
 8002874:	653b      	str	r3, [r7, #80]	@ 0x50
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8002876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <lfs_dir_fetchmatch+0x2ec>
                    if (err == LFS_ERR_CORRUPT) {
 800287c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800287e:	3354      	adds	r3, #84	@ 0x54
 8002880:	d100      	bne.n	8002884 <lfs_dir_fetchmatch+0x2e8>
 8002882:	e18e      	b.n	8002ba2 <lfs_dir_fetchmatch+0x606>
                        break;
                    }
                    return err;
 8002884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                return err;
 8002886:	e270      	b.n	8002d6a <lfs_dir_fetchmatch+0x7ce>
                }
                dcrc = lfs_fromle32(dcrc);
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	0018      	movs	r0, r3
 800288c:	f7fd fe8e 	bl	80005ac <lfs_fromle32>
 8002890:	0003      	movs	r3, r0
 8002892:	623b      	str	r3, [r7, #32]

                if (crc != dcrc) {
 8002894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	429a      	cmp	r2, r3
 800289a:	d000      	beq.n	800289e <lfs_dir_fetchmatch+0x302>
 800289c:	e183      	b.n	8002ba6 <lfs_dir_fetchmatch+0x60a>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7fe fbca 	bl	800103a <lfs_tag_chunk>
 80028a6:	0003      	movs	r3, r0
 80028a8:	07db      	lsls	r3, r3, #31
 80028aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80028ac:	4053      	eors	r3, r2
 80028ae:	663b      	str	r3, [r7, #96]	@ 0x60

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	2228      	movs	r2, #40	@ 0x28
 80028b6:	18b9      	adds	r1, r7, r2
 80028b8:	2204      	movs	r2, #4
 80028ba:	0018      	movs	r0, r3
 80028bc:	f005 f9e0 	bl	8007c80 <lfs_crc>
 80028c0:	0002      	movs	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80028c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028c8:	677b      	str	r3, [r7, #116]	@ 0x74
                dir->off = off + lfs_tag_dsize(tag);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7fe fbe6 	bl	800109e <lfs_tag_dsize>
 80028d2:	0002      	movs	r2, r0
 80028d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028d6:	18d2      	adds	r2, r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80028e0:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	225e      	movs	r2, #94	@ 0x5e
 80028e6:	18ba      	adds	r2, r7, r2
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80028ec:	2134      	movs	r1, #52	@ 0x34
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80028f6:	187b      	adds	r3, r7, r1
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	225d      	movs	r2, #93	@ 0x5d
 8002902:	18ba      	adds	r2, r7, r2
 8002904:	7812      	ldrb	r2, [r2, #0]
 8002906:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002908:	2301      	movs	r3, #1
 800290a:	425b      	negs	r3, r3
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800290e:	e730      	b.n	8002772 <lfs_dir_fetchmatch+0x1d6>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8002910:	68fe      	ldr	r6, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4698      	mov	r8, r3
            err = lfs_bd_crc(lfs,
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	681c      	ldr	r4, [r3, #0]
 800291e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002920:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	0018      	movs	r0, r3
 8002926:	f7fe fbba 	bl	800109e <lfs_tag_dsize>
 800292a:	0003      	movs	r3, r0
            err = lfs_bd_crc(lfs,
 800292c:	3b04      	subs	r3, #4
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	2228      	movs	r2, #40	@ 0x28
 8002932:	18ba      	adds	r2, r7, r2
 8002934:	9203      	str	r2, [sp, #12]
 8002936:	9302      	str	r3, [sp, #8]
 8002938:	9501      	str	r5, [sp, #4]
 800293a:	9400      	str	r4, [sp, #0]
 800293c:	4643      	mov	r3, r8
 800293e:	0032      	movs	r2, r6
 8002940:	2100      	movs	r1, #0
 8002942:	f7fe f84a 	bl	80009da <lfs_bd_crc>
 8002946:	0003      	movs	r3, r0
 8002948:	653b      	str	r3, [r7, #80]	@ 0x50
            if (err) {
 800294a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <lfs_dir_fetchmatch+0x3c0>
                if (err == LFS_ERR_CORRUPT) {
 8002950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002952:	3354      	adds	r3, #84	@ 0x54
 8002954:	d100      	bne.n	8002958 <lfs_dir_fetchmatch+0x3bc>
 8002956:	e128      	b.n	8002baa <lfs_dir_fetchmatch+0x60e>
                    break;
                }
                return err;
 8002958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800295a:	e206      	b.n	8002d6a <lfs_dir_fetchmatch+0x7ce>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	0018      	movs	r0, r3
 8002960:	f7fe fb3f 	bl	8000fe2 <lfs_tag_type1>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d115      	bne.n	8002994 <lfs_dir_fetchmatch+0x3f8>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	0018      	movs	r0, r3
 800296c:	f7fe fb7e 	bl	800106c <lfs_tag_id>
 8002970:	0003      	movs	r3, r0
 8002972:	001a      	movs	r2, r3
 8002974:	245e      	movs	r4, #94	@ 0x5e
 8002976:	193b      	adds	r3, r7, r4
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	4293      	cmp	r3, r2
 800297c:	d900      	bls.n	8002980 <lfs_dir_fetchmatch+0x3e4>
 800297e:	e0bf      	b.n	8002b00 <lfs_dir_fetchmatch+0x564>
                    tempcount = lfs_tag_id(tag) + 1;
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	0018      	movs	r0, r3
 8002984:	f7fe fb72 	bl	800106c <lfs_tag_id>
 8002988:	0003      	movs	r3, r0
 800298a:	001a      	movs	r2, r3
 800298c:	193b      	adds	r3, r7, r4
 800298e:	3201      	adds	r2, #1
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	e0b5      	b.n	8002b00 <lfs_dir_fetchmatch+0x564>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	0018      	movs	r0, r3
 8002998:	f7fe fb23 	bl	8000fe2 <lfs_tag_type1>
 800299c:	0003      	movs	r3, r0
 800299e:	001a      	movs	r2, r3
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d13f      	bne.n	8002a28 <lfs_dir_fetchmatch+0x48c>
                tempcount += lfs_tag_splice(tag);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7fe fb50 	bl	8001050 <lfs_tag_splice>
 80029b0:	0003      	movs	r3, r0
 80029b2:	b299      	uxth	r1, r3
 80029b4:	225e      	movs	r2, #94	@ 0x5e
 80029b6:	18bb      	adds	r3, r7, r2
 80029b8:	18ba      	adds	r2, r7, r2
 80029ba:	8812      	ldrh	r2, [r2, #0]
 80029bc:	188a      	adds	r2, r1, r2
 80029be:	801a      	strh	r2, [r3, #0]

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80029c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029c2:	4a09      	ldr	r2, [pc, #36]	@ (80029e8 <lfs_dir_fetchmatch+0x44c>)
 80029c4:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80029c6:	4a09      	ldr	r2, [pc, #36]	@ (80029ec <lfs_dir_fetchmatch+0x450>)
 80029c8:	431a      	orrs	r2, r3
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d10f      	bne.n	80029f0 <lfs_dir_fetchmatch+0x454>
                    tempbesttag |= 0x80000000;
 80029d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	0612      	lsls	r2, r2, #24
 80029d6:	4313      	orrs	r3, r2
 80029d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029da:	e091      	b.n	8002b00 <lfs_dir_fetchmatch+0x564>
 80029dc:	80000001 	.word	0x80000001
 80029e0:	0800b5cc 	.word	0x0800b5cc
 80029e4:	fffffb00 	.word	0xfffffb00
 80029e8:	000ffc00 	.word	0x000ffc00
 80029ec:	4ff00000 	.word	0x4ff00000
                } else if (tempbesttag != -1 &&
 80029f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f2:	3301      	adds	r3, #1
 80029f4:	d100      	bne.n	80029f8 <lfs_dir_fetchmatch+0x45c>
 80029f6:	e083      	b.n	8002b00 <lfs_dir_fetchmatch+0x564>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7fe fb36 	bl	800106c <lfs_tag_id>
 8002a00:	0003      	movs	r3, r0
 8002a02:	001c      	movs	r4, r3
 8002a04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7fe fb30 	bl	800106c <lfs_tag_id>
 8002a0c:	0003      	movs	r3, r0
                } else if (tempbesttag != -1 &&
 8002a0e:	429c      	cmp	r4, r3
 8002a10:	d900      	bls.n	8002a14 <lfs_dir_fetchmatch+0x478>
 8002a12:	e075      	b.n	8002b00 <lfs_dir_fetchmatch+0x564>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	0018      	movs	r0, r3
 8002a18:	f7fe fb1a 	bl	8001050 <lfs_tag_splice>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	029a      	lsls	r2, r3, #10
 8002a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a22:	18d3      	adds	r3, r2, r3
 8002a24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a26:	e06b      	b.n	8002b00 <lfs_dir_fetchmatch+0x564>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7fe fad9 	bl	8000fe2 <lfs_tag_type1>
 8002a30:	0003      	movs	r3, r0
 8002a32:	001a      	movs	r2, r3
 8002a34:	23c0      	movs	r3, #192	@ 0xc0
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d132      	bne.n	8002aa2 <lfs_dir_fetchmatch+0x506>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fe fafb 	bl	800103a <lfs_tag_chunk>
 8002a44:	0003      	movs	r3, r0
 8002a46:	001a      	movs	r2, r3
 8002a48:	2301      	movs	r3, #1
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	235d      	movs	r3, #93	@ 0x5d
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	1e51      	subs	r1, r2, #1
 8002a52:	418a      	sbcs	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]

                err = lfs_bd_read(lfs,
 8002a56:	68fc      	ldr	r4, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a5c:	69dd      	ldr	r5, [r3, #28]
                err = lfs_bd_read(lfs,
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a64:	3204      	adds	r2, #4
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	2108      	movs	r1, #8
 8002a6a:	9103      	str	r1, [sp, #12]
 8002a6c:	2134      	movs	r1, #52	@ 0x34
 8002a6e:	1879      	adds	r1, r7, r1
 8002a70:	9102      	str	r1, [sp, #8]
 8002a72:	9201      	str	r2, [sp, #4]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	002b      	movs	r3, r5
 8002a78:	0022      	movs	r2, r4
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	f7fd fe00 	bl	8000680 <lfs_bd_read>
 8002a80:	0003      	movs	r3, r0
 8002a82:	653b      	str	r3, [r7, #80]	@ 0x50
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <lfs_dir_fetchmatch+0x4fa>
                    if (err == LFS_ERR_CORRUPT) {
 8002a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a8c:	3354      	adds	r3, #84	@ 0x54
 8002a8e:	d100      	bne.n	8002a92 <lfs_dir_fetchmatch+0x4f6>
 8002a90:	e08d      	b.n	8002bae <lfs_dir_fetchmatch+0x612>
                        break;
                    }
                    return err;
 8002a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a94:	e169      	b.n	8002d6a <lfs_dir_fetchmatch+0x7ce>
                }
                lfs_pair_fromle32(temptail);
 8002a96:	2334      	movs	r3, #52	@ 0x34
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7fe fa52 	bl	8000f44 <lfs_pair_fromle32>
 8002aa0:	e02e      	b.n	8002b00 <lfs_dir_fetchmatch+0x564>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7fe faba 	bl	800101e <lfs_tag_type3>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	001a      	movs	r2, r3
 8002aae:	4bb2      	ldr	r3, [pc, #712]	@ (8002d78 <lfs_dir_fetchmatch+0x7dc>)
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d125      	bne.n	8002b00 <lfs_dir_fetchmatch+0x564>
                err = lfs_bd_read(lfs,
 8002ab4:	68fc      	ldr	r4, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aba:	69dd      	ldr	r5, [r3, #28]
                err = lfs_bd_read(lfs,
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002ac2:	3204      	adds	r2, #4
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	2108      	movs	r1, #8
 8002ac8:	9103      	str	r1, [sp, #12]
 8002aca:	212c      	movs	r1, #44	@ 0x2c
 8002acc:	1879      	adds	r1, r7, r1
 8002ace:	9102      	str	r1, [sp, #8]
 8002ad0:	9201      	str	r2, [sp, #4]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	002b      	movs	r3, r5
 8002ad6:	0022      	movs	r2, r4
 8002ad8:	2100      	movs	r1, #0
 8002ada:	f7fd fdd1 	bl	8000680 <lfs_bd_read>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	653b      	str	r3, [r7, #80]	@ 0x50
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8002ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <lfs_dir_fetchmatch+0x552>
                    if (err == LFS_ERR_CORRUPT) {
 8002ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aea:	3354      	adds	r3, #84	@ 0x54
 8002aec:	d061      	beq.n	8002bb2 <lfs_dir_fetchmatch+0x616>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002aee:	232c      	movs	r3, #44	@ 0x2c
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7fe fbc4 	bl	8001280 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8002af8:	2356      	movs	r3, #86	@ 0x56
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b02:	2390      	movs	r3, #144	@ 0x90
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4053      	eors	r3, r2
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d000      	beq.n	8002b12 <lfs_dir_fetchmatch+0x576>
 8002b10:	e62f      	b.n	8002772 <lfs_dir_fetchmatch+0x1d6>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002b12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
                        dir->pair[0], off+sizeof(tag)});
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	681a      	ldr	r2, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002b18:	2018      	movs	r0, #24
 8002b1a:	183b      	adds	r3, r7, r0
 8002b1c:	601a      	str	r2, [r3, #0]
                        dir->pair[0], off+sizeof(tag)});
 8002b1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b20:	1d1a      	adds	r2, r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002b22:	183b      	adds	r3, r7, r0
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	183a      	adds	r2, r7, r0
 8002b28:	239c      	movs	r3, #156	@ 0x9c
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	2398      	movs	r3, #152	@ 0x98
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4798      	blx	r3
 8002b36:	0003      	movs	r3, r0
 8002b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (res < 0) {
 8002b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	da04      	bge.n	8002b4a <lfs_dir_fetchmatch+0x5ae>
                    if (res == LFS_ERR_CORRUPT) {
 8002b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b42:	3354      	adds	r3, #84	@ 0x54
 8002b44:	d037      	beq.n	8002bb6 <lfs_dir_fetchmatch+0x61a>
                        break;
                    }
                    return res;
 8002b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
                return err;
 8002b48:	e10f      	b.n	8002d6a <lfs_dir_fetchmatch+0x7ce>
                }

                if (res == LFS_CMP_EQ) {
 8002b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <lfs_dir_fetchmatch+0x5ba>
                    // found a match
                    tempbesttag = tag;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b54:	e60d      	b.n	8002772 <lfs_dir_fetchmatch+0x1d6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b5a:	4053      	eors	r3, r2
 8002b5c:	4a87      	ldr	r2, [pc, #540]	@ (8002d7c <lfs_dir_fetchmatch+0x7e0>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d103      	bne.n	8002b6a <lfs_dir_fetchmatch+0x5ce>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	425b      	negs	r3, r3
 8002b66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b68:	e603      	b.n	8002772 <lfs_dir_fetchmatch+0x1d6>
                } else if (res == LFS_CMP_GT &&
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d000      	beq.n	8002b72 <lfs_dir_fetchmatch+0x5d6>
 8002b70:	e5ff      	b.n	8002772 <lfs_dir_fetchmatch+0x1d6>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7fe fa79 	bl	800106c <lfs_tag_id>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	001c      	movs	r4, r3
 8002b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7fe fa73 	bl	800106c <lfs_tag_id>
 8002b86:	0003      	movs	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002b88:	429c      	cmp	r4, r3
 8002b8a:	d900      	bls.n	8002b8e <lfs_dir_fetchmatch+0x5f2>
 8002b8c:	e5f1      	b.n	8002772 <lfs_dir_fetchmatch+0x1d6>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	2280      	movs	r2, #128	@ 0x80
 8002b92:	0612      	lsls	r2, r2, #24
 8002b94:	4313      	orrs	r3, r2
 8002b96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b98:	e5eb      	b.n	8002772 <lfs_dir_fetchmatch+0x1d6>
                    break;
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	e00c      	b.n	8002bb8 <lfs_dir_fetchmatch+0x61c>
                break;
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	e00a      	b.n	8002bb8 <lfs_dir_fetchmatch+0x61c>
                        break;
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	e008      	b.n	8002bb8 <lfs_dir_fetchmatch+0x61c>
                    break;
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	e006      	b.n	8002bb8 <lfs_dir_fetchmatch+0x61c>
                    break;
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	e004      	b.n	8002bb8 <lfs_dir_fetchmatch+0x61c>
                        break;
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	e002      	b.n	8002bb8 <lfs_dir_fetchmatch+0x61c>
                        break;
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	e000      	b.n	8002bb8 <lfs_dir_fetchmatch+0x61c>
                        break;
 8002bb6:	46c0      	nop			@ (mov r8, r8)
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d000      	beq.n	8002bc2 <lfs_dir_fetchmatch+0x626>
 8002bc0:	e018      	b.n	8002bf4 <lfs_dir_fetchmatch+0x658>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7fe f93e 	bl	8000e46 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bcc:	3301      	adds	r3, #1
 8002bce:	4a6c      	ldr	r2, [pc, #432]	@ (8002d80 <lfs_dir_fetchmatch+0x7e4>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d504      	bpl.n	8002bde <lfs_dir_fetchmatch+0x642>
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	4252      	negs	r2, r2
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	3301      	adds	r3, #1
 8002bde:	001a      	movs	r2, r3
 8002be0:	233c      	movs	r3, #60	@ 0x3c
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	0092      	lsls	r2, r2, #2
 8002be6:	58d2      	ldr	r2, [r2, r3]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bee:	3301      	adds	r3, #1
 8002bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bf2:	e0a6      	b.n	8002d42 <lfs_dir_fetchmatch+0x7a6>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002bfa:	2357      	movs	r3, #87	@ 0x57
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d03e      	beq.n	8002c82 <lfs_dir_fetchmatch+0x6e6>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	0019      	movs	r1, r3
 8002c10:	0010      	movs	r0, r2
 8002c12:	f7fd fb0d 	bl	8000230 <__aeabi_uidivmod>
 8002c16:	1e0b      	subs	r3, r1, #0
 8002c18:	d133      	bne.n	8002c82 <lfs_dir_fetchmatch+0x6e6>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002c1a:	2356      	movs	r3, #86	@ 0x56
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d02e      	beq.n	8002c82 <lfs_dir_fetchmatch+0x6e6>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8002c24:	2301      	movs	r3, #1
 8002c26:	425b      	negs	r3, r3
 8002c28:	617b      	str	r3, [r7, #20]
                int err = lfs_bd_crc(lfs,
 8002c2a:	68fd      	ldr	r5, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c30:	69de      	ldr	r6, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	68d9      	ldr	r1, [r3, #12]
 8002c3a:	232c      	movs	r3, #44	@ 0x2c
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68fc      	ldr	r4, [r7, #12]
 8002c42:	2014      	movs	r0, #20
 8002c44:	1838      	adds	r0, r7, r0
 8002c46:	9003      	str	r0, [sp, #12]
 8002c48:	9302      	str	r3, [sp, #8]
 8002c4a:	9101      	str	r1, [sp, #4]
 8002c4c:	9200      	str	r2, [sp, #0]
 8002c4e:	0033      	movs	r3, r6
 8002c50:	002a      	movs	r2, r5
 8002c52:	2100      	movs	r1, #0
 8002c54:	0020      	movs	r0, r4
 8002c56:	f7fd fec0 	bl	80009da <lfs_bd_crc>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <lfs_dir_fetchmatch+0x6d2>
 8002c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c66:	3354      	adds	r3, #84	@ 0x54
 8002c68:	d001      	beq.n	8002c6e <lfs_dir_fetchmatch+0x6d2>
                    return err;
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c6c:	e07d      	b.n	8002d6a <lfs_dir_fetchmatch+0x7ce>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002c6e:	232c      	movs	r3, #44	@ 0x2c
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	425a      	negs	r2, r3
 8002c7a:	4153      	adcs	r3, r2
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	333c      	adds	r3, #60	@ 0x3c
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	0011      	movs	r1, r2
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7fe fa98 	bl	80011c0 <lfs_gstate_hasmovehere>
 8002c90:	1e03      	subs	r3, r0, #0
 8002c92:	d029      	beq.n	8002ce8 <lfs_dir_fetchmatch+0x74c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7fe f9e7 	bl	800106c <lfs_tag_id>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	001c      	movs	r4, r3
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7fe f9e1 	bl	800106c <lfs_tag_id>
 8002caa:	0003      	movs	r3, r0
 8002cac:	429c      	cmp	r4, r3
 8002cae:	d105      	bne.n	8002cbc <lfs_dir_fetchmatch+0x720>
                besttag |= 0x80000000;
 8002cb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb2:	2280      	movs	r2, #128	@ 0x80
 8002cb4:	0612      	lsls	r2, r2, #24
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cba:	e015      	b.n	8002ce8 <lfs_dir_fetchmatch+0x74c>
            } else if (besttag != -1 &&
 8002cbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	d012      	beq.n	8002ce8 <lfs_dir_fetchmatch+0x74c>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7fe f9d0 	bl	800106c <lfs_tag_id>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	001c      	movs	r4, r3
 8002cd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7fe f9ca 	bl	800106c <lfs_tag_id>
 8002cd8:	0003      	movs	r3, r0
            } else if (besttag != -1 &&
 8002cda:	429c      	cmp	r4, r3
 8002cdc:	d204      	bcs.n	8002ce8 <lfs_dir_fetchmatch+0x74c>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ce0:	4a28      	ldr	r2, [pc, #160]	@ (8002d84 <lfs_dir_fetchmatch+0x7e8>)
 8002ce2:	4694      	mov	ip, r2
 8002ce4:	4463      	add	r3, ip
 8002ce6:	677b      	str	r3, [r7, #116]	@ 0x74
            }
        }

        // found tag? or found best id?
        if (id) {
 8002ce8:	2494      	movs	r4, #148	@ 0x94
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d010      	beq.n	8002d14 <lfs_dir_fetchmatch+0x778>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7fe f9b9 	bl	800106c <lfs_tag_id>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	001a      	movs	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	8a9b      	ldrh	r3, [r3, #20]
 8002d02:	0019      	movs	r1, r3
 8002d04:	0010      	movs	r0, r2
 8002d06:	f7fd fbe9 	bl	80004dc <lfs_min>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002d14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d16:	0018      	movs	r0, r3
 8002d18:	f7fe f948 	bl	8000fac <lfs_tag_isvalid>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d001      	beq.n	8002d24 <lfs_dir_fetchmatch+0x788>
            return besttag;
 8002d20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d22:	e022      	b.n	8002d6a <lfs_dir_fetchmatch+0x7ce>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7fe f9a0 	bl	800106c <lfs_tag_id>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	001a      	movs	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	8a9b      	ldrh	r3, [r3, #20]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d202      	bcs.n	8002d3e <lfs_dir_fetchmatch+0x7a2>
            return LFS_ERR_NOENT;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	425b      	negs	r3, r3
 8002d3c:	e015      	b.n	8002d6a <lfs_dir_fetchmatch+0x7ce>
        } else {
            return 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e013      	b.n	8002d6a <lfs_dir_fetchmatch+0x7ce>
    for (int i = 0; i < 2; i++) {
 8002d42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	dc00      	bgt.n	8002d4a <lfs_dir_fetchmatch+0x7ae>
 8002d48:	e4dc      	b.n	8002704 <lfs_dir_fetchmatch+0x168>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	681c      	ldr	r4, [r3, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4d0d      	ldr	r5, [pc, #52]	@ (8002d88 <lfs_dir_fetchmatch+0x7ec>)
 8002d54:	490d      	ldr	r1, [pc, #52]	@ (8002d8c <lfs_dir_fetchmatch+0x7f0>)
 8002d56:	480e      	ldr	r0, [pc, #56]	@ (8002d90 <lfs_dir_fetchmatch+0x7f4>)
 8002d58:	4a0e      	ldr	r2, [pc, #56]	@ (8002d94 <lfs_dir_fetchmatch+0x7f8>)
 8002d5a:	9201      	str	r2, [sp, #4]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	0023      	movs	r3, r4
 8002d60:	002a      	movs	r2, r5
 8002d62:	f007 fce5 	bl	800a730 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002d66:	2354      	movs	r3, #84	@ 0x54
 8002d68:	425b      	negs	r3, r3
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b01e      	add	sp, #120	@ 0x78
 8002d70:	bc80      	pop	{r7}
 8002d72:	46b8      	mov	r8, r7
 8002d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	000005ff 	.word	0x000005ff
 8002d7c:	7ffffc00 	.word	0x7ffffc00
 8002d80:	80000001 	.word	0x80000001
 8002d84:	fffffc00 	.word	0xfffffc00
 8002d88:	00000565 	.word	0x00000565
 8002d8c:	0800b478 	.word	0x0800b478
 8002d90:	0800b594 	.word	0x0800b594
 8002d94:	0800b588 	.word	0x0800b588

08002d98 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b089      	sub	sp, #36	@ 0x24
 8002d9c:	af04      	add	r7, sp, #16
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002da4:	2301      	movs	r3, #1
 8002da6:	425c      	negs	r4, r3
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9303      	str	r3, [sp, #12]
 8002db2:	2300      	movs	r3, #0
 8002db4:	9302      	str	r3, [sp, #8]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	2301      	movs	r3, #1
 8002dbc:	425b      	negs	r3, r3
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	0023      	movs	r3, r4
 8002dc2:	f7ff fbeb 	bl	800259c <lfs_dir_fetchmatch>
 8002dc6:	0003      	movs	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b005      	add	sp, #20
 8002dce:	bd90      	pop	{r4, r7, pc}

08002dd0 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b08b      	sub	sp, #44	@ 0x2c
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002ddc:	4c13      	ldr	r4, [pc, #76]	@ (8002e2c <lfs_dir_getgstate+0x5c>)
 8002dde:	4a14      	ldr	r2, [pc, #80]	@ (8002e30 <lfs_dir_getgstate+0x60>)
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	2310      	movs	r3, #16
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	0023      	movs	r3, r4
 8002dec:	f7fe fdb6 	bl	800195c <lfs_dir_get>
 8002df0:	0003      	movs	r3, r0
 8002df2:	61fb      	str	r3, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	da04      	bge.n	8002e04 <lfs_dir_getgstate+0x34>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	d001      	beq.n	8002e04 <lfs_dir_getgstate+0x34>
        return res;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	e00e      	b.n	8002e22 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	3302      	adds	r3, #2
 8002e08:	d00a      	beq.n	8002e20 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002e0a:	2410      	movs	r4, #16
 8002e0c:	193b      	adds	r3, r7, r4
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7fe f9f6 	bl	8001200 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002e14:	193a      	adds	r2, r7, r4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0011      	movs	r1, r2
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7fe f954 	bl	80010c8 <lfs_gstate_xor>
    }

    return 0;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b009      	add	sp, #36	@ 0x24
 8002e28:	bd90      	pop	{r4, r7, pc}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	7ff0000c 	.word	0x7ff0000c
 8002e30:	7ff00000 	.word	0x7ff00000

08002e34 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e36:	b08f      	sub	sp, #60	@ 0x3c
 8002e38:	af04      	add	r7, sp, #16
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	689c      	ldr	r4, [r3, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7fe f917 	bl	8001088 <lfs_tag_size>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	0020      	movs	r0, r4
 8002e60:	f7fd fb3c 	bl	80004dc <lfs_min>
 8002e64:	0003      	movs	r3, r0
 8002e66:	61bb      	str	r3, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002e68:	6a3d      	ldr	r5, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	6859      	ldr	r1, [r3, #4]
    int res = lfs_bd_cmp(lfs,
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	69be      	ldr	r6, [r7, #24]
 8002e78:	6a3c      	ldr	r4, [r7, #32]
 8002e7a:	69b8      	ldr	r0, [r7, #24]
 8002e7c:	9003      	str	r0, [sp, #12]
 8002e7e:	9302      	str	r3, [sp, #8]
 8002e80:	9101      	str	r1, [sp, #4]
 8002e82:	9200      	str	r2, [sp, #0]
 8002e84:	0033      	movs	r3, r6
 8002e86:	002a      	movs	r2, r5
 8002e88:	2100      	movs	r1, #0
 8002e8a:	0020      	movs	r0, r4
 8002e8c:	f7fd fd50 	bl	8000930 <lfs_bd_cmp>
 8002e90:	0003      	movs	r3, r0
 8002e92:	617b      	str	r3, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <lfs_dir_find_match+0x6a>
        return res;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	e016      	b.n	8002ecc <lfs_dir_find_match+0x98>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	689c      	ldr	r4, [r3, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7fe f8ef 	bl	8001088 <lfs_tag_size>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	429c      	cmp	r4, r3
 8002eae:	d00c      	beq.n	8002eca <lfs_dir_find_match+0x96>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	689c      	ldr	r4, [r3, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7fe f8e6 	bl	8001088 <lfs_tag_size>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	429c      	cmp	r4, r3
 8002ec0:	d201      	bcs.n	8002ec6 <lfs_dir_find_match+0x92>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e002      	b.n	8002ecc <lfs_dir_find_match+0x98>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e000      	b.n	8002ecc <lfs_dir_find_match+0x98>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b00b      	add	sp, #44	@ 0x2c
 8002ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ed4 <lfs_dir_find>:
// returns:
// - 0                  if file is found
// - LFS_ERR_NOENT      if file or parent is not found
// - LFS_ERR_NOTDIR     if parent is not a dir
static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002ed4:	b5b0      	push	{r4, r5, r7, lr}
 8002ed6:	b092      	sub	sp, #72	@ 0x48
 8002ed8:	af04      	add	r7, sp, #16
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8002ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80030e4 <lfs_dir_find+0x210>)
 8002eea:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	61da      	str	r2, [r3, #28]

    // empty paths are not allowed
    if (*name == '\0') {
 8002efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <lfs_dir_find+0x34>
        return LFS_ERR_INVAL;
    }

    while (true) {
nextname:
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	e002      	b.n	8002f0e <lfs_dir_find+0x3a>
        return LFS_ERR_INVAL;
 8002f08:	2316      	movs	r3, #22
 8002f0a:	425b      	negs	r3, r3
 8002f0c:	e0e6      	b.n	80030dc <lfs_dir_find+0x208>
        // skip slashes if we're a directory
        if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7fe f884 	bl	800101e <lfs_tag_type3>
 8002f16:	0003      	movs	r3, r0
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d109      	bne.n	8002f30 <lfs_dir_find+0x5c>
            name += strspn(name, "/");
 8002f1c:	4a72      	ldr	r2, [pc, #456]	@ (80030e8 <lfs_dir_find+0x214>)
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f20:	0011      	movs	r1, r2
 8002f22:	0018      	movs	r0, r3
 8002f24:	f007 fc87 	bl	800a836 <strspn>
 8002f28:	0002      	movs	r2, r0
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2c:	189b      	adds	r3, r3, r2
 8002f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        lfs_size_t namelen = strcspn(name, "/");
 8002f30:	4a6d      	ldr	r2, [pc, #436]	@ (80030e8 <lfs_dir_find+0x214>)
 8002f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f34:	0011      	movs	r1, r2
 8002f36:	0018      	movs	r0, r3
 8002f38:	f007 fc6c 	bl	800a814 <strcspn>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24

        // skip '.'
        if (namelen == 1 && memcmp(name, ".", 1) == 0) {
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10a      	bne.n	8002f5c <lfs_dir_find+0x88>
 8002f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	4b68      	ldr	r3, [pc, #416]	@ (80030ec <lfs_dir_find+0x218>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d104      	bne.n	8002f5c <lfs_dir_find+0x88>
            name += namelen;
 8002f52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	18d3      	adds	r3, r2, r3
 8002f58:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 8002f5a:	e7d8      	b.n	8002f0e <lfs_dir_find+0x3a>
        }

        // error on unmatched '..', trying to go above root?
        if (namelen == 2 && memcmp(name, "..", 2) == 0) {
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d10a      	bne.n	8002f78 <lfs_dir_find+0xa4>
 8002f62:	4963      	ldr	r1, [pc, #396]	@ (80030f0 <lfs_dir_find+0x21c>)
 8002f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f66:	2202      	movs	r2, #2
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f007 fc3d 	bl	800a7e8 <memcmp>
 8002f6e:	1e03      	subs	r3, r0, #0
 8002f70:	d102      	bne.n	8002f78 <lfs_dir_find+0xa4>
            return LFS_ERR_INVAL;
 8002f72:	2316      	movs	r3, #22
 8002f74:	425b      	negs	r3, r3
 8002f76:	e0b1      	b.n	80030dc <lfs_dir_find+0x208>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002f78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	18d3      	adds	r3, r2, r3
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8002f80:	2301      	movs	r3, #1
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8002f84:	4a58      	ldr	r2, [pc, #352]	@ (80030e8 <lfs_dir_find+0x214>)
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	0011      	movs	r1, r2
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f007 fc53 	bl	800a836 <strspn>
 8002f90:	0002      	movs	r2, r0
 8002f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f94:	189b      	adds	r3, r3, r2
 8002f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 8002f98:	4a53      	ldr	r2, [pc, #332]	@ (80030e8 <lfs_dir_find+0x214>)
 8002f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9c:	0011      	movs	r1, r2
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f007 fc38 	bl	800a814 <strcspn>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	623b      	str	r3, [r7, #32]
            if (sufflen == 0) {
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d026      	beq.n	8002ffc <lfs_dir_find+0x128>
                break;
            }

            if (sufflen == 1 && memcmp(suffix, ".", 1) == 0) {
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <lfs_dir_find+0xec>
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80030ec <lfs_dir_find+0x218>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d018      	beq.n	8002ff2 <lfs_dir_find+0x11e>
                // noop
            } else if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d112      	bne.n	8002fec <lfs_dir_find+0x118>
 8002fc6:	494a      	ldr	r1, [pc, #296]	@ (80030f0 <lfs_dir_find+0x21c>)
 8002fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fca:	2202      	movs	r2, #2
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f007 fc0b 	bl	800a7e8 <memcmp>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d10a      	bne.n	8002fec <lfs_dir_find+0x118>
                depth -= 1;
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 8002fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <lfs_dir_find+0x11e>
                    name = suffix + sufflen;
 8002fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	18d3      	adds	r3, r2, r3
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 8002fea:	e790      	b.n	8002f0e <lfs_dir_find+0x3a>
                }
            } else {
                depth += 1;
 8002fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fee:	3301      	adds	r3, #1
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8002ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	18d3      	adds	r3, r2, r3
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 8002ffa:	e7c3      	b.n	8002f84 <lfs_dir_find+0xb0>
                break;
 8002ffc:	46c0      	nop			@ (mov r8, r8)
        }

        // found path
        if (*name == '\0') {
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <lfs_dir_find+0x136>
            return tag;
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	e068      	b.n	80030dc <lfs_dir_find+0x208>
        }

        // update what we've found so far
        *path = name;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800300e:	601a      	str	r2, [r3, #0]

        // only continue if we're a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8003010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003012:	0018      	movs	r0, r3
 8003014:	f7fe f803 	bl	800101e <lfs_tag_type3>
 8003018:	0003      	movs	r3, r0
 800301a:	2b02      	cmp	r3, #2
 800301c:	d002      	beq.n	8003024 <lfs_dir_find+0x150>
            return LFS_ERR_NOTDIR;
 800301e:	2314      	movs	r3, #20
 8003020:	425b      	negs	r3, r3
 8003022:	e05b      	b.n	80030dc <lfs_dir_find+0x208>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	0018      	movs	r0, r3
 8003028:	f7fe f820 	bl	800106c <lfs_tag_id>
 800302c:	0003      	movs	r3, r0
 800302e:	001a      	movs	r2, r3
 8003030:	4b30      	ldr	r3, [pc, #192]	@ (80030f4 <lfs_dir_find+0x220>)
 8003032:	429a      	cmp	r2, r3
 8003034:	d01d      	beq.n	8003072 <lfs_dir_find+0x19e>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003038:	0018      	movs	r0, r3
 800303a:	f7fe f817 	bl	800106c <lfs_tag_id>
 800303e:	0003      	movs	r3, r0
 8003040:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003042:	4a2d      	ldr	r2, [pc, #180]	@ (80030f8 <lfs_dir_find+0x224>)
 8003044:	431a      	orrs	r2, r3
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3318      	adds	r3, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800304a:	4c2c      	ldr	r4, [pc, #176]	@ (80030fc <lfs_dir_find+0x228>)
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	0013      	movs	r3, r2
 8003054:	0022      	movs	r2, r4
 8003056:	f7fe fc81 	bl	800195c <lfs_dir_get>
 800305a:	0003      	movs	r3, r0
 800305c:	61fb      	str	r3, [r7, #28]
            if (res < 0) {
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b00      	cmp	r3, #0
 8003062:	da01      	bge.n	8003068 <lfs_dir_find+0x194>
                return res;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	e039      	b.n	80030dc <lfs_dir_find+0x208>
            }
            lfs_pair_fromle32(dir->tail);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	3318      	adds	r3, #24
 800306c:	0018      	movs	r0, r3
 800306e:	f7fd ff69 	bl	8000f44 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	3318      	adds	r3, #24
 8003076:	001c      	movs	r4, r3
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                    id,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8003078:	2510      	movs	r5, #16
 800307a:	197b      	adds	r3, r7, r5
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	197b      	adds	r3, r7, r5
 8003082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	197b      	adds	r3, r7, r5
 8003088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308a:	609a      	str	r2, [r3, #8]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800308c:	23f0      	movs	r3, #240	@ 0xf0
 800308e:	05da      	lsls	r2, r3, #23
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	197b      	adds	r3, r7, r5
 8003096:	9303      	str	r3, [sp, #12]
 8003098:	4b19      	ldr	r3, [pc, #100]	@ (8003100 <lfs_dir_find+0x22c>)
 800309a:	9302      	str	r3, [sp, #8]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	0013      	movs	r3, r2
 80030a6:	0022      	movs	r2, r4
 80030a8:	f7ff fa78 	bl	800259c <lfs_dir_fetchmatch>
 80030ac:	0003      	movs	r3, r0
 80030ae:	633b      	str	r3, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	da01      	bge.n	80030ba <lfs_dir_find+0x1e6>
                return tag;
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	e010      	b.n	80030dc <lfs_dir_find+0x208>
            }

            if (tag) {
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <lfs_dir_find+0x1f6>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80030c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 80030c8:	e721      	b.n	8002f0e <lfs_dir_find+0x3a>
            if (!dir->split) {
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	7ddb      	ldrb	r3, [r3, #23]
 80030ce:	2201      	movs	r2, #1
 80030d0:	4053      	eors	r3, r2
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0cc      	beq.n	8003072 <lfs_dir_find+0x19e>
                return LFS_ERR_NOENT;
 80030d8:	2302      	movs	r3, #2
 80030da:	425b      	negs	r3, r3
    }
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b00e      	add	sp, #56	@ 0x38
 80030e2:	bdb0      	pop	{r4, r5, r7, pc}
 80030e4:	002ffc00 	.word	0x002ffc00
 80030e8:	0800b558 	.word	0x0800b558
 80030ec:	0800b5d4 	.word	0x0800b5d4
 80030f0:	0800b5d8 	.word	0x0800b5d8
 80030f4:	000003ff 	.word	0x000003ff
 80030f8:	20000008 	.word	0x20000008
 80030fc:	700ffc00 	.word	0x700ffc00
 8003100:	08002e35 	.word	0x08002e35

08003104 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8003104:	b5b0      	push	{r4, r5, r7, lr}
 8003106:	b08a      	sub	sp, #40	@ 0x28
 8003108:	af04      	add	r7, sp, #16
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3310      	adds	r3, #16
 8003116:	001c      	movs	r4, r3
 8003118:	68fd      	ldr	r5, [r7, #12]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	9103      	str	r1, [sp, #12]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	9102      	str	r1, [sp, #8]
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	9200      	str	r2, [sp, #0]
 8003130:	2300      	movs	r3, #0
 8003132:	002a      	movs	r2, r5
 8003134:	0021      	movs	r1, r4
 8003136:	f7fd fd59 	bl	8000bec <lfs_bd_prog>
 800313a:	0003      	movs	r3, r0
 800313c:	617b      	str	r3, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <lfs_dir_commitprog+0x44>
        return err;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	e010      	b.n	800316a <lfs_dir_commitprog+0x66>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	0018      	movs	r0, r3
 8003152:	f004 fd95 	bl	8007c80 <lfs_crc>
 8003156:	0002      	movs	r2, r0
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	18d2      	adds	r2, r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	605a      	str	r2, [r3, #4]
    return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b006      	add	sp, #24
 8003170:	bdb0      	pop	{r4, r5, r7, pc}

08003172 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8003172:	b5b0      	push	{r4, r5, r7, lr}
 8003174:	b08e      	sub	sp, #56	@ 0x38
 8003176:	af04      	add	r7, sp, #16
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f7fd ff8b 	bl	800109e <lfs_tag_dsize>
 8003188:	0003      	movs	r3, r0
 800318a:	623b      	str	r3, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	18d2      	adds	r2, r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d902      	bls.n	80031a2 <lfs_dir_commitattr+0x30>
        return LFS_ERR_NOSPC;
 800319c:	231c      	movs	r3, #28
 800319e:	425b      	negs	r3, r3
 80031a0:	e069      	b.n	8003276 <lfs_dir_commitattr+0x104>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	085a      	lsrs	r2, r3, #1
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4053      	eors	r3, r2
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7fd fa1c 	bl	80005ec <lfs_tobe32>
 80031b4:	0003      	movs	r3, r0
 80031b6:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80031b8:	2314      	movs	r3, #20
 80031ba:	18fa      	adds	r2, r7, r3
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	2304      	movs	r3, #4
 80031c2:	f7ff ff9f 	bl	8003104 <lfs_dir_commitprog>
 80031c6:	0003      	movs	r3, r0
 80031c8:	61fb      	str	r3, [r7, #28]
    if (err) {
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <lfs_dir_commitattr+0x62>
        return err;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	e050      	b.n	8003276 <lfs_dir_commitattr+0x104>
    }

    if (!(tag & 0x80000000)) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	db0d      	blt.n	80031f6 <lfs_dir_commitattr+0x84>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	3b04      	subs	r3, #4
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff ff8e 	bl	8003104 <lfs_dir_commitprog>
 80031e8:	0003      	movs	r3, r0
 80031ea:	61fb      	str	r3, [r7, #28]
        if (err) {
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d03b      	beq.n	800326a <lfs_dir_commitattr+0xf8>
            return err;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	e03f      	b.n	8003276 <lfs_dir_commitattr+0x104>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fe:	e02f      	b.n	8003260 <lfs_dir_commitattr+0xee>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003200:	68fc      	ldr	r4, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8003202:	6a3a      	ldr	r2, [r7, #32]
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003208:	1f1d      	subs	r5, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	6859      	ldr	r1, [r3, #4]
            err = lfs_bd_read(lfs,
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	18cb      	adds	r3, r1, r3
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	2101      	movs	r1, #1
 800321a:	9103      	str	r1, [sp, #12]
 800321c:	2113      	movs	r1, #19
 800321e:	1879      	adds	r1, r7, r1
 8003220:	9102      	str	r1, [sp, #8]
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	9200      	str	r2, [sp, #0]
 8003226:	002b      	movs	r3, r5
 8003228:	0022      	movs	r2, r4
 800322a:	2100      	movs	r1, #0
 800322c:	f7fd fa28 	bl	8000680 <lfs_bd_read>
 8003230:	0003      	movs	r3, r0
 8003232:	61fb      	str	r3, [r7, #28]
            if (err) {
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <lfs_dir_commitattr+0xcc>
                return err;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	e01b      	b.n	8003276 <lfs_dir_commitattr+0x104>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800323e:	2313      	movs	r3, #19
 8003240:	18fa      	adds	r2, r7, r3
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	2301      	movs	r3, #1
 8003248:	f7ff ff5c 	bl	8003104 <lfs_dir_commitprog>
 800324c:	0003      	movs	r3, r0
 800324e:	61fb      	str	r3, [r7, #28]
            if (err) {
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <lfs_dir_commitattr+0xe8>
                return err;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	e00d      	b.n	8003276 <lfs_dir_commitattr+0x104>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	3301      	adds	r3, #1
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	3b04      	subs	r3, #4
 8003264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003266:	429a      	cmp	r2, r3
 8003268:	d3ca      	bcc.n	8003200 <lfs_dir_commitattr+0x8e>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	085a      	lsrs	r2, r3, #1
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	609a      	str	r2, [r3, #8]
    return 0;
 8003274:	2300      	movs	r3, #0
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b00a      	add	sp, #40	@ 0x28
 800327c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003280 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003282:	b097      	sub	sp, #92	@ 0x5c
 8003284:	af04      	add	r7, sp, #16
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800328e:	3314      	adds	r3, #20
 8003290:	001a      	movs	r2, r3
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003296:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8003298:	0019      	movs	r1, r3
 800329a:	0010      	movs	r0, r2
 800329c:	f7fd f91e 	bl	80004dc <lfs_min>
 80032a0:	0002      	movs	r2, r0
            lfs->cfg->prog_size);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032a6:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 80032a8:	0019      	movs	r1, r3
 80032aa:	0010      	movs	r0, r2
 80032ac:	f7fd f936 	bl	800051c <lfs_alignup>
 80032b0:	0003      	movs	r3, r0
 80032b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80032bc:	e10c      	b.n	80034d8 <lfs_dir_commitcrc+0x258>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	3b04      	subs	r3, #4
 80032c8:	4aac      	ldr	r2, [pc, #688]	@ (800357c <lfs_dir_commitcrc+0x2fc>)
 80032ca:	0011      	movs	r1, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fd f905 	bl	80004dc <lfs_min>
 80032d2:	0002      	movs	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	18d3      	adds	r3, r2, r3
        lfs_off_t noff = (
 80032da:	3304      	adds	r3, #4
 80032dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80032de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d209      	bcs.n	80032fa <lfs_dir_commitcrc+0x7a>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	3b14      	subs	r3, #20
 80032ea:	001a      	movs	r2, r3
 80032ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ee:	0011      	movs	r1, r2
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7fd f8f3 	bl	80004dc <lfs_min>
 80032f6:	0003      	movs	r3, r0
 80032f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 80032fa:	251b      	movs	r5, #27
 80032fc:	197b      	adds	r3, r7, r5
 80032fe:	22ff      	movs	r2, #255	@ 0xff
 8003300:	701a      	strb	r2, [r3, #0]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8003302:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003306:	429a      	cmp	r2, r3
 8003308:	d361      	bcc.n	80033ce <lfs_dir_commitcrc+0x14e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800331a:	429a      	cmp	r2, r3
 800331c:	d857      	bhi.n	80033ce <lfs_dir_commitcrc+0x14e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800331e:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003324:	699c      	ldr	r4, [r3, #24]
            int err = lfs_bd_read(lfs,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	9203      	str	r2, [sp, #12]
 8003330:	197a      	adds	r2, r7, r5
 8003332:	9202      	str	r2, [sp, #8]
 8003334:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003336:	9201      	str	r2, [sp, #4]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	0023      	movs	r3, r4
 800333c:	000a      	movs	r2, r1
 800333e:	2100      	movs	r1, #0
 8003340:	f7fd f99e 	bl	8000680 <lfs_bd_read>
 8003344:	0003      	movs	r3, r0
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8003348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d004      	beq.n	8003358 <lfs_dir_commitcrc+0xd8>
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	3354      	adds	r3, #84	@ 0x54
 8003352:	d001      	beq.n	8003358 <lfs_dir_commitcrc+0xd8>
                return err;
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003356:	e10d      	b.n	8003574 <lfs_dir_commitcrc+0x2f4>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800335c:	699a      	ldr	r2, [r3, #24]
                struct lfs_fcrc fcrc = {
 800335e:	2108      	movs	r1, #8
 8003360:	187b      	adds	r3, r7, r1
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	187b      	adds	r3, r7, r1
 8003366:	2201      	movs	r2, #1
 8003368:	4252      	negs	r2, r2
 800336a:	605a      	str	r2, [r3, #4]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 800336c:	687c      	ldr	r4, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003372:	699d      	ldr	r5, [r3, #24]
                err = lfs_bd_crc(lfs,
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	187b      	adds	r3, r7, r1
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	1879      	adds	r1, r7, r1
 8003380:	3104      	adds	r1, #4
 8003382:	9103      	str	r1, [sp, #12]
 8003384:	9302      	str	r3, [sp, #8]
 8003386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	9200      	str	r2, [sp, #0]
 800338c:	002b      	movs	r3, r5
 800338e:	0022      	movs	r2, r4
 8003390:	2100      	movs	r1, #0
 8003392:	f7fd fb22 	bl	80009da <lfs_bd_crc>
 8003396:	0003      	movs	r3, r0
 8003398:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d004      	beq.n	80033aa <lfs_dir_commitcrc+0x12a>
 80033a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a2:	3354      	adds	r3, #84	@ 0x54
 80033a4:	d001      	beq.n	80033aa <lfs_dir_commitcrc+0x12a>
                    return err;
 80033a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a8:	e0e4      	b.n	8003574 <lfs_dir_commitcrc+0x2f4>
                }

                lfs_fcrc_tole32(&fcrc);
 80033aa:	2408      	movs	r4, #8
 80033ac:	193b      	adds	r3, r7, r4
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7fd ff7e 	bl	80012b0 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	4a72      	ldr	r2, [pc, #456]	@ (8003580 <lfs_dir_commitcrc+0x300>)
 80033b8:	6839      	ldr	r1, [r7, #0]
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fed9 	bl	8003172 <lfs_dir_commitattr>
 80033c0:	0003      	movs	r3, r0
 80033c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 80033c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <lfs_dir_commitcrc+0x14e>
                    return err;
 80033ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033cc:	e0d2      	b.n	8003574 <lfs_dir_commitcrc+0x2f4>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80033ce:	231b      	movs	r3, #27
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	09db      	lsrs	r3, r3, #7
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	22a0      	movs	r2, #160	@ 0xa0
 80033de:	00d2      	lsls	r2, r2, #3
 80033e0:	4694      	mov	ip, r2
 80033e2:	4463      	add	r3, ip
 80033e4:	051a      	lsls	r2, r3, #20
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033ec:	1acb      	subs	r3, r1, r3
 80033ee:	3b04      	subs	r3, #4
 80033f0:	4313      	orrs	r3, r2
 80033f2:	4a64      	ldr	r2, [pc, #400]	@ (8003584 <lfs_dir_commitcrc+0x304>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fe:	4053      	eors	r3, r2
 8003400:	0018      	movs	r0, r3
 8003402:	f7fd f8f3 	bl	80005ec <lfs_tobe32>
 8003406:	0002      	movs	r2, r0
 8003408:	2610      	movs	r6, #16
 800340a:	19bb      	adds	r3, r7, r6
 800340c:	601a      	str	r2, [r3, #0]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	19b9      	adds	r1, r7, r6
 8003414:	2204      	movs	r2, #4
 8003416:	0018      	movs	r0, r3
 8003418:	f004 fc32 	bl	8007c80 <lfs_crc>
 800341c:	0002      	movs	r2, r0
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	0018      	movs	r0, r3
 8003428:	f7fd f8c9 	bl	80005be <lfs_tole32>
 800342c:	0002      	movs	r2, r0
 800342e:	19bb      	adds	r3, r7, r6
 8003430:	605a      	str	r2, [r3, #4]

        int err = lfs_bd_prog(lfs,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3310      	adds	r3, #16
 8003436:	001c      	movs	r4, r3
 8003438:	687d      	ldr	r5, [r7, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	2108      	movs	r1, #8
 8003446:	9103      	str	r1, [sp, #12]
 8003448:	19b9      	adds	r1, r7, r6
 800344a:	9102      	str	r1, [sp, #8]
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	9200      	str	r2, [sp, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	002a      	movs	r2, r5
 8003454:	0021      	movs	r1, r4
 8003456:	f7fd fbc9 	bl	8000bec <lfs_bd_prog>
 800345a:	0003      	movs	r3, r0
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <lfs_dir_commitcrc+0x1e8>
            return err;
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	e085      	b.n	8003574 <lfs_dir_commitcrc+0x2f4>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <lfs_dir_commitcrc+0x1fc>
            off1 = commit->off + sizeof(lfs_tag_t);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003480:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8003482:	231b      	movs	r3, #27
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	43db      	mvns	r3, r3
 800348a:	061b      	lsls	r3, r3, #24
 800348c:	0fdb      	lsrs	r3, r3, #31
 800348e:	07da      	lsls	r2, r3, #31
 8003490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003492:	405a      	eors	r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	4252      	negs	r2, r2
 800349e:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 80034a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d208      	bcs.n	80034ba <lfs_dir_commitcrc+0x23a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b2:	18d3      	adds	r3, r2, r3
 80034b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d30e      	bcc.n	80034d8 <lfs_dir_commitcrc+0x258>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3310      	adds	r3, #16
 80034be:	0019      	movs	r1, r3
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	2300      	movs	r3, #0
 80034c6:	f7fd fb57 	bl	8000b78 <lfs_bd_sync>
 80034ca:	0003      	movs	r3, r0
 80034cc:	623b      	str	r3, [r7, #32]
            if (err) {
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <lfs_dir_commitcrc+0x258>
                return err;
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	e04d      	b.n	8003574 <lfs_dir_commitcrc+0x2f4>
    while (commit->off < end) {
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034de:	429a      	cmp	r2, r3
 80034e0:	d900      	bls.n	80034e4 <lfs_dir_commitcrc+0x264>
 80034e2:	e6ec      	b.n	80032be <lfs_dir_commitcrc+0x3e>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 80034ea:	2301      	movs	r3, #1
 80034ec:	425b      	negs	r3, r3
 80034ee:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 80034f0:	687c      	ldr	r4, [r7, #4]
 80034f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034f4:	1d1d      	adds	r5, r3, #4
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80034fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034fe:	1a8a      	subs	r2, r1, r2
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	211c      	movs	r1, #28
 8003504:	1879      	adds	r1, r7, r1
 8003506:	9103      	str	r1, [sp, #12]
 8003508:	9202      	str	r2, [sp, #8]
 800350a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800350c:	9201      	str	r2, [sp, #4]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	002b      	movs	r3, r5
 8003512:	0022      	movs	r2, r4
 8003514:	2100      	movs	r1, #0
 8003516:	f7fd fa60 	bl	80009da <lfs_bd_crc>
 800351a:	0003      	movs	r3, r0
 800351c:	633b      	str	r3, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <lfs_dir_commitcrc+0x2a8>
        return err;
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	e025      	b.n	8003574 <lfs_dir_commitcrc+0x2f4>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800352c:	429a      	cmp	r2, r3
 800352e:	d002      	beq.n	8003536 <lfs_dir_commitcrc+0x2b6>
        return LFS_ERR_CORRUPT;
 8003530:	2354      	movs	r3, #84	@ 0x54
 8003532:	425b      	negs	r3, r3
 8003534:	e01e      	b.n	8003574 <lfs_dir_commitcrc+0x2f4>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	221c      	movs	r2, #28
 8003540:	18ba      	adds	r2, r7, r2
 8003542:	9203      	str	r2, [sp, #12]
 8003544:	2204      	movs	r2, #4
 8003546:	9202      	str	r2, [sp, #8]
 8003548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800354a:	9201      	str	r2, [sp, #4]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2304      	movs	r3, #4
 8003550:	000a      	movs	r2, r1
 8003552:	2100      	movs	r1, #0
 8003554:	f7fd fa41 	bl	80009da <lfs_bd_crc>
 8003558:	0003      	movs	r3, r0
 800355a:	633b      	str	r3, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <lfs_dir_commitcrc+0x2e6>
        return err;
 8003562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003564:	e006      	b.n	8003574 <lfs_dir_commitcrc+0x2f4>
    }

    if (crc != 0) {
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <lfs_dir_commitcrc+0x2f2>
        return LFS_ERR_CORRUPT;
 800356c:	2354      	movs	r3, #84	@ 0x54
 800356e:	425b      	negs	r3, r3
 8003570:	e000      	b.n	8003574 <lfs_dir_commitcrc+0x2f4>
    }

    return 0;
 8003572:	2300      	movs	r3, #0
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b013      	add	sp, #76	@ 0x4c
 800357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800357c:	000003fe 	.word	0x000003fe
 8003580:	5ffffc08 	.word	0x5ffffc08
 8003584:	000ffc00 	.word	0x000ffc00

08003588 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b08b      	sub	sp, #44	@ 0x2c
 800358c:	af04      	add	r7, sp, #16
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e01b      	b.n	80035d0 <lfs_dir_alloc+0x48>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3301      	adds	r3, #1
 800359c:	4a39      	ldr	r2, [pc, #228]	@ (8003684 <lfs_dir_alloc+0xfc>)
 800359e:	4013      	ands	r3, r2
 80035a0:	d504      	bpl.n	80035ac <lfs_dir_alloc+0x24>
 80035a2:	3b01      	subs	r3, #1
 80035a4:	2202      	movs	r2, #2
 80035a6:	4252      	negs	r2, r2
 80035a8:	4313      	orrs	r3, r2
 80035aa:	3301      	adds	r3, #1
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	18d2      	adds	r2, r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0011      	movs	r1, r2
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fe f83e 	bl	8001638 <lfs_alloc>
 80035bc:	0003      	movs	r3, r0
 80035be:	60fb      	str	r3, [r7, #12]
        if (err) {
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <lfs_dir_alloc+0x42>
            return err;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	e058      	b.n	800367c <lfs_dir_alloc+0xf4>
    for (int i = 0; i < 2; i++) {
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	3301      	adds	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	dde0      	ble.n	8003598 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2200      	movs	r2, #0
 80035da:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	2404      	movs	r4, #4
 80035ea:	9403      	str	r4, [sp, #12]
 80035ec:	9202      	str	r2, [sp, #8]
 80035ee:	2200      	movs	r2, #0
 80035f0:	9201      	str	r2, [sp, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2304      	movs	r3, #4
 80035f6:	000a      	movs	r2, r1
 80035f8:	2100      	movs	r1, #0
 80035fa:	f7fd f841 	bl	8000680 <lfs_bd_read>
 80035fe:	0003      	movs	r3, r0
 8003600:	613b      	str	r3, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0018      	movs	r0, r3
 8003608:	f7fc ffd0 	bl	80005ac <lfs_fromle32>
 800360c:	0002      	movs	r2, r0
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <lfs_dir_alloc+0x9a>
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	3354      	adds	r3, #84	@ 0x54
 800361c:	d001      	beq.n	8003622 <lfs_dir_alloc+0x9a>
        return err;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	e02c      	b.n	800367c <lfs_dir_alloc+0xf4>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	2b00      	cmp	r3, #0
 800362a:	dd0e      	ble.n	800364a <lfs_dir_alloc+0xc2>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	3301      	adds	r3, #1
 8003638:	2101      	movs	r1, #1
 800363a:	430b      	orrs	r3, r1
 800363c:	0019      	movs	r1, r3
 800363e:	0010      	movs	r0, r2
 8003640:	f7fc ff6c 	bl	800051c <lfs_alignup>
 8003644:	0002      	movs	r2, r0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2204      	movs	r2, #4
 800364e:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2201      	movs	r2, #1
 8003654:	4252      	negs	r2, r2
 8003656:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2200      	movs	r2, #0
 800365c:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2201      	movs	r2, #1
 8003662:	4252      	negs	r2, r2
 8003664:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2201      	movs	r2, #1
 800366a:	4252      	negs	r2, r2
 800366c:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2200      	movs	r2, #0
 8003672:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800367a:	2300      	movs	r3, #0
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b007      	add	sp, #28
 8003682:	bd90      	pop	{r4, r7, pc}
 8003684:	80000001 	.word	0x80000001

08003688 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b093      	sub	sp, #76	@ 0x4c
 800368c:	af04      	add	r7, sp, #16
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003696:	2310      	movs	r3, #16
 8003698:	18fa      	adds	r2, r7, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	0011      	movs	r1, r2
 800369e:	0018      	movs	r0, r3
 80036a0:	f7ff ff72 	bl	8003588 <lfs_dir_alloc>
 80036a4:	0003      	movs	r3, r0
 80036a6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (err) {
 80036a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <lfs_dir_split+0x2a>
        return err;
 80036ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b0:	e047      	b.n	8003742 <lfs_dir_split+0xba>
    }

    tail.split = dir->split;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	7dda      	ldrb	r2, [r3, #23]
 80036b6:	2110      	movs	r1, #16
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	75da      	strb	r2, [r3, #23]
    tail.tail[0] = dir->tail[0];
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	187b      	adds	r3, r7, r1
 80036c2:	619a      	str	r2, [r3, #24]
    tail.tail[1] = dir->tail[1];
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	187b      	adds	r3, r7, r1
 80036ca:	61da      	str	r2, [r3, #28]

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80036cc:	683c      	ldr	r4, [r7, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	1879      	adds	r1, r7, r1
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	2350      	movs	r3, #80	@ 0x50
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	9302      	str	r3, [sp, #8]
 80036dc:	234c      	movs	r3, #76	@ 0x4c
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	0023      	movs	r3, r4
 80036ea:	f000 f87f 	bl	80037ec <lfs_dir_compact>
 80036ee:	0003      	movs	r3, r0
 80036f0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (res < 0) {
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da01      	bge.n	80036fc <lfs_dir_split+0x74>
        return res;
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	e022      	b.n	8003742 <lfs_dir_split+0xba>
    }

    dir->tail[0] = tail.pair[0];
 80036fc:	2410      	movs	r4, #16
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003706:	193b      	adds	r3, r7, r4
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2201      	movs	r2, #1
 8003712:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3320      	adds	r3, #32
 800371a:	0019      	movs	r1, r3
 800371c:	0010      	movs	r0, r2
 800371e:	f7fd fbbd 	bl	8000e9c <lfs_pair_cmp>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d10c      	bne.n	8003740 <lfs_dir_split+0xb8>
 8003726:	234c      	movs	r3, #76	@ 0x4c
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <lfs_dir_split+0xb8>
        lfs->root[0] = tail.pair[0];
 8003730:	193b      	adds	r3, r7, r4
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8003738:	193b      	adds	r3, r7, r4
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 8003740:	2300      	movs	r3, #0
}
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b00f      	add	sp, #60	@ 0x3c
 8003748:	bd90      	pop	{r4, r7, pc}

0800374a <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	0018      	movs	r0, r3
 800375e:	f7fd fc9e 	bl	800109e <lfs_tag_dsize>
 8003762:	0002      	movs	r2, r0
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	18d2      	adds	r2, r2, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	601a      	str	r2, [r3, #0]
    return 0;
 800376e:	2300      	movs	r3, #0
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b006      	add	sp, #24
 8003776:	bd80      	pop	{r7, pc}

08003778 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	f7ff fced 	bl	8003172 <lfs_dir_commitattr>
 8003798:	0003      	movs	r3, r0
}
 800379a:	0018      	movs	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	b006      	add	sp, #24
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	dd10      	ble.n	80037d8 <lfs_dir_needsrelocation+0x36>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	3301      	adds	r3, #1
 80037c4:	2101      	movs	r1, #1
 80037c6:	430b      	orrs	r3, r1
 80037c8:	0019      	movs	r1, r3
 80037ca:	0010      	movs	r0, r2
 80037cc:	f7fc fd30 	bl	8000230 <__aeabi_uidivmod>
 80037d0:	1e0b      	subs	r3, r1, #0
 80037d2:	d101      	bne.n	80037d8 <lfs_dir_needsrelocation+0x36>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <lfs_dir_needsrelocation+0x38>
 80037d8:	2300      	movs	r3, #0
 80037da:	1c1a      	adds	r2, r3, #0
 80037dc:	2301      	movs	r3, #1
 80037de:	4013      	ands	r3, r2
 80037e0:	b2db      	uxtb	r3, r3
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b002      	add	sp, #8
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ee:	b0a5      	sub	sp, #148	@ 0x94
 80037f0:	af0a      	add	r7, sp, #40	@ 0x28
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80037fa:	2367      	movs	r3, #103	@ 0x67
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003802:	2566      	movs	r5, #102	@ 0x66
 8003804:	197c      	adds	r4, r7, r5
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	0011      	movs	r1, r2
 800380c:	0018      	movs	r0, r3
 800380e:	f7ff ffc8 	bl	80037a2 <lfs_dir_needsrelocation>
 8003812:	0003      	movs	r3, r0
 8003814:	7023      	strb	r3, [r4, #0]

    // increment revision count
    dir->rev += 1;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003820:	197b      	adds	r3, r7, r5
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00f      	beq.n	8003848 <lfs_dir_compact+0x5c>
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	2054      	movs	r0, #84	@ 0x54
 800382c:	183b      	adds	r3, r7, r0
 800382e:	2100      	movs	r1, #0
 8003830:	6019      	str	r1, [r3, #0]
 8003832:	183b      	adds	r3, r7, r0
 8003834:	2101      	movs	r1, #1
 8003836:	6059      	str	r1, [r3, #4]
 8003838:	183b      	adds	r3, r7, r0
 800383a:	0019      	movs	r1, r3
 800383c:	0010      	movs	r0, r2
 800383e:	f7fd fb2d 	bl	8000e9c <lfs_pair_cmp>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d000      	beq.n	8003848 <lfs_dir_compact+0x5c>
 8003846:	e17a      	b.n	8003b3e <lfs_dir_compact+0x352>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	685a      	ldr	r2, [r3, #4]
            struct lfs_commit commit = {
 800384c:	213c      	movs	r1, #60	@ 0x3c
 800384e:	187b      	adds	r3, r7, r1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2200      	movs	r2, #0
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	187b      	adds	r3, r7, r1
 800385a:	2201      	movs	r2, #1
 800385c:	4252      	negs	r2, r2
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	187b      	adds	r3, r7, r1
 8003862:	2201      	movs	r2, #1
 8003864:	4252      	negs	r2, r2
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	187b      	adds	r3, r7, r1
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <lfs_dir_compact+0x98>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	3b08      	subs	r3, #8
 8003880:	001a      	movs	r2, r3
 8003882:	e004      	b.n	800388e <lfs_dir_compact+0xa2>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	3b08      	subs	r3, #8
 800388c:	001a      	movs	r2, r3
            struct lfs_commit commit = {
 800388e:	233c      	movs	r3, #60	@ 0x3c
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	615a      	str	r2, [r3, #20]
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	0011      	movs	r1, r2
 800389c:	0018      	movs	r0, r3
 800389e:	f7fd fa59 	bl	8000d54 <lfs_bd_erase>
 80038a2:	0003      	movs	r3, r0
 80038a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if (err) {
 80038a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <lfs_dir_compact+0xcc>
                if (err == LFS_ERR_CORRUPT) {
 80038ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ae:	3354      	adds	r3, #84	@ 0x54
 80038b0:	d100      	bne.n	80038b4 <lfs_dir_compact+0xc8>
 80038b2:	e146      	b.n	8003b42 <lfs_dir_compact+0x356>
                    goto relocate;
                }
                return err;
 80038b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038b6:	e1ae      	b.n	8003c16 <lfs_dir_compact+0x42a>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	0018      	movs	r0, r3
 80038be:	f7fc fe7e 	bl	80005be <lfs_tole32>
 80038c2:	0002      	movs	r2, r0
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3308      	adds	r3, #8
 80038cc:	001a      	movs	r2, r3
            err = lfs_dir_commitprog(lfs, &commit,
 80038ce:	233c      	movs	r3, #60	@ 0x3c
 80038d0:	18f9      	adds	r1, r7, r3
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	2304      	movs	r3, #4
 80038d6:	f7ff fc15 	bl	8003104 <lfs_dir_commitprog>
 80038da:	0003      	movs	r3, r0
 80038dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7fc fe62 	bl	80005ac <lfs_fromle32>
 80038e8:	0002      	movs	r2, r0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	609a      	str	r2, [r3, #8]
            if (err) {
 80038ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <lfs_dir_compact+0x114>
                if (err == LFS_ERR_CORRUPT) {
 80038f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038f6:	3354      	adds	r3, #84	@ 0x54
 80038f8:	d100      	bne.n	80038fc <lfs_dir_compact+0x110>
 80038fa:	e124      	b.n	8003b46 <lfs_dir_compact+0x35a>
                    goto relocate;
                }
                return err;
 80038fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038fe:	e18a      	b.n	8003c16 <lfs_dir_compact+0x42a>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003900:	267c      	movs	r6, #124	@ 0x7c
 8003902:	2208      	movs	r2, #8
 8003904:	18b3      	adds	r3, r6, r2
 8003906:	19db      	adds	r3, r3, r7
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	425b      	negs	r3, r3
 800390c:	b29b      	uxth	r3, r3
 800390e:	b21a      	sxth	r2, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003910:	2534      	movs	r5, #52	@ 0x34
 8003912:	197b      	adds	r3, r7, r5
 8003914:	68f9      	ldr	r1, [r7, #12]
 8003916:	6019      	str	r1, [r3, #0]
 8003918:	197b      	adds	r3, r7, r5
 800391a:	213c      	movs	r1, #60	@ 0x3c
 800391c:	1879      	adds	r1, r7, r1
 800391e:	6059      	str	r1, [r3, #4]
            err = lfs_dir_traverse(lfs,
 8003920:	2301      	movs	r3, #1
 8003922:	425c      	negs	r4, r3
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	18f9      	adds	r1, r7, r3
 8003928:	6809      	ldr	r1, [r1, #0]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	197b      	adds	r3, r7, r5
 800392e:	9308      	str	r3, [sp, #32]
 8003930:	4bbb      	ldr	r3, [pc, #748]	@ (8003c20 <lfs_dir_compact+0x434>)
 8003932:	9307      	str	r3, [sp, #28]
 8003934:	9206      	str	r2, [sp, #24]
 8003936:	2380      	movs	r3, #128	@ 0x80
 8003938:	2208      	movs	r2, #8
 800393a:	189b      	adds	r3, r3, r2
 800393c:	19db      	adds	r3, r3, r7
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	9305      	str	r3, [sp, #20]
 8003942:	18b3      	adds	r3, r6, r2
 8003944:	19db      	adds	r3, r3, r7
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	9304      	str	r3, [sp, #16]
 800394a:	2300      	movs	r3, #0
 800394c:	9303      	str	r3, [sp, #12]
 800394e:	4bb5      	ldr	r3, [pc, #724]	@ (8003c24 <lfs_dir_compact+0x438>)
 8003950:	9302      	str	r3, [sp, #8]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	0023      	movs	r3, r4
 800395c:	2200      	movs	r2, #0
 800395e:	f7fe f961 	bl	8001c24 <lfs_dir_traverse>
 8003962:	0003      	movs	r3, r0
 8003964:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 8003966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <lfs_dir_compact+0x18c>
                if (err == LFS_ERR_CORRUPT) {
 800396c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396e:	3354      	adds	r3, #84	@ 0x54
 8003970:	d100      	bne.n	8003974 <lfs_dir_compact+0x188>
 8003972:	e0ea      	b.n	8003b4a <lfs_dir_compact+0x35e>
                    goto relocate;
                }
                return err;
 8003974:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003976:	e14e      	b.n	8003c16 <lfs_dir_compact+0x42a>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	3318      	adds	r3, #24
 800397c:	0018      	movs	r0, r3
 800397e:	f7fd fa75 	bl	8000e6c <lfs_pair_isnull>
 8003982:	0003      	movs	r3, r0
 8003984:	001a      	movs	r2, r3
 8003986:	2301      	movs	r3, #1
 8003988:	4053      	eors	r3, r2
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d024      	beq.n	80039da <lfs_dir_compact+0x1ee>
                lfs_pair_tole32(dir->tail);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	3318      	adds	r3, #24
 8003994:	0018      	movs	r0, r3
 8003996:	f7fd faef 	bl	8000f78 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	7ddb      	ldrb	r3, [r3, #23]
 800399e:	22c0      	movs	r2, #192	@ 0xc0
 80039a0:	00d2      	lsls	r2, r2, #3
 80039a2:	4694      	mov	ip, r2
 80039a4:	4463      	add	r3, ip
 80039a6:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80039a8:	4a9f      	ldr	r2, [pc, #636]	@ (8003c28 <lfs_dir_compact+0x43c>)
 80039aa:	431a      	orrs	r2, r3
                        dir->tail);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80039b0:	213c      	movs	r1, #60	@ 0x3c
 80039b2:	1879      	adds	r1, r7, r1
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff fbdc 	bl	8003172 <lfs_dir_commitattr>
 80039ba:	0003      	movs	r3, r0
 80039bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3318      	adds	r3, #24
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fd fabe 	bl	8000f44 <lfs_pair_fromle32>
                if (err) {
 80039c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <lfs_dir_compact+0x1ee>
                    if (err == LFS_ERR_CORRUPT) {
 80039ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039d0:	3354      	adds	r3, #84	@ 0x54
 80039d2:	d100      	bne.n	80039d6 <lfs_dir_compact+0x1ea>
 80039d4:	e0bb      	b.n	8003b4e <lfs_dir_compact+0x362>
                        goto relocate;
                    }
                    return err;
 80039d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039d8:	e11d      	b.n	8003c16 <lfs_dir_compact+0x42a>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 80039da:	2428      	movs	r4, #40	@ 0x28
 80039dc:	193b      	adds	r3, r7, r4
 80039de:	0018      	movs	r0, r3
 80039e0:	230c      	movs	r3, #12
 80039e2:	001a      	movs	r2, r3
 80039e4:	2100      	movs	r1, #0
 80039e6:	f006 ff0d 	bl	800a804 <memset>
            if (!relocated) {
 80039ea:	2367      	movs	r3, #103	@ 0x67
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2201      	movs	r2, #1
 80039f2:	4053      	eors	r3, r2
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00f      	beq.n	8003a1a <lfs_dir_compact+0x22e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	333c      	adds	r3, #60	@ 0x3c
 80039fe:	001a      	movs	r2, r3
 8003a00:	193b      	adds	r3, r7, r4
 8003a02:	0011      	movs	r1, r2
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7fd fb5f 	bl	80010c8 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3330      	adds	r3, #48	@ 0x30
 8003a0e:	001a      	movs	r2, r3
 8003a10:	193b      	adds	r3, r7, r4
 8003a12:	0011      	movs	r1, r2
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7fd fb57 	bl	80010c8 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3348      	adds	r3, #72	@ 0x48
 8003a1e:	001a      	movs	r2, r3
 8003a20:	2428      	movs	r4, #40	@ 0x28
 8003a22:	193b      	adds	r3, r7, r4
 8003a24:	0011      	movs	r1, r2
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7fd fb4e 	bl	80010c8 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003a2c:	0021      	movs	r1, r4
 8003a2e:	187b      	adds	r3, r7, r1
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	0a9b      	lsrs	r3, r3, #10
 8003a34:	029a      	lsls	r2, r3, #10
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	601a      	str	r2, [r3, #0]

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003a3a:	187a      	adds	r2, r7, r1
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7ff f9c5 	bl	8002dd0 <lfs_dir_getgstate>
 8003a46:	0003      	movs	r3, r0
 8003a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if (err) {
 8003a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <lfs_dir_compact+0x268>
                return err;
 8003a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a52:	e0e0      	b.n	8003c16 <lfs_dir_compact+0x42a>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003a54:	2428      	movs	r4, #40	@ 0x28
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7fd fb53 	bl	8001104 <lfs_gstate_iszero>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	001a      	movs	r2, r3
 8003a62:	2301      	movs	r3, #1
 8003a64:	4053      	eors	r3, r2
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d014      	beq.n	8003a96 <lfs_dir_compact+0x2aa>
                lfs_gstate_tole32(&delta);
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7fd fbe6 	bl	8001240 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	4a6d      	ldr	r2, [pc, #436]	@ (8003c2c <lfs_dir_compact+0x440>)
 8003a78:	213c      	movs	r1, #60	@ 0x3c
 8003a7a:	1879      	adds	r1, r7, r1
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f7ff fb78 	bl	8003172 <lfs_dir_commitattr>
 8003a82:	0003      	movs	r3, r0
 8003a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <lfs_dir_compact+0x2aa>
                    if (err == LFS_ERR_CORRUPT) {
 8003a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a8e:	3354      	adds	r3, #84	@ 0x54
 8003a90:	d05f      	beq.n	8003b52 <lfs_dir_compact+0x366>
                        goto relocate;
                    }
                    return err;
 8003a92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a94:	e0bf      	b.n	8003c16 <lfs_dir_compact+0x42a>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8003a96:	233c      	movs	r3, #60	@ 0x3c
 8003a98:	18fa      	adds	r2, r7, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	0011      	movs	r1, r2
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7ff fbee 	bl	8003280 <lfs_dir_commitcrc>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if (err) {
 8003aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <lfs_dir_compact+0x2cc>
                if (err == LFS_ERR_CORRUPT) {
 8003aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ab0:	3354      	adds	r3, #84	@ 0x54
 8003ab2:	d050      	beq.n	8003b56 <lfs_dir_compact+0x36a>
                    goto relocate;
                }
                return err;
 8003ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ab6:	e0ae      	b.n	8003c16 <lfs_dir_compact+0x42a>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003ab8:	233c      	movs	r3, #60	@ 0x3c
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	0010      	movs	r0, r2
 8003ac8:	f7fc fbb2 	bl	8000230 <__aeabi_uidivmod>
 8003acc:	1e0b      	subs	r3, r1, #0
 8003ace:	d005      	beq.n	8003adc <lfs_dir_compact+0x2f0>
 8003ad0:	4b57      	ldr	r3, [pc, #348]	@ (8003c30 <lfs_dir_compact+0x444>)
 8003ad2:	4a58      	ldr	r2, [pc, #352]	@ (8003c34 <lfs_dir_compact+0x448>)
 8003ad4:	4958      	ldr	r1, [pc, #352]	@ (8003c38 <lfs_dir_compact+0x44c>)
 8003ad6:	4859      	ldr	r0, [pc, #356]	@ (8003c3c <lfs_dir_compact+0x450>)
 8003ad8:	f006 fc72 	bl	800a3c0 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f7fd f9b1 	bl	8000e46 <lfs_pair_swap>
            dir->count = end - begin;
 8003ae4:	2380      	movs	r3, #128	@ 0x80
 8003ae6:	2108      	movs	r1, #8
 8003ae8:	185b      	adds	r3, r3, r1
 8003aea:	19da      	adds	r2, r3, r7
 8003aec:	237c      	movs	r3, #124	@ 0x7c
 8003aee:	185b      	adds	r3, r3, r1
 8003af0:	19db      	adds	r3, r3, r7
 8003af2:	8812      	ldrh	r2, [r2, #0]
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003afe:	213c      	movs	r1, #60	@ 0x3c
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3348      	adds	r3, #72	@ 0x48
 8003b14:	220c      	movs	r2, #12
 8003b16:	2100      	movs	r1, #0
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f006 fe73 	bl	800a804 <memset>
            if (!relocated) {
 8003b1e:	2367      	movs	r3, #103	@ 0x67
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	4053      	eors	r3, r2
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d100      	bne.n	8003b30 <lfs_dir_compact+0x344>
 8003b2e:	e06e      	b.n	8003c0e <lfs_dir_compact+0x422>
                lfs->gdisk = lfs->gstate;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	333c      	adds	r3, #60	@ 0x3c
 8003b36:	3230      	adds	r2, #48	@ 0x30
 8003b38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b3a:	c313      	stmia	r3!, {r0, r1, r4}
            }
        }
        break;
 8003b3c:	e067      	b.n	8003c0e <lfs_dir_compact+0x422>
        goto relocate;
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	e00a      	b.n	8003b58 <lfs_dir_compact+0x36c>
                    goto relocate;
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	e008      	b.n	8003b58 <lfs_dir_compact+0x36c>
                    goto relocate;
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	e006      	b.n	8003b58 <lfs_dir_compact+0x36c>
                    goto relocate;
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	e004      	b.n	8003b58 <lfs_dir_compact+0x36c>
                        goto relocate;
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	e002      	b.n	8003b58 <lfs_dir_compact+0x36c>
                        goto relocate;
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	e000      	b.n	8003b58 <lfs_dir_compact+0x36c>
                    goto relocate;
 8003b56:	46c0      	nop			@ (mov r8, r8)

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003b58:	2367      	movs	r3, #103	@ 0x67
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
        lfs_cache_drop(lfs, &lfs->pcache);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3310      	adds	r3, #16
 8003b64:	001a      	movs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	0011      	movs	r1, r2
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7fc fd64 	bl	8000638 <lfs_cache_drop>
        if (!tired) {
 8003b70:	2366      	movs	r3, #102	@ 0x66
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2201      	movs	r2, #1
 8003b78:	4053      	eors	r3, r2
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <lfs_dir_compact+0x3aa>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	4c2e      	ldr	r4, [pc, #184]	@ (8003c40 <lfs_dir_compact+0x454>)
 8003b86:	492d      	ldr	r1, [pc, #180]	@ (8003c3c <lfs_dir_compact+0x450>)
 8003b88:	482e      	ldr	r0, [pc, #184]	@ (8003c44 <lfs_dir_compact+0x458>)
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c48 <lfs_dir_compact+0x45c>)
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	0013      	movs	r3, r2
 8003b90:	0022      	movs	r2, r4
 8003b92:	f006 fdcd 	bl	800a730 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	2014      	movs	r0, #20
 8003b9a:	183b      	adds	r3, r7, r0
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	6019      	str	r1, [r3, #0]
 8003ba0:	183b      	adds	r3, r7, r0
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	6059      	str	r1, [r3, #4]
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	0019      	movs	r1, r3
 8003baa:	0010      	movs	r0, r2
 8003bac:	f7fd f976 	bl	8000e9c <lfs_pair_cmp>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d10d      	bne.n	8003bd0 <lfs_dir_compact+0x3e4>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	4c24      	ldr	r4, [pc, #144]	@ (8003c4c <lfs_dir_compact+0x460>)
 8003bba:	4920      	ldr	r1, [pc, #128]	@ (8003c3c <lfs_dir_compact+0x450>)
 8003bbc:	4824      	ldr	r0, [pc, #144]	@ (8003c50 <lfs_dir_compact+0x464>)
 8003bbe:	4b22      	ldr	r3, [pc, #136]	@ (8003c48 <lfs_dir_compact+0x45c>)
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	0013      	movs	r3, r2
 8003bc4:	0022      	movs	r2, r4
 8003bc6:	f006 fdb3 	bl	800a730 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003bca:	231c      	movs	r3, #28
 8003bcc:	425b      	negs	r3, r3
 8003bce:	e022      	b.n	8003c16 <lfs_dir_compact+0x42a>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7fd fd2d 	bl	8001638 <lfs_alloc>
 8003bde:	0003      	movs	r3, r0
 8003be0:	663b      	str	r3, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00c      	beq.n	8003c02 <lfs_dir_compact+0x416>
 8003be8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bea:	331c      	adds	r3, #28
 8003bec:	d107      	bne.n	8003bfe <lfs_dir_compact+0x412>
 8003bee:	2366      	movs	r3, #102	@ 0x66
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	4053      	eors	r3, r2
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <lfs_dir_compact+0x416>
            return err;
 8003bfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c00:	e009      	b.n	8003c16 <lfs_dir_compact+0x42a>
        }

        tired = false;
 8003c02:	2366      	movs	r3, #102	@ 0x66
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
        continue;
 8003c0a:	46c0      	nop			@ (mov r8, r8)
    while (true) {
 8003c0c:	e61c      	b.n	8003848 <lfs_dir_compact+0x5c>
        break;
 8003c0e:	46c0      	nop			@ (mov r8, r8)
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003c10:	2367      	movs	r3, #103	@ 0x67
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	781b      	ldrb	r3, [r3, #0]
}
 8003c16:	0018      	movs	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b01b      	add	sp, #108	@ 0x6c
 8003c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	08003779 	.word	0x08003779
 8003c24:	400ffc00 	.word	0x400ffc00
 8003c28:	000ffc08 	.word	0x000ffc08
 8003c2c:	7ffffc0c 	.word	0x7ffffc0c
 8003c30:	0800b5dc 	.word	0x0800b5dc
 8003c34:	0800c310 	.word	0x0800c310
 8003c38:	00000821 	.word	0x00000821
 8003c3c:	0800b478 	.word	0x0800b478
 8003c40:	00000833 	.word	0x00000833
 8003c44:	0800b604 	.word	0x0800b604
 8003c48:	0800b588 	.word	0x0800b588
 8003c4c:	00000838 	.word	0x00000838
 8003c50:	0800b628 	.word	0x0800b628

08003c54 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003c54:	b5b0      	push	{r4, r5, r7, lr}
 8003c56:	b098      	sub	sp, #96	@ 0x60
 8003c58:	af0a      	add	r7, sp, #40	@ 0x28
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003c62:	234c      	movs	r3, #76	@ 0x4c
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 8003c6a:	e05d      	b.n	8003d28 <lfs_dir_splittingcompact+0xd4>
            lfs_size_t size = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
            int err = lfs_dir_traverse(lfs,
 8003c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c76:	b292      	uxth	r2, r2
 8003c78:	4252      	negs	r2, r2
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	b212      	sxth	r2, r2
 8003c7e:	2101      	movs	r1, #1
 8003c80:	424d      	negs	r5, r1
 8003c82:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	211c      	movs	r1, #28
 8003c88:	1879      	adds	r1, r7, r1
 8003c8a:	9108      	str	r1, [sp, #32]
 8003c8c:	4982      	ldr	r1, [pc, #520]	@ (8003e98 <lfs_dir_splittingcompact+0x244>)
 8003c8e:	9107      	str	r1, [sp, #28]
 8003c90:	9206      	str	r2, [sp, #24]
 8003c92:	2250      	movs	r2, #80	@ 0x50
 8003c94:	18ba      	adds	r2, r7, r2
 8003c96:	8812      	ldrh	r2, [r2, #0]
 8003c98:	9205      	str	r2, [sp, #20]
 8003c9a:	9304      	str	r3, [sp, #16]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	9303      	str	r3, [sp, #12]
 8003ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8003e9c <lfs_dir_splittingcompact+0x248>)
 8003ca2:	9302      	str	r3, [sp, #8]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	002b      	movs	r3, r5
 8003cae:	2200      	movs	r2, #0
 8003cb0:	0021      	movs	r1, r4
 8003cb2:	f7fd ffb7 	bl	8001c24 <lfs_dir_traverse>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	633b      	str	r3, [r7, #48]	@ 0x30
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <lfs_dir_splittingcompact+0x70>
                return err;
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	e0e4      	b.n	8003e8e <lfs_dir_splittingcompact+0x23a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    ? lfs->cfg->metadata_max
                    : lfs->cfg->block_size;
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <lfs_dir_splittingcompact+0x82>
                    ? lfs->cfg->metadata_max
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                    : lfs->cfg->block_size;
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd4:	e002      	b.n	8003cdc <lfs_dir_splittingcompact+0x88>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cda:	69db      	ldr	r3, [r3, #28]
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (end - split < 0xff
 8003cde:	2350      	movs	r3, #80	@ 0x50
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	881a      	ldrh	r2, [r3, #0]
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2bfe      	cmp	r3, #254	@ 0xfe
 8003cea:	d814      	bhi.n	8003d16 <lfs_dir_splittingcompact+0xc2>
                    && size <= lfs_min(
 8003cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cee:	3b28      	subs	r3, #40	@ 0x28
 8003cf0:	001c      	movs	r4, r3
 8003cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf4:	085a      	lsrs	r2, r3, #1
                        metadata_max - 40,
                        lfs_alignup(
                            metadata_max/2,
                            lfs->cfg->prog_size))) {
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cfa:	699b      	ldr	r3, [r3, #24]
                    && size <= lfs_min(
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	0010      	movs	r0, r2
 8003d00:	f7fc fc0c 	bl	800051c <lfs_alignup>
 8003d04:	0003      	movs	r3, r0
 8003d06:	0019      	movs	r1, r3
 8003d08:	0020      	movs	r0, r4
 8003d0a:	f7fc fbe7 	bl	80004dc <lfs_min>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d210      	bcs.n	8003d38 <lfs_dir_splittingcompact+0xe4>
                break;
            }

            split = split + ((end - split) / 2);
 8003d16:	2350      	movs	r3, #80	@ 0x50
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d24:	18d3      	adds	r3, r2, r3
 8003d26:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 8003d28:	2350      	movs	r3, #80	@ 0x50
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d89a      	bhi.n	8003c6c <lfs_dir_splittingcompact+0x18>
 8003d36:	e000      	b.n	8003d3a <lfs_dir_splittingcompact+0xe6>
                break;
 8003d38:	46c0      	nop			@ (mov r8, r8)
        }

        if (split == begin) {
 8003d3a:	234c      	movs	r3, #76	@ 0x4c
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d031      	beq.n	8003daa <lfs_dir_splittingcompact+0x156>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	683d      	ldr	r5, [r7, #0]
 8003d4c:	687c      	ldr	r4, [r7, #4]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	2250      	movs	r2, #80	@ 0x50
 8003d54:	18ba      	adds	r2, r7, r2
 8003d56:	8812      	ldrh	r2, [r2, #0]
 8003d58:	9202      	str	r2, [sp, #8]
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	002b      	movs	r3, r5
 8003d62:	0022      	movs	r2, r4
 8003d64:	f7ff fc90 	bl	8003688 <lfs_dir_split>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d004      	beq.n	8003d7c <lfs_dir_splittingcompact+0x128>
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	331c      	adds	r3, #28
 8003d76:	d001      	beq.n	8003d7c <lfs_dir_splittingcompact+0x128>
            return err;
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	e088      	b.n	8003e8e <lfs_dir_splittingcompact+0x23a>
        }

        if (err) {
 8003d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00e      	beq.n	8003da0 <lfs_dir_splittingcompact+0x14c>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	681c      	ldr	r4, [r3, #0]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4d45      	ldr	r5, [pc, #276]	@ (8003ea0 <lfs_dir_splittingcompact+0x24c>)
 8003d8c:	4945      	ldr	r1, [pc, #276]	@ (8003ea4 <lfs_dir_splittingcompact+0x250>)
 8003d8e:	4846      	ldr	r0, [pc, #280]	@ (8003ea8 <lfs_dir_splittingcompact+0x254>)
 8003d90:	4a46      	ldr	r2, [pc, #280]	@ (8003eac <lfs_dir_splittingcompact+0x258>)
 8003d92:	9201      	str	r2, [sp, #4]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	0023      	movs	r3, r4
 8003d98:	002a      	movs	r2, r5
 8003d9a:	f006 fcc9 	bl	800a730 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003d9e:	e005      	b.n	8003dac <lfs_dir_splittingcompact+0x158>
        } else {
            end = split;
 8003da0:	2350      	movs	r3, #80	@ 0x50
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003da6:	801a      	strh	r2, [r3, #0]
    while (true) {
 8003da8:	e75b      	b.n	8003c62 <lfs_dir_splittingcompact+0xe>
            break;
 8003daa:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	0011      	movs	r1, r2
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7ff fcf5 	bl	80037a2 <lfs_dir_needsrelocation>
 8003db8:	1e03      	subs	r3, r0, #0
 8003dba:	d056      	beq.n	8003e6a <lfs_dir_splittingcompact+0x216>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	2014      	movs	r0, #20
 8003dc0:	183b      	adds	r3, r7, r0
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	6019      	str	r1, [r3, #0]
 8003dc6:	183b      	adds	r3, r7, r0
 8003dc8:	2101      	movs	r1, #1
 8003dca:	6059      	str	r1, [r3, #4]
 8003dcc:	183b      	adds	r3, r7, r0
 8003dce:	0019      	movs	r1, r3
 8003dd0:	0010      	movs	r0, r2
 8003dd2:	f7fd f863 	bl	8000e9c <lfs_pair_cmp>
 8003dd6:	1e03      	subs	r3, r0, #0
 8003dd8:	d147      	bne.n	8003e6a <lfs_dir_splittingcompact+0x216>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f003 fd8b 	bl	80078f8 <lfs_fs_size_>
 8003de2:	0003      	movs	r3, r0
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
        if (size < 0) {
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da01      	bge.n	8003df0 <lfs_dir_splittingcompact+0x19c>
            return size;
 8003dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dee:	e04e      	b.n	8003e8e <lfs_dir_splittingcompact+0x23a>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	1ad2      	subs	r2, r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dfc:	08db      	lsrs	r3, r3, #3
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d933      	bls.n	8003e6a <lfs_dir_splittingcompact+0x216>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	4c2a      	ldr	r4, [pc, #168]	@ (8003eb0 <lfs_dir_splittingcompact+0x25c>)
 8003e08:	4926      	ldr	r1, [pc, #152]	@ (8003ea4 <lfs_dir_splittingcompact+0x250>)
 8003e0a:	482a      	ldr	r0, [pc, #168]	@ (8003eb4 <lfs_dir_splittingcompact+0x260>)
 8003e0c:	4b27      	ldr	r3, [pc, #156]	@ (8003eac <lfs_dir_splittingcompact+0x258>)
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	0013      	movs	r3, r2
 8003e12:	0022      	movs	r2, r4
 8003e14:	f006 fc8c 	bl	800a730 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003e18:	683c      	ldr	r4, [r7, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	2350      	movs	r3, #80	@ 0x50
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	9302      	str	r3, [sp, #8]
 8003e28:	234c      	movs	r3, #76	@ 0x4c
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	0023      	movs	r3, r4
 8003e36:	f7ff fc27 	bl	8003688 <lfs_dir_split>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	623b      	str	r3, [r7, #32]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <lfs_dir_splittingcompact+0x1fa>
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	331c      	adds	r3, #28
 8003e48:	d001      	beq.n	8003e4e <lfs_dir_splittingcompact+0x1fa>
                return err;
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	e01f      	b.n	8003e8e <lfs_dir_splittingcompact+0x23a>
            }

            if (err) {
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d006      	beq.n	8003e62 <lfs_dir_splittingcompact+0x20e>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003e54:	4b15      	ldr	r3, [pc, #84]	@ (8003eac <lfs_dir_splittingcompact+0x258>)
 8003e56:	4a18      	ldr	r2, [pc, #96]	@ (8003eb8 <lfs_dir_splittingcompact+0x264>)
 8003e58:	4912      	ldr	r1, [pc, #72]	@ (8003ea4 <lfs_dir_splittingcompact+0x250>)
 8003e5a:	4818      	ldr	r0, [pc, #96]	@ (8003ebc <lfs_dir_splittingcompact+0x268>)
 8003e5c:	f006 fc68 	bl	800a730 <iprintf>
 8003e60:	e003      	b.n	8003e6a <lfs_dir_splittingcompact+0x216>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8003e62:	2350      	movs	r3, #80	@ 0x50
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2201      	movs	r2, #1
 8003e68:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003e6a:	683c      	ldr	r4, [r7, #0]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	2350      	movs	r3, #80	@ 0x50
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	9302      	str	r3, [sp, #8]
 8003e7a:	234c      	movs	r3, #76	@ 0x4c
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	0023      	movs	r3, r4
 8003e88:	f7ff fcb0 	bl	80037ec <lfs_dir_compact>
 8003e8c:	0003      	movs	r3, r0
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b00e      	add	sp, #56	@ 0x38
 8003e94:	bdb0      	pop	{r4, r5, r7, pc}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	0800374b 	.word	0x0800374b
 8003e9c:	400ffc00 	.word	0x400ffc00
 8003ea0:	0000088c 	.word	0x0000088c
 8003ea4:	0800b478 	.word	0x0800b478
 8003ea8:	0800b660 	.word	0x0800b660
 8003eac:	0800b588 	.word	0x0800b588
 8003eb0:	000008a2 	.word	0x000008a2
 8003eb4:	0800b690 	.word	0x0800b690
 8003eb8:	000008ac 	.word	0x000008ac
 8003ebc:	0800b6c0 	.word	0x0800b6c0

08003ec0 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec2:	b0a7      	sub	sp, #156	@ 0x9c
 8003ec4:	af0a      	add	r7, sp, #40	@ 0x28
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003ed2:	236b      	movs	r3, #107	@ 0x6b
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < attrcount; i++) {
 8003eda:	2300      	movs	r3, #0
 8003edc:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ede:	e06c      	b.n	8003fba <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	18d3      	adds	r3, r2, r3
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	0018      	movs	r0, r3
 8003eec:	f7fd f897 	bl	800101e <lfs_tag_type3>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	4bd4      	ldr	r3, [pc, #848]	@ (8004248 <lfs_dir_relocatingcommit+0x388>)
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d106      	bne.n	8003f08 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	8a9b      	ldrh	r3, [r3, #20]
 8003efe:	3301      	adds	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	829a      	strh	r2, [r3, #20]
 8003f06:	e055      	b.n	8003fb4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	18d3      	adds	r3, r2, r3
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	0018      	movs	r0, r3
 8003f14:	f7fd f883 	bl	800101e <lfs_tag_type3>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	4bcb      	ldr	r3, [pc, #812]	@ (800424c <lfs_dir_relocatingcommit+0x38c>)
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d114      	bne.n	8003f4c <lfs_dir_relocatingcommit+0x8c>
            LFS_ASSERT(dir->count > 0);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	8a9b      	ldrh	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <lfs_dir_relocatingcommit+0x76>
 8003f2a:	4bc9      	ldr	r3, [pc, #804]	@ (8004250 <lfs_dir_relocatingcommit+0x390>)
 8003f2c:	4ac9      	ldr	r2, [pc, #804]	@ (8004254 <lfs_dir_relocatingcommit+0x394>)
 8003f2e:	49ca      	ldr	r1, [pc, #808]	@ (8004258 <lfs_dir_relocatingcommit+0x398>)
 8003f30:	48ca      	ldr	r0, [pc, #808]	@ (800425c <lfs_dir_relocatingcommit+0x39c>)
 8003f32:	f006 fa45 	bl	800a3c0 <__assert_func>
            dir->count -= 1;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	8a9b      	ldrh	r3, [r3, #20]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003f42:	236b      	movs	r3, #107	@ 0x6b
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e033      	b.n	8003fb4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003f4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	18d3      	adds	r3, r2, r3
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7fd f843 	bl	8000fe2 <lfs_tag_type1>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	001a      	movs	r2, r3
 8003f60:	23c0      	movs	r3, #192	@ 0xc0
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d125      	bne.n	8003fb4 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	18d3      	adds	r3, r2, r3
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003f78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	18d3      	adds	r3, r2, r3
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	18d3      	adds	r3, r2, r3
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7fd f851 	bl	800103a <lfs_tag_chunk>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	001a      	movs	r2, r3
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	4193      	sbcs	r3, r2
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	3318      	adds	r3, #24
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7fc ffc8 	bl	8000f44 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003fb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003fbc:	2380      	movs	r3, #128	@ 0x80
 8003fbe:	2108      	movs	r1, #8
 8003fc0:	185b      	adds	r3, r3, r1
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	db8a      	blt.n	8003ee0 <lfs_dir_relocatingcommit+0x20>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003fca:	236b      	movs	r3, #107	@ 0x6b
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d031      	beq.n	8004038 <lfs_dir_relocatingcommit+0x178>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	8a9b      	ldrh	r3, [r3, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d12d      	bne.n	8004038 <lfs_dir_relocatingcommit+0x178>
        LFS_ASSERT(pdir);
 8003fdc:	2384      	movs	r3, #132	@ 0x84
 8003fde:	185b      	adds	r3, r3, r1
 8003fe0:	19db      	adds	r3, r3, r7
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <lfs_dir_relocatingcommit+0x134>
 8003fe8:	4b9d      	ldr	r3, [pc, #628]	@ (8004260 <lfs_dir_relocatingcommit+0x3a0>)
 8003fea:	4a9a      	ldr	r2, [pc, #616]	@ (8004254 <lfs_dir_relocatingcommit+0x394>)
 8003fec:	499d      	ldr	r1, [pc, #628]	@ (8004264 <lfs_dir_relocatingcommit+0x3a4>)
 8003fee:	489b      	ldr	r0, [pc, #620]	@ (800425c <lfs_dir_relocatingcommit+0x39c>)
 8003ff0:	f006 f9e6 	bl	800a3c0 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	2384      	movs	r3, #132	@ 0x84
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	189b      	adds	r3, r3, r2
 8003ffc:	19db      	adds	r3, r3, r7
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	0018      	movs	r0, r3
 8004004:	f002 ffa2 	bl	8006f4c <lfs_fs_pred>
 8004008:	0003      	movs	r3, r0
 800400a:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 800400c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <lfs_dir_relocatingcommit+0x15c>
 8004012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004014:	3302      	adds	r3, #2
 8004016:	d001      	beq.n	800401c <lfs_dir_relocatingcommit+0x15c>
            return err;
 8004018:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800401a:	e238      	b.n	800448e <lfs_dir_relocatingcommit+0x5ce>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800401c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800401e:	3302      	adds	r3, #2
 8004020:	d00a      	beq.n	8004038 <lfs_dir_relocatingcommit+0x178>
 8004022:	2384      	movs	r3, #132	@ 0x84
 8004024:	2208      	movs	r2, #8
 8004026:	189b      	adds	r3, r3, r2
 8004028:	19db      	adds	r3, r3, r7
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	7ddb      	ldrb	r3, [r3, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <lfs_dir_relocatingcommit+0x178>
            state = LFS_OK_DROPPED;
 8004032:	2302      	movs	r3, #2
 8004034:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 8004036:	e142      	b.n	80042be <lfs_dir_relocatingcommit+0x3fe>
        }
    }

    if (dir->erased) {
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	7d9b      	ldrb	r3, [r3, #22]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d100      	bne.n	8004042 <lfs_dir_relocatingcommit+0x182>
 8004040:	e0fc      	b.n	800423c <lfs_dir_relocatingcommit+0x37c>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	681a      	ldr	r2, [r3, #0]
        struct lfs_commit commit = {
 8004046:	2130      	movs	r1, #48	@ 0x30
 8004048:	187b      	adds	r3, r7, r1
 800404a:	601a      	str	r2, [r3, #0]
            .off = dir->off,
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	68da      	ldr	r2, [r3, #12]
        struct lfs_commit commit = {
 8004050:	187b      	adds	r3, r7, r1
 8004052:	605a      	str	r2, [r3, #4]
            .ptag = dir->etag,
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	691a      	ldr	r2, [r3, #16]
        struct lfs_commit commit = {
 8004058:	187b      	adds	r3, r7, r1
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	187b      	adds	r3, r7, r1
 800405e:	2201      	movs	r2, #1
 8004060:	4252      	negs	r2, r2
 8004062:	60da      	str	r2, [r3, #12]
            .crc = 0xffffffff,

            .begin = dir->off,
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	68da      	ldr	r2, [r3, #12]
        struct lfs_commit commit = {
 8004068:	187b      	adds	r3, r7, r1
 800406a:	611a      	str	r2, [r3, #16]
            .end = (lfs->cfg->metadata_max ?
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <lfs_dir_relocatingcommit+0x1c2>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800407a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407c:	3b08      	subs	r3, #8
 800407e:	001a      	movs	r2, r3
 8004080:	e004      	b.n	800408c <lfs_dir_relocatingcommit+0x1cc>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	3b08      	subs	r3, #8
 800408a:	001a      	movs	r2, r3
        struct lfs_commit commit = {
 800408c:	2330      	movs	r3, #48	@ 0x30
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	615a      	str	r2, [r3, #20]
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	3318      	adds	r3, #24
 8004096:	0018      	movs	r0, r3
 8004098:	f7fc ff6e 	bl	8000f78 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	68dc      	ldr	r4, [r3, #12]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	691d      	ldr	r5, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80040a4:	2628      	movs	r6, #40	@ 0x28
 80040a6:	19bb      	adds	r3, r7, r6
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	19bb      	adds	r3, r7, r6
 80040ae:	2230      	movs	r2, #48	@ 0x30
 80040b0:	18ba      	adds	r2, r7, r2
 80040b2:	605a      	str	r2, [r3, #4]
        int err = lfs_dir_traverse(lfs,
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	19bb      	adds	r3, r7, r6
 80040ba:	9308      	str	r3, [sp, #32]
 80040bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004268 <lfs_dir_relocatingcommit+0x3a8>)
 80040be:	9307      	str	r3, [sp, #28]
 80040c0:	2300      	movs	r3, #0
 80040c2:	9306      	str	r3, [sp, #24]
 80040c4:	2300      	movs	r3, #0
 80040c6:	9305      	str	r3, [sp, #20]
 80040c8:	2300      	movs	r3, #0
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	2300      	movs	r3, #0
 80040ce:	9303      	str	r3, [sp, #12]
 80040d0:	2300      	movs	r3, #0
 80040d2:	9302      	str	r3, [sp, #8]
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	2208      	movs	r2, #8
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	19db      	adds	r3, r3, r7
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	002b      	movs	r3, r5
 80040e6:	0022      	movs	r2, r4
 80040e8:	f7fd fd9c 	bl	8001c24 <lfs_dir_traverse>
 80040ec:	0003      	movs	r3, r0
 80040ee:	657b      	str	r3, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	3318      	adds	r3, #24
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7fc ff25 	bl	8000f44 <lfs_pair_fromle32>
        if (err) {
 80040fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <lfs_dir_relocatingcommit+0x254>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004102:	331c      	adds	r3, #28
 8004104:	d100      	bne.n	8004108 <lfs_dir_relocatingcommit+0x248>
 8004106:	e09b      	b.n	8004240 <lfs_dir_relocatingcommit+0x380>
 8004108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410a:	3354      	adds	r3, #84	@ 0x54
 800410c:	d100      	bne.n	8004110 <lfs_dir_relocatingcommit+0x250>
 800410e:	e097      	b.n	8004240 <lfs_dir_relocatingcommit+0x380>
                goto compact;
            }
            return err;
 8004110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004112:	e1bc      	b.n	800448e <lfs_dir_relocatingcommit+0x5ce>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8004114:	241c      	movs	r4, #28
 8004116:	193b      	adds	r3, r7, r4
 8004118:	0018      	movs	r0, r3
 800411a:	230c      	movs	r3, #12
 800411c:	001a      	movs	r2, r3
 800411e:	2100      	movs	r1, #0
 8004120:	f006 fb70 	bl	800a804 <memset>
        lfs_gstate_xor(&delta, &lfs->gstate);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3330      	adds	r3, #48	@ 0x30
 8004128:	001a      	movs	r2, r3
 800412a:	193b      	adds	r3, r7, r4
 800412c:	0011      	movs	r1, r2
 800412e:	0018      	movs	r0, r3
 8004130:	f7fc ffca 	bl	80010c8 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	333c      	adds	r3, #60	@ 0x3c
 8004138:	001a      	movs	r2, r3
 800413a:	193b      	adds	r3, r7, r4
 800413c:	0011      	movs	r1, r2
 800413e:	0018      	movs	r0, r3
 8004140:	f7fc ffc2 	bl	80010c8 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3348      	adds	r3, #72	@ 0x48
 8004148:	001a      	movs	r2, r3
 800414a:	193b      	adds	r3, r7, r4
 800414c:	0011      	movs	r1, r2
 800414e:	0018      	movs	r0, r3
 8004150:	f7fc ffba 	bl	80010c8 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004154:	193b      	adds	r3, r7, r4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0a9b      	lsrs	r3, r3, #10
 800415a:	029a      	lsls	r2, r3, #10
 800415c:	193b      	adds	r3, r7, r4
 800415e:	601a      	str	r2, [r3, #0]
        if (!lfs_gstate_iszero(&delta)) {
 8004160:	193b      	adds	r3, r7, r4
 8004162:	0018      	movs	r0, r3
 8004164:	f7fc ffce 	bl	8001104 <lfs_gstate_iszero>
 8004168:	0003      	movs	r3, r0
 800416a:	001a      	movs	r2, r3
 800416c:	2301      	movs	r3, #1
 800416e:	4053      	eors	r3, r2
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d025      	beq.n	80041c2 <lfs_dir_relocatingcommit+0x302>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8004176:	193a      	adds	r2, r7, r4
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	0018      	movs	r0, r3
 800417e:	f7fe fe27 	bl	8002dd0 <lfs_dir_getgstate>
 8004182:	0003      	movs	r3, r0
 8004184:	657b      	str	r3, [r7, #84]	@ 0x54
            if (err) {
 8004186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <lfs_dir_relocatingcommit+0x2d0>
                return err;
 800418c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418e:	e17e      	b.n	800448e <lfs_dir_relocatingcommit+0x5ce>
            }

            lfs_gstate_tole32(&delta);
 8004190:	241c      	movs	r4, #28
 8004192:	193b      	adds	r3, r7, r4
 8004194:	0018      	movs	r0, r3
 8004196:	f7fd f853 	bl	8001240 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800419a:	193b      	adds	r3, r7, r4
 800419c:	4a33      	ldr	r2, [pc, #204]	@ (800426c <lfs_dir_relocatingcommit+0x3ac>)
 800419e:	2130      	movs	r1, #48	@ 0x30
 80041a0:	1879      	adds	r1, r7, r1
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7fe ffe5 	bl	8003172 <lfs_dir_commitattr>
 80041a8:	0003      	movs	r3, r0
 80041aa:	657b      	str	r3, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80041ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <lfs_dir_relocatingcommit+0x302>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80041b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b4:	331c      	adds	r3, #28
 80041b6:	d045      	beq.n	8004244 <lfs_dir_relocatingcommit+0x384>
 80041b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ba:	3354      	adds	r3, #84	@ 0x54
 80041bc:	d042      	beq.n	8004244 <lfs_dir_relocatingcommit+0x384>
                    goto compact;
                }
                return err;
 80041be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c0:	e165      	b.n	800448e <lfs_dir_relocatingcommit+0x5ce>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80041c2:	2330      	movs	r3, #48	@ 0x30
 80041c4:	18fa      	adds	r2, r7, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	0011      	movs	r1, r2
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7ff f858 	bl	8003280 <lfs_dir_commitcrc>
 80041d0:	0003      	movs	r3, r0
 80041d2:	657b      	str	r3, [r7, #84]	@ 0x54
        if (err) {
 80041d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <lfs_dir_relocatingcommit+0x32a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80041da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041dc:	331c      	adds	r3, #28
 80041de:	d04b      	beq.n	8004278 <lfs_dir_relocatingcommit+0x3b8>
 80041e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e2:	3354      	adds	r3, #84	@ 0x54
 80041e4:	d048      	beq.n	8004278 <lfs_dir_relocatingcommit+0x3b8>
                goto compact;
            }
            return err;
 80041e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e8:	e151      	b.n	800448e <lfs_dir_relocatingcommit+0x5ce>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80041ea:	2330      	movs	r3, #48	@ 0x30
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	0019      	movs	r1, r3
 80041f8:	0010      	movs	r0, r2
 80041fa:	f7fc f819 	bl	8000230 <__aeabi_uidivmod>
 80041fe:	1e0b      	subs	r3, r1, #0
 8004200:	d005      	beq.n	800420e <lfs_dir_relocatingcommit+0x34e>
 8004202:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <lfs_dir_relocatingcommit+0x3b0>)
 8004204:	4a13      	ldr	r2, [pc, #76]	@ (8004254 <lfs_dir_relocatingcommit+0x394>)
 8004206:	491b      	ldr	r1, [pc, #108]	@ (8004274 <lfs_dir_relocatingcommit+0x3b4>)
 8004208:	4814      	ldr	r0, [pc, #80]	@ (800425c <lfs_dir_relocatingcommit+0x39c>)
 800420a:	f006 f8d9 	bl	800a3c0 <__assert_func>
        dir->off = commit.off;
 800420e:	2130      	movs	r1, #48	@ 0x30
 8004210:	187b      	adds	r3, r7, r1
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8004218:	187b      	adds	r3, r7, r1
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	333c      	adds	r3, #60	@ 0x3c
 8004226:	3230      	adds	r2, #48	@ 0x30
 8004228:	ca13      	ldmia	r2!, {r0, r1, r4}
 800422a:	c313      	stmia	r3!, {r0, r1, r4}
        lfs->gdelta = (lfs_gstate_t){0};
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3348      	adds	r3, #72	@ 0x48
 8004230:	220c      	movs	r2, #12
 8004232:	2100      	movs	r1, #0
 8004234:	0018      	movs	r0, r3
 8004236:	f006 fae5 	bl	800a804 <memset>
 800423a:	e040      	b.n	80042be <lfs_dir_relocatingcommit+0x3fe>

        goto fixmlist;
    }

compact:
 800423c:	46c0      	nop			@ (mov r8, r8)
 800423e:	e01c      	b.n	800427a <lfs_dir_relocatingcommit+0x3ba>
                goto compact;
 8004240:	46c0      	nop			@ (mov r8, r8)
 8004242:	e01a      	b.n	800427a <lfs_dir_relocatingcommit+0x3ba>
                    goto compact;
 8004244:	46c0      	nop			@ (mov r8, r8)
 8004246:	e018      	b.n	800427a <lfs_dir_relocatingcommit+0x3ba>
 8004248:	00000401 	.word	0x00000401
 800424c:	000004ff 	.word	0x000004ff
 8004250:	0800b6ec 	.word	0x0800b6ec
 8004254:	0800c320 	.word	0x0800c320
 8004258:	000008c5 	.word	0x000008c5
 800425c:	0800b478 	.word	0x0800b478
 8004260:	0800b6fc 	.word	0x0800b6fc
 8004264:	000008d2 	.word	0x000008d2
 8004268:	08003779 	.word	0x08003779
 800426c:	7ffffc0c 	.word	0x7ffffc0c
 8004270:	0800b5dc 	.word	0x0800b5dc
 8004274:	0000091c 	.word	0x0000091c
                goto compact;
 8004278:	46c0      	nop			@ (mov r8, r8)
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3310      	adds	r3, #16
 800427e:	001a      	movs	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	0011      	movs	r1, r2
 8004284:	0018      	movs	r0, r3
 8004286:	f7fc f9d7 	bl	8000638 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	8a9b      	ldrh	r3, [r3, #20]
 800428e:	2280      	movs	r2, #128	@ 0x80
 8004290:	2108      	movs	r1, #8
 8004292:	1852      	adds	r2, r2, r1
 8004294:	19d2      	adds	r2, r2, r7
 8004296:	6814      	ldr	r4, [r2, #0]
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	0023      	movs	r3, r4
 80042aa:	f7ff fcd3 	bl	8003c54 <lfs_dir_splittingcompact>
 80042ae:	0003      	movs	r3, r0
 80042b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 80042b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da01      	bge.n	80042bc <lfs_dir_relocatingcommit+0x3fc>
        return state;
 80042b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ba:	e0e8      	b.n	800448e <lfs_dir_relocatingcommit+0x5ce>
    }

    goto fixmlist;
 80042bc:	46c0      	nop			@ (mov r8, r8)
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	2148      	movs	r1, #72	@ 0x48
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	187b      	adds	r3, r7, r1
 80042d0:	605a      	str	r2, [r3, #4]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80042d8:	e0d4      	b.n	8004484 <lfs_dir_relocatingcommit+0x5c4>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80042da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042dc:	3308      	adds	r3, #8
 80042de:	2248      	movs	r2, #72	@ 0x48
 80042e0:	18ba      	adds	r2, r7, r2
 80042e2:	0011      	movs	r1, r2
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7fc fdd9 	bl	8000e9c <lfs_pair_cmp>
 80042ea:	1e03      	subs	r3, r0, #0
 80042ec:	d000      	beq.n	80042f0 <lfs_dir_relocatingcommit+0x430>
 80042ee:	e0c6      	b.n	800447e <lfs_dir_relocatingcommit+0x5be>
            d->m = *dir;
 80042f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	3308      	adds	r3, #8
 80042f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042f8:	c313      	stmia	r3!, {r0, r1, r4}
 80042fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042fc:	c313      	stmia	r3!, {r0, r1, r4}
 80042fe:	ca03      	ldmia	r2!, {r0, r1}
 8004300:	c303      	stmia	r3!, {r0, r1}
            if (d->m.pair != pair) {
 8004302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004304:	3308      	adds	r3, #8
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	429a      	cmp	r2, r3
 800430a:	d100      	bne.n	800430e <lfs_dir_relocatingcommit+0x44e>
 800430c:	e0ad      	b.n	800446a <lfs_dir_relocatingcommit+0x5aa>
                for (int i = 0; i < attrcount; i++) {
 800430e:	2300      	movs	r3, #0
 8004310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004312:	e07c      	b.n	800440e <lfs_dir_relocatingcommit+0x54e>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	18d3      	adds	r3, r2, r3
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0018      	movs	r0, r3
 8004320:	f7fc fe7d 	bl	800101e <lfs_tag_type3>
 8004324:	0003      	movs	r3, r0
 8004326:	001a      	movs	r2, r3
 8004328:	4b5b      	ldr	r3, [pc, #364]	@ (8004498 <lfs_dir_relocatingcommit+0x5d8>)
 800432a:	429a      	cmp	r2, r3
 800432c:	d119      	bne.n	8004362 <lfs_dir_relocatingcommit+0x4a2>
                            d->id == lfs_tag_id(attrs[i].tag) &&
 800432e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004330:	889c      	ldrh	r4, [r3, #4]
 8004332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	18d3      	adds	r3, r2, r3
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0018      	movs	r0, r3
 800433e:	f7fc fe95 	bl	800106c <lfs_tag_id>
 8004342:	0003      	movs	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004344:	429c      	cmp	r4, r3
 8004346:	d10c      	bne.n	8004362 <lfs_dir_relocatingcommit+0x4a2>
                            d->type != LFS_TYPE_DIR) {
 8004348:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800434a:	799b      	ldrb	r3, [r3, #6]
                            d->id == lfs_tag_id(attrs[i].tag) &&
 800434c:	2b02      	cmp	r3, #2
 800434e:	d008      	beq.n	8004362 <lfs_dir_relocatingcommit+0x4a2>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8004350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004352:	2201      	movs	r2, #1
 8004354:	4252      	negs	r2, r2
 8004356:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8004358:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800435a:	2201      	movs	r2, #1
 800435c:	4252      	negs	r2, r2
 800435e:	60da      	str	r2, [r3, #12]
 8004360:	e052      	b.n	8004408 <lfs_dir_relocatingcommit+0x548>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	18d3      	adds	r3, r2, r3
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0018      	movs	r0, r3
 800436e:	f7fc fe56 	bl	800101e <lfs_tag_type3>
 8004372:	0003      	movs	r3, r0
 8004374:	001a      	movs	r2, r3
 8004376:	4b48      	ldr	r3, [pc, #288]	@ (8004498 <lfs_dir_relocatingcommit+0x5d8>)
 8004378:	429a      	cmp	r2, r3
 800437a:	d11c      	bne.n	80043b6 <lfs_dir_relocatingcommit+0x4f6>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800437c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800437e:	889c      	ldrh	r4, [r3, #4]
 8004380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	18d3      	adds	r3, r2, r3
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	0018      	movs	r0, r3
 800438c:	f7fc fe6e 	bl	800106c <lfs_tag_id>
 8004390:	0003      	movs	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004392:	429c      	cmp	r4, r3
 8004394:	d90f      	bls.n	80043b6 <lfs_dir_relocatingcommit+0x4f6>
                        d->id -= 1;
 8004396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004398:	889b      	ldrh	r3, [r3, #4]
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043a0:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80043a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043a4:	799b      	ldrb	r3, [r3, #6]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d12e      	bne.n	8004408 <lfs_dir_relocatingcommit+0x548>
                            ((lfs_dir_t*)d)->pos -= 1;
 80043aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ae:	1e5a      	subs	r2, r3, #1
 80043b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043b2:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 80043b4:	e028      	b.n	8004408 <lfs_dir_relocatingcommit+0x548>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80043b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	18d3      	adds	r3, r2, r3
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0018      	movs	r0, r3
 80043c2:	f7fc fe2c 	bl	800101e <lfs_tag_type3>
 80043c6:	0003      	movs	r3, r0
 80043c8:	001a      	movs	r2, r3
 80043ca:	4b34      	ldr	r3, [pc, #208]	@ (800449c <lfs_dir_relocatingcommit+0x5dc>)
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d11b      	bne.n	8004408 <lfs_dir_relocatingcommit+0x548>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80043d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043d2:	889c      	ldrh	r4, [r3, #4]
 80043d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	18d3      	adds	r3, r2, r3
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	0018      	movs	r0, r3
 80043e0:	f7fc fe44 	bl	800106c <lfs_tag_id>
 80043e4:	0003      	movs	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80043e6:	429c      	cmp	r4, r3
 80043e8:	d30e      	bcc.n	8004408 <lfs_dir_relocatingcommit+0x548>
                        d->id += 1;
 80043ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ec:	889b      	ldrh	r3, [r3, #4]
 80043ee:	3301      	adds	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f4:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80043f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f8:	799b      	ldrb	r3, [r3, #6]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d104      	bne.n	8004408 <lfs_dir_relocatingcommit+0x548>
                            ((lfs_dir_t*)d)->pos += 1;
 80043fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004406:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8004408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800440a:	3301      	adds	r3, #1
 800440c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800440e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004410:	2380      	movs	r3, #128	@ 0x80
 8004412:	2108      	movs	r1, #8
 8004414:	185b      	adds	r3, r3, r1
 8004416:	19db      	adds	r3, r3, r7
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	da00      	bge.n	8004420 <lfs_dir_relocatingcommit+0x560>
 800441e:	e779      	b.n	8004314 <lfs_dir_relocatingcommit+0x454>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8004420:	e023      	b.n	800446a <lfs_dir_relocatingcommit+0x5aa>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 8004422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004424:	3320      	adds	r3, #32
 8004426:	001a      	movs	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3320      	adds	r3, #32
 800442c:	0019      	movs	r1, r3
 800442e:	0010      	movs	r0, r2
 8004430:	f7fc fd34 	bl	8000e9c <lfs_pair_cmp>
 8004434:	1e03      	subs	r3, r0, #0
 8004436:	d007      	beq.n	8004448 <lfs_dir_relocatingcommit+0x588>
                    d->id -= d->m.count;
 8004438:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800443a:	889a      	ldrh	r2, [r3, #4]
 800443c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800443e:	8b9b      	ldrh	r3, [r3, #28]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	b29a      	uxth	r2, r3
 8004444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004446:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8004448:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800444a:	3308      	adds	r3, #8
 800444c:	0019      	movs	r1, r3
 800444e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004450:	3320      	adds	r3, #32
 8004452:	001a      	movs	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	0018      	movs	r0, r3
 8004458:	f7fe fc9e 	bl	8002d98 <lfs_dir_fetch>
 800445c:	0003      	movs	r3, r0
 800445e:	653b      	str	r3, [r7, #80]	@ 0x50
                if (err) {
 8004460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <lfs_dir_relocatingcommit+0x5aa>
                    return err;
 8004466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004468:	e011      	b.n	800448e <lfs_dir_relocatingcommit+0x5ce>
            while (d->id >= d->m.count && d->m.split) {
 800446a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800446c:	889a      	ldrh	r2, [r3, #4]
 800446e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004470:	8b9b      	ldrh	r3, [r3, #28]
 8004472:	429a      	cmp	r2, r3
 8004474:	d303      	bcc.n	800447e <lfs_dir_relocatingcommit+0x5be>
 8004476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004478:	7fdb      	ldrb	r3, [r3, #31]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1d1      	bne.n	8004422 <lfs_dir_relocatingcommit+0x562>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800447e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	663b      	str	r3, [r7, #96]	@ 0x60
 8004484:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004486:	2b00      	cmp	r3, #0
 8004488:	d000      	beq.n	800448c <lfs_dir_relocatingcommit+0x5cc>
 800448a:	e726      	b.n	80042da <lfs_dir_relocatingcommit+0x41a>
                }
            }
        }
    }

    return state;
 800448c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b01d      	add	sp, #116	@ 0x74
 8004494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	000004ff 	.word	0x000004ff
 800449c:	00000401 	.word	0x00000401

080044a0 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80044a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a2:	b0bd      	sub	sp, #244	@ 0xf4
 80044a4:	af04      	add	r7, sp, #16
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b2:	22dc      	movs	r2, #220	@ 0xdc
 80044b4:	18ba      	adds	r2, r7, r2
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e050      	b.n	800455c <lfs_dir_orphaningcommit+0xbc>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80044ba:	24dc      	movs	r4, #220	@ 0xdc
 80044bc:	193b      	adds	r3, r7, r4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3308      	adds	r3, #8
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d043      	beq.n	8004550 <lfs_dir_orphaningcommit+0xb0>
 80044c8:	193b      	adds	r3, r7, r4
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	0011      	movs	r1, r2
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7fc fce2 	bl	8000e9c <lfs_pair_cmp>
 80044d8:	1e03      	subs	r3, r0, #0
 80044da:	d139      	bne.n	8004550 <lfs_dir_orphaningcommit+0xb0>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80044dc:	0021      	movs	r1, r4
 80044de:	187b      	adds	r3, r7, r1
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d133      	bne.n	8004550 <lfs_dir_orphaningcommit+0xb0>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80044e8:	187b      	adds	r3, r7, r1
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ee:	2380      	movs	r3, #128	@ 0x80
 80044f0:	035b      	lsls	r3, r3, #13
 80044f2:	4013      	ands	r3, r2
 80044f4:	d02c      	beq.n	8004550 <lfs_dir_orphaningcommit+0xb0>
                f->ctz.size > lfs->cfg->cache_size) {
 80044f6:	187b      	adds	r3, r7, r1
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004502:	429a      	cmp	r2, r3
 8004504:	d924      	bls.n	8004550 <lfs_dir_orphaningcommit+0xb0>
            int err = lfs_file_outline(lfs, f);
 8004506:	187b      	adds	r3, r7, r1
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	0011      	movs	r1, r2
 800450e:	0018      	movs	r0, r3
 8004510:	f001 f8ae 	bl	8005670 <lfs_file_outline>
 8004514:	0003      	movs	r3, r0
 8004516:	22b4      	movs	r2, #180	@ 0xb4
 8004518:	18b9      	adds	r1, r7, r2
 800451a:	600b      	str	r3, [r1, #0]
            if (err) {
 800451c:	18bb      	adds	r3, r7, r2
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <lfs_dir_orphaningcommit+0x8a>
                return err;
 8004524:	18bb      	adds	r3, r7, r2
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	e306      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
            }

            err = lfs_file_flush(lfs, f);
 800452a:	23dc      	movs	r3, #220	@ 0xdc
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	0011      	movs	r1, r2
 8004534:	0018      	movs	r0, r3
 8004536:	f001 f8c3 	bl	80056c0 <lfs_file_flush>
 800453a:	0003      	movs	r3, r0
 800453c:	22b4      	movs	r2, #180	@ 0xb4
 800453e:	18b9      	adds	r1, r7, r2
 8004540:	600b      	str	r3, [r1, #0]
            if (err) {
 8004542:	18bb      	adds	r3, r7, r2
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <lfs_dir_orphaningcommit+0xb0>
                return err;
 800454a:	18bb      	adds	r3, r7, r2
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	e2f3      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004550:	22dc      	movs	r2, #220	@ 0xdc
 8004552:	18bb      	adds	r3, r7, r2
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	18ba      	adds	r2, r7, r2
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	23dc      	movs	r3, #220	@ 0xdc
 800455e:	18fb      	adds	r3, r7, r3
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1a9      	bne.n	80044ba <lfs_dir_orphaningcommit+0x1a>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	21ac      	movs	r1, #172	@ 0xac
 800456c:	187b      	adds	r3, r7, r1
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	187b      	adds	r3, r7, r1
 8004576:	605a      	str	r2, [r3, #4]
    lfs_mdir_t ldir = *dir;
 8004578:	258c      	movs	r5, #140	@ 0x8c
 800457a:	197b      	adds	r3, r7, r5
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004580:	c313      	stmia	r3!, {r0, r1, r4}
 8004582:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004584:	c313      	stmia	r3!, {r0, r1, r4}
 8004586:	ca03      	ldmia	r2!, {r0, r1}
 8004588:	c303      	stmia	r3!, {r0, r1}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	687c      	ldr	r4, [r7, #4]
 800458e:	1979      	adds	r1, r7, r5
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	236c      	movs	r3, #108	@ 0x6c
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	0023      	movs	r3, r4
 800459e:	f7ff fc8f 	bl	8003ec0 <lfs_dir_relocatingcommit>
 80045a2:	0003      	movs	r3, r0
 80045a4:	22d8      	movs	r2, #216	@ 0xd8
 80045a6:	18b9      	adds	r1, r7, r2
 80045a8:	600b      	str	r3, [r1, #0]
            attrs, attrcount, &pdir);
    if (state < 0) {
 80045aa:	18bb      	adds	r3, r7, r2
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	da02      	bge.n	80045b8 <lfs_dir_orphaningcommit+0x118>
        return state;
 80045b2:	18bb      	adds	r3, r7, r2
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	e2bf      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	22ac      	movs	r2, #172	@ 0xac
 80045bc:	18ba      	adds	r2, r7, r2
 80045be:	0011      	movs	r1, r2
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7fc fc6b 	bl	8000e9c <lfs_pair_cmp>
 80045c6:	1e03      	subs	r3, r0, #0
 80045c8:	d108      	bne.n	80045dc <lfs_dir_orphaningcommit+0x13c>
        *dir = ldir;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	228c      	movs	r2, #140	@ 0x8c
 80045ce:	18ba      	adds	r2, r7, r2
 80045d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045d2:	c313      	stmia	r3!, {r0, r1, r4}
 80045d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045d6:	c313      	stmia	r3!, {r0, r1, r4}
 80045d8:	ca03      	ldmia	r2!, {r0, r1}
 80045da:	c303      	stmia	r3!, {r0, r1}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80045dc:	23d8      	movs	r3, #216	@ 0xd8
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d157      	bne.n	8004696 <lfs_dir_orphaningcommit+0x1f6>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3348      	adds	r3, #72	@ 0x48
 80045ea:	001a      	movs	r2, r3
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7fe fbed 	bl	8002dd0 <lfs_dir_getgstate>
 80045f6:	0003      	movs	r3, r0
 80045f8:	22c4      	movs	r2, #196	@ 0xc4
 80045fa:	18b9      	adds	r1, r7, r2
 80045fc:	600b      	str	r3, [r1, #0]
        if (err) {
 80045fe:	18bb      	adds	r3, r7, r2
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <lfs_dir_orphaningcommit+0x16c>
            return err;
 8004606:	18bb      	adds	r3, r7, r2
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	e295      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800460c:	246c      	movs	r4, #108	@ 0x6c
 800460e:	193b      	adds	r3, r7, r4
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	25ac      	movs	r5, #172	@ 0xac
 8004614:	197b      	adds	r3, r7, r5
 8004616:	601a      	str	r2, [r3, #0]
        lpair[1] = pdir.pair[1];
 8004618:	193b      	adds	r3, r7, r4
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	197b      	adds	r3, r7, r5
 800461e:	605a      	str	r2, [r3, #4]
        lfs_pair_tole32(dir->tail);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3318      	adds	r3, #24
 8004624:	0018      	movs	r0, r3
 8004626:	f7fc fca7 	bl	8000f78 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	7ddb      	ldrb	r3, [r3, #23]
 800462e:	22c0      	movs	r2, #192	@ 0xc0
 8004630:	00d2      	lsls	r2, r2, #3
 8004632:	4694      	mov	ip, r2
 8004634:	4463      	add	r3, ip
 8004636:	051b      	lsls	r3, r3, #20
 8004638:	4ad7      	ldr	r2, [pc, #860]	@ (8004998 <lfs_dir_orphaningcommit+0x4f8>)
 800463a:	431a      	orrs	r2, r3
 800463c:	2164      	movs	r1, #100	@ 0x64
 800463e:	187b      	adds	r3, r7, r1
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3318      	adds	r3, #24
 8004646:	001a      	movs	r2, r3
 8004648:	187b      	adds	r3, r7, r1
 800464a:	605a      	str	r2, [r3, #4]
 800464c:	187b      	adds	r3, r7, r1
 800464e:	197a      	adds	r2, r7, r5
 8004650:	1939      	adds	r1, r7, r4
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	2400      	movs	r4, #0
 8004656:	9401      	str	r4, [sp, #4]
 8004658:	2401      	movs	r4, #1
 800465a:	9400      	str	r4, [sp, #0]
 800465c:	f7ff fc30 	bl	8003ec0 <lfs_dir_relocatingcommit>
 8004660:	0003      	movs	r3, r0
 8004662:	24d8      	movs	r4, #216	@ 0xd8
 8004664:	193a      	adds	r2, r7, r4
 8004666:	6013      	str	r3, [r2, #0]
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	3318      	adds	r3, #24
 800466c:	0018      	movs	r0, r3
 800466e:	f7fc fc69 	bl	8000f44 <lfs_pair_fromle32>
        if (state < 0) {
 8004672:	0022      	movs	r2, r4
 8004674:	18bb      	adds	r3, r7, r2
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	da02      	bge.n	8004682 <lfs_dir_orphaningcommit+0x1e2>
            return state;
 800467c:	18bb      	adds	r3, r7, r2
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	e25a      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
        }

        ldir = pdir;
 8004682:	238c      	movs	r3, #140	@ 0x8c
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	226c      	movs	r2, #108	@ 0x6c
 8004688:	18ba      	adds	r2, r7, r2
 800468a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800468c:	c313      	stmia	r3!, {r0, r1, r4}
 800468e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004690:	c313      	stmia	r3!, {r0, r1, r4}
 8004692:	ca03      	ldmia	r2!, {r0, r1}
 8004694:	c303      	stmia	r3!, {r0, r1}
    }

    // need to relocate?
    bool orphans = false;
 8004696:	23d7      	movs	r3, #215	@ 0xd7
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
    while (state == LFS_OK_RELOCATED) {
 800469e:	e23d      	b.n	8004b1c <lfs_dir_orphaningcommit+0x67c>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80046a0:	22ac      	movs	r2, #172	@ 0xac
 80046a2:	18bb      	adds	r3, r7, r2
 80046a4:	681e      	ldr	r6, [r3, #0]
 80046a6:	18bb      	adds	r3, r7, r2
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	208c      	movs	r0, #140	@ 0x8c
 80046ac:	183b      	adds	r3, r7, r0
 80046ae:	6819      	ldr	r1, [r3, #0]
 80046b0:	183b      	adds	r3, r7, r0
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4cb9      	ldr	r4, [pc, #740]	@ (800499c <lfs_dir_orphaningcommit+0x4fc>)
 80046b6:	46a4      	mov	ip, r4
 80046b8:	4db9      	ldr	r5, [pc, #740]	@ (80049a0 <lfs_dir_orphaningcommit+0x500>)
 80046ba:	4cba      	ldr	r4, [pc, #744]	@ (80049a4 <lfs_dir_orphaningcommit+0x504>)
 80046bc:	48ba      	ldr	r0, [pc, #744]	@ (80049a8 <lfs_dir_orphaningcommit+0x508>)
 80046be:	9003      	str	r0, [sp, #12]
 80046c0:	9302      	str	r3, [sp, #8]
 80046c2:	9101      	str	r1, [sp, #4]
 80046c4:	9200      	str	r2, [sp, #0]
 80046c6:	0033      	movs	r3, r6
 80046c8:	4662      	mov	r2, ip
 80046ca:	0029      	movs	r1, r5
 80046cc:	0020      	movs	r0, r4
 80046ce:	f006 f82f 	bl	800a730 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	24d8      	movs	r4, #216	@ 0xd8
 80046d6:	193c      	adds	r4, r7, r4
 80046d8:	6023      	str	r3, [r4, #0]

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3320      	adds	r3, #32
 80046de:	001a      	movs	r2, r3
 80046e0:	23ac      	movs	r3, #172	@ 0xac
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	0011      	movs	r1, r2
 80046e6:	0018      	movs	r0, r3
 80046e8:	f7fc fbd8 	bl	8000e9c <lfs_pair_cmp>
 80046ec:	1e03      	subs	r3, r0, #0
 80046ee:	d108      	bne.n	8004702 <lfs_dir_orphaningcommit+0x262>
            lfs->root[0] = ldir.pair[0];
 80046f0:	218c      	movs	r1, #140	@ 0x8c
 80046f2:	187b      	adds	r3, r7, r1
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 80046fa:	187b      	adds	r3, r7, r1
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	22d0      	movs	r2, #208	@ 0xd0
 8004708:	18ba      	adds	r2, r7, r2
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	e03a      	b.n	8004784 <lfs_dir_orphaningcommit+0x2e4>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800470e:	24d0      	movs	r4, #208	@ 0xd0
 8004710:	193b      	adds	r3, r7, r4
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	001a      	movs	r2, r3
 8004718:	23ac      	movs	r3, #172	@ 0xac
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	0011      	movs	r1, r2
 800471e:	0018      	movs	r0, r3
 8004720:	f7fc fbbc 	bl	8000e9c <lfs_pair_cmp>
 8004724:	1e03      	subs	r3, r0, #0
 8004726:	d10a      	bne.n	800473e <lfs_dir_orphaningcommit+0x29e>
                d->m.pair[0] = ldir.pair[0];
 8004728:	218c      	movs	r1, #140	@ 0x8c
 800472a:	187b      	adds	r3, r7, r1
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	193b      	adds	r3, r7, r4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8004734:	187b      	adds	r3, r7, r1
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	193b      	adds	r3, r7, r4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800473e:	24d0      	movs	r4, #208	@ 0xd0
 8004740:	193b      	adds	r3, r7, r4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	799b      	ldrb	r3, [r3, #6]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d116      	bne.n	8004778 <lfs_dir_orphaningcommit+0x2d8>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 800474a:	193b      	adds	r3, r7, r4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	332c      	adds	r3, #44	@ 0x2c
 8004750:	001a      	movs	r2, r3
 8004752:	23ac      	movs	r3, #172	@ 0xac
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	0011      	movs	r1, r2
 8004758:	0018      	movs	r0, r3
 800475a:	f7fc fb9f 	bl	8000e9c <lfs_pair_cmp>
 800475e:	1e03      	subs	r3, r0, #0
            if (d->type == LFS_TYPE_DIR &&
 8004760:	d10a      	bne.n	8004778 <lfs_dir_orphaningcommit+0x2d8>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8004762:	218c      	movs	r1, #140	@ 0x8c
 8004764:	187b      	adds	r3, r7, r1
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	193b      	adds	r3, r7, r4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800476e:	187b      	adds	r3, r7, r1
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	193b      	adds	r3, r7, r4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004778:	22d0      	movs	r2, #208	@ 0xd0
 800477a:	18bb      	adds	r3, r7, r2
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	18ba      	adds	r2, r7, r2
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	23d0      	movs	r3, #208	@ 0xd0
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1bf      	bne.n	800470e <lfs_dir_orphaningcommit+0x26e>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800478e:	236c      	movs	r3, #108	@ 0x6c
 8004790:	18fa      	adds	r2, r7, r3
 8004792:	23ac      	movs	r3, #172	@ 0xac
 8004794:	18f9      	adds	r1, r7, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	0018      	movs	r0, r3
 800479a:	f002 fc6b 	bl	8007074 <lfs_fs_parent>
 800479e:	0003      	movs	r3, r0
 80047a0:	22cc      	movs	r2, #204	@ 0xcc
 80047a2:	18b9      	adds	r1, r7, r2
 80047a4:	600b      	str	r3, [r1, #0]
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80047a6:	18bb      	adds	r3, r7, r2
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da06      	bge.n	80047bc <lfs_dir_orphaningcommit+0x31c>
 80047ae:	18bb      	adds	r3, r7, r2
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3302      	adds	r3, #2
 80047b4:	d002      	beq.n	80047bc <lfs_dir_orphaningcommit+0x31c>
            return tag;
 80047b6:	18bb      	adds	r3, r7, r2
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	e1bd      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80047bc:	23c3      	movs	r3, #195	@ 0xc3
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	20cc      	movs	r0, #204	@ 0xcc
 80047c2:	183a      	adds	r2, r7, r0
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	3202      	adds	r2, #2
 80047c8:	1e51      	subs	r1, r2, #1
 80047ca:	418a      	sbcs	r2, r1
 80047cc:	701a      	strb	r2, [r3, #0]
        if (tag != LFS_ERR_NOENT) {
 80047ce:	183b      	adds	r3, r7, r0
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3302      	adds	r3, #2
 80047d4:	d100      	bne.n	80047d8 <lfs_dir_orphaningcommit+0x338>
 80047d6:	e0b7      	b.n	8004948 <lfs_dir_orphaningcommit+0x4a8>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2101      	movs	r1, #1
 80047dc:	0018      	movs	r0, r3
 80047de:	f002 fcc9 	bl	8007174 <lfs_fs_preporphans>
 80047e2:	0003      	movs	r3, r0
 80047e4:	22bc      	movs	r2, #188	@ 0xbc
 80047e6:	18b9      	adds	r1, r7, r2
 80047e8:	600b      	str	r3, [r1, #0]
            if (err) {
 80047ea:	18bb      	adds	r3, r7, r2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <lfs_dir_orphaningcommit+0x358>
                return err;
 80047f2:	18bb      	adds	r3, r7, r2
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	e19f      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80047f8:	26ca      	movs	r6, #202	@ 0xca
 80047fa:	19bb      	adds	r3, r7, r6
 80047fc:	4a6b      	ldr	r2, [pc, #428]	@ (80049ac <lfs_dir_orphaningcommit+0x50c>)
 80047fe:	801a      	strh	r2, [r3, #0]
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3330      	adds	r3, #48	@ 0x30
 8004804:	256c      	movs	r5, #108	@ 0x6c
 8004806:	197a      	adds	r2, r7, r5
 8004808:	0011      	movs	r1, r2
 800480a:	0018      	movs	r0, r3
 800480c:	f7fc fcd8 	bl	80011c0 <lfs_gstate_hasmovehere>
 8004810:	1e03      	subs	r3, r0, #0
 8004812:	d034      	beq.n	800487e <lfs_dir_orphaningcommit+0x3de>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	19bc      	adds	r4, r7, r6
 800481a:	0018      	movs	r0, r3
 800481c:	f7fc fc26 	bl	800106c <lfs_tag_id>
 8004820:	0003      	movs	r3, r0
 8004822:	8023      	strh	r3, [r4, #0]
                LFS_DEBUG("Fixing move while relocating "
 8004824:	002a      	movs	r2, r5
 8004826:	18bb      	adds	r3, r7, r2
 8004828:	681d      	ldr	r5, [r3, #0]
 800482a:	18bb      	adds	r3, r7, r2
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	19ba      	adds	r2, r7, r6
 8004830:	8812      	ldrh	r2, [r2, #0]
 8004832:	4e5f      	ldr	r6, [pc, #380]	@ (80049b0 <lfs_dir_orphaningcommit+0x510>)
 8004834:	4c5a      	ldr	r4, [pc, #360]	@ (80049a0 <lfs_dir_orphaningcommit+0x500>)
 8004836:	485f      	ldr	r0, [pc, #380]	@ (80049b4 <lfs_dir_orphaningcommit+0x514>)
 8004838:	495b      	ldr	r1, [pc, #364]	@ (80049a8 <lfs_dir_orphaningcommit+0x508>)
 800483a:	9102      	str	r1, [sp, #8]
 800483c:	9201      	str	r2, [sp, #4]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	002b      	movs	r3, r5
 8004842:	0032      	movs	r2, r6
 8004844:	0021      	movs	r1, r4
 8004846:	f005 ff73 	bl	800a730 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800484a:	4958      	ldr	r1, [pc, #352]	@ (80049ac <lfs_dir_orphaningcommit+0x50c>)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	0018      	movs	r0, r3
 8004852:	f002 fce5 	bl	8007220 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8004856:	24cc      	movs	r4, #204	@ 0xcc
 8004858:	193b      	adds	r3, r7, r4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	0018      	movs	r0, r3
 800485e:	f7fc fc05 	bl	800106c <lfs_tag_id>
 8004862:	0003      	movs	r3, r0
 8004864:	001a      	movs	r2, r3
 8004866:	26ca      	movs	r6, #202	@ 0xca
 8004868:	19bb      	adds	r3, r7, r6
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	4293      	cmp	r3, r2
 800486e:	d206      	bcs.n	800487e <lfs_dir_orphaningcommit+0x3de>
                    tag -= LFS_MKTAG(0, 1, 0);
 8004870:	193b      	adds	r3, r7, r4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a50      	ldr	r2, [pc, #320]	@ (80049b8 <lfs_dir_orphaningcommit+0x518>)
 8004876:	4694      	mov	ip, r2
 8004878:	4463      	add	r3, ip
 800487a:	193a      	adds	r2, r7, r4
 800487c:	6013      	str	r3, [r2, #0]
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800487e:	216c      	movs	r1, #108	@ 0x6c
 8004880:	187b      	adds	r3, r7, r1
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	2054      	movs	r0, #84	@ 0x54
 8004886:	183b      	adds	r3, r7, r0
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	187b      	adds	r3, r7, r1
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	183b      	adds	r3, r7, r0
 8004890:	605a      	str	r2, [r3, #4]
            lfs_pair_tole32(ldir.pair);
 8004892:	238c      	movs	r3, #140	@ 0x8c
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	0018      	movs	r0, r3
 8004898:	f7fc fb6e 	bl	8000f78 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 800489c:	21ca      	movs	r1, #202	@ 0xca
 800489e:	187b      	adds	r3, r7, r1
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	4a42      	ldr	r2, [pc, #264]	@ (80049ac <lfs_dir_orphaningcommit+0x50c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d005      	beq.n	80048b4 <lfs_dir_orphaningcommit+0x414>
 80048a8:	187b      	adds	r3, r7, r1
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	029b      	lsls	r3, r3, #10
 80048ae:	4a43      	ldr	r2, [pc, #268]	@ (80049bc <lfs_dir_orphaningcommit+0x51c>)
 80048b0:	431a      	orrs	r2, r3
 80048b2:	e000      	b.n	80048b6 <lfs_dir_orphaningcommit+0x416>
 80048b4:	2200      	movs	r2, #0
 80048b6:	2144      	movs	r1, #68	@ 0x44
 80048b8:	187b      	adds	r3, r7, r1
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	2200      	movs	r2, #0
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	23cc      	movs	r3, #204	@ 0xcc
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	187b      	adds	r3, r7, r1
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	187b      	adds	r3, r7, r1
 80048ce:	258c      	movs	r5, #140	@ 0x8c
 80048d0:	197a      	adds	r2, r7, r5
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	187b      	adds	r3, r7, r1
 80048d6:	2254      	movs	r2, #84	@ 0x54
 80048d8:	18ba      	adds	r2, r7, r2
 80048da:	216c      	movs	r1, #108	@ 0x6c
 80048dc:	1879      	adds	r1, r7, r1
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	2400      	movs	r4, #0
 80048e2:	9401      	str	r4, [sp, #4]
 80048e4:	2402      	movs	r4, #2
 80048e6:	9400      	str	r4, [sp, #0]
 80048e8:	f7ff faea 	bl	8003ec0 <lfs_dir_relocatingcommit>
 80048ec:	0003      	movs	r3, r0
 80048ee:	24d8      	movs	r4, #216	@ 0xd8
 80048f0:	193a      	adds	r2, r7, r4
 80048f2:	6013      	str	r3, [r2, #0]
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80048f4:	197b      	adds	r3, r7, r5
 80048f6:	0018      	movs	r0, r3
 80048f8:	f7fc fb24 	bl	8000f44 <lfs_pair_fromle32>
            if (state < 0) {
 80048fc:	0022      	movs	r2, r4
 80048fe:	18bb      	adds	r3, r7, r2
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	da02      	bge.n	800490c <lfs_dir_orphaningcommit+0x46c>
                return state;
 8004906:	18bb      	adds	r3, r7, r2
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	e115      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
            }

            if (state == LFS_OK_RELOCATED) {
 800490c:	23d8      	movs	r3, #216	@ 0xd8
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d118      	bne.n	8004948 <lfs_dir_orphaningcommit+0x4a8>
                lpair[0] = ppair[0];
 8004916:	2154      	movs	r1, #84	@ 0x54
 8004918:	187b      	adds	r3, r7, r1
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	20ac      	movs	r0, #172	@ 0xac
 800491e:	183b      	adds	r3, r7, r0
 8004920:	601a      	str	r2, [r3, #0]
                lpair[1] = ppair[1];
 8004922:	187b      	adds	r3, r7, r1
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	183b      	adds	r3, r7, r0
 8004928:	605a      	str	r2, [r3, #4]
                ldir = pdir;
 800492a:	238c      	movs	r3, #140	@ 0x8c
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	226c      	movs	r2, #108	@ 0x6c
 8004930:	18ba      	adds	r2, r7, r2
 8004932:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004934:	c313      	stmia	r3!, {r0, r1, r4}
 8004936:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004938:	c313      	stmia	r3!, {r0, r1, r4}
 800493a:	ca03      	ldmia	r2!, {r0, r1}
 800493c:	c303      	stmia	r3!, {r0, r1}
                orphans = true;
 800493e:	23d7      	movs	r3, #215	@ 0xd7
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	2201      	movs	r2, #1
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	e0e9      	b.n	8004b1c <lfs_dir_orphaningcommit+0x67c>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004948:	236c      	movs	r3, #108	@ 0x6c
 800494a:	18fa      	adds	r2, r7, r3
 800494c:	23ac      	movs	r3, #172	@ 0xac
 800494e:	18f9      	adds	r1, r7, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	0018      	movs	r0, r3
 8004954:	f002 fafa 	bl	8006f4c <lfs_fs_pred>
 8004958:	0003      	movs	r3, r0
 800495a:	22b8      	movs	r2, #184	@ 0xb8
 800495c:	18b9      	adds	r1, r7, r2
 800495e:	600b      	str	r3, [r1, #0]
        if (err && err != LFS_ERR_NOENT) {
 8004960:	18bb      	adds	r3, r7, r2
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d006      	beq.n	8004976 <lfs_dir_orphaningcommit+0x4d6>
 8004968:	18bb      	adds	r3, r7, r2
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3302      	adds	r3, #2
 800496e:	d002      	beq.n	8004976 <lfs_dir_orphaningcommit+0x4d6>
            return err;
 8004970:	18bb      	adds	r3, r7, r2
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	e0e0      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004976:	23c3      	movs	r3, #195	@ 0xc3
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d025      	beq.n	80049cc <lfs_dir_orphaningcommit+0x52c>
 8004980:	23b8      	movs	r3, #184	@ 0xb8
 8004982:	18fb      	adds	r3, r7, r3
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3302      	adds	r3, #2
 8004988:	d120      	bne.n	80049cc <lfs_dir_orphaningcommit+0x52c>
 800498a:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <lfs_dir_orphaningcommit+0x520>)
 800498c:	4a0d      	ldr	r2, [pc, #52]	@ (80049c4 <lfs_dir_orphaningcommit+0x524>)
 800498e:	490e      	ldr	r1, [pc, #56]	@ (80049c8 <lfs_dir_orphaningcommit+0x528>)
 8004990:	4803      	ldr	r0, [pc, #12]	@ (80049a0 <lfs_dir_orphaningcommit+0x500>)
 8004992:	f005 fd15 	bl	800a3c0 <__assert_func>
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	000ffc08 	.word	0x000ffc08
 800499c:	000009a9 	.word	0x000009a9
 80049a0:	0800b478 	.word	0x0800b478
 80049a4:	0800b704 	.word	0x0800b704
 80049a8:	0800b588 	.word	0x0800b588
 80049ac:	000003ff 	.word	0x000003ff
 80049b0:	000009d6 	.word	0x000009d6
 80049b4:	0800b740 	.word	0x0800b740
 80049b8:	fffffc00 	.word	0xfffffc00
 80049bc:	4ff00000 	.word	0x4ff00000
 80049c0:	0800b784 	.word	0x0800b784
 80049c4:	0800c33c 	.word	0x0800c33c
 80049c8:	000009f9 	.word	0x000009f9

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80049cc:	24b8      	movs	r4, #184	@ 0xb8
 80049ce:	193b      	adds	r3, r7, r4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3302      	adds	r3, #2
 80049d4:	d100      	bne.n	80049d8 <lfs_dir_orphaningcommit+0x538>
 80049d6:	e0a1      	b.n	8004b1c <lfs_dir_orphaningcommit+0x67c>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3330      	adds	r3, #48	@ 0x30
 80049dc:	0018      	movs	r0, r3
 80049de:	f7fc fbac 	bl	800113a <lfs_gstate_hasorphans>
 80049e2:	1e03      	subs	r3, r0, #0
 80049e4:	d014      	beq.n	8004a10 <lfs_dir_orphaningcommit+0x570>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);
 80049e6:	23c3      	movs	r3, #195	@ 0xc3
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	425b      	negs	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	b25a      	sxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	0011      	movs	r1, r2
 80049f6:	0018      	movs	r0, r3
 80049f8:	f002 fbbc 	bl	8007174 <lfs_fs_preporphans>
 80049fc:	0003      	movs	r3, r0
 80049fe:	193a      	adds	r2, r7, r4
 8004a00:	6013      	str	r3, [r2, #0]
                if (err) {
 8004a02:	193b      	adds	r3, r7, r4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <lfs_dir_orphaningcommit+0x570>
                    return err;
 8004a0a:	193b      	adds	r3, r7, r4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	e093      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004a10:	26c8      	movs	r6, #200	@ 0xc8
 8004a12:	19bb      	adds	r3, r7, r6
 8004a14:	4a4a      	ldr	r2, [pc, #296]	@ (8004b40 <lfs_dir_orphaningcommit+0x6a0>)
 8004a16:	801a      	strh	r2, [r3, #0]
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3330      	adds	r3, #48	@ 0x30
 8004a1c:	256c      	movs	r5, #108	@ 0x6c
 8004a1e:	197a      	adds	r2, r7, r5
 8004a20:	0011      	movs	r1, r2
 8004a22:	0018      	movs	r0, r3
 8004a24:	f7fc fbcc 	bl	80011c0 <lfs_gstate_hasmovehere>
 8004a28:	1e03      	subs	r3, r0, #0
 8004a2a:	d020      	beq.n	8004a6e <lfs_dir_orphaningcommit+0x5ce>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a30:	19bc      	adds	r4, r7, r6
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7fc fb1a 	bl	800106c <lfs_tag_id>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	8023      	strh	r3, [r4, #0]
                LFS_DEBUG("Fixing move while relocating "
 8004a3c:	002a      	movs	r2, r5
 8004a3e:	18bb      	adds	r3, r7, r2
 8004a40:	681d      	ldr	r5, [r3, #0]
 8004a42:	18bb      	adds	r3, r7, r2
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	19ba      	adds	r2, r7, r6
 8004a48:	8812      	ldrh	r2, [r2, #0]
 8004a4a:	4e3e      	ldr	r6, [pc, #248]	@ (8004b44 <lfs_dir_orphaningcommit+0x6a4>)
 8004a4c:	4c3e      	ldr	r4, [pc, #248]	@ (8004b48 <lfs_dir_orphaningcommit+0x6a8>)
 8004a4e:	483f      	ldr	r0, [pc, #252]	@ (8004b4c <lfs_dir_orphaningcommit+0x6ac>)
 8004a50:	493f      	ldr	r1, [pc, #252]	@ (8004b50 <lfs_dir_orphaningcommit+0x6b0>)
 8004a52:	9102      	str	r1, [sp, #8]
 8004a54:	9201      	str	r2, [sp, #4]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	002b      	movs	r3, r5
 8004a5a:	0032      	movs	r2, r6
 8004a5c:	0021      	movs	r1, r4
 8004a5e:	f005 fe67 	bl	800a730 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004a62:	4937      	ldr	r1, [pc, #220]	@ (8004b40 <lfs_dir_orphaningcommit+0x6a0>)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f002 fbd9 	bl	8007220 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004a6e:	216c      	movs	r1, #108	@ 0x6c
 8004a70:	187b      	adds	r3, r7, r1
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	20ac      	movs	r0, #172	@ 0xac
 8004a76:	183b      	adds	r3, r7, r0
 8004a78:	601a      	str	r2, [r3, #0]
            lpair[1] = pdir.pair[1];
 8004a7a:	187b      	adds	r3, r7, r1
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	183b      	adds	r3, r7, r0
 8004a80:	605a      	str	r2, [r3, #4]
            lfs_pair_tole32(ldir.pair);
 8004a82:	238c      	movs	r3, #140	@ 0x8c
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	0018      	movs	r0, r3
 8004a88:	f7fc fa76 	bl	8000f78 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004a8c:	21c8      	movs	r1, #200	@ 0xc8
 8004a8e:	187b      	adds	r3, r7, r1
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	4a2b      	ldr	r2, [pc, #172]	@ (8004b40 <lfs_dir_orphaningcommit+0x6a0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d005      	beq.n	8004aa4 <lfs_dir_orphaningcommit+0x604>
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	029b      	lsls	r3, r3, #10
 8004a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b54 <lfs_dir_orphaningcommit+0x6b4>)
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	e000      	b.n	8004aa6 <lfs_dir_orphaningcommit+0x606>
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2124      	movs	r1, #36	@ 0x24
 8004aa8:	187b      	adds	r3, r7, r1
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	187b      	adds	r3, r7, r1
 8004aae:	2200      	movs	r2, #0
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	206c      	movs	r0, #108	@ 0x6c
 8004ab4:	183b      	adds	r3, r7, r0
 8004ab6:	7ddb      	ldrb	r3, [r3, #23]
 8004ab8:	22c0      	movs	r2, #192	@ 0xc0
 8004aba:	00d2      	lsls	r2, r2, #3
 8004abc:	4694      	mov	ip, r2
 8004abe:	4463      	add	r3, ip
 8004ac0:	051b      	lsls	r3, r3, #20
 8004ac2:	4a25      	ldr	r2, [pc, #148]	@ (8004b58 <lfs_dir_orphaningcommit+0x6b8>)
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	187b      	adds	r3, r7, r1
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	187b      	adds	r3, r7, r1
 8004acc:	258c      	movs	r5, #140	@ 0x8c
 8004ace:	197a      	adds	r2, r7, r5
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	187b      	adds	r3, r7, r1
 8004ad4:	22ac      	movs	r2, #172	@ 0xac
 8004ad6:	18ba      	adds	r2, r7, r2
 8004ad8:	1839      	adds	r1, r7, r0
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	2400      	movs	r4, #0
 8004ade:	9401      	str	r4, [sp, #4]
 8004ae0:	2402      	movs	r4, #2
 8004ae2:	9400      	str	r4, [sp, #0]
 8004ae4:	f7ff f9ec 	bl	8003ec0 <lfs_dir_relocatingcommit>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	24d8      	movs	r4, #216	@ 0xd8
 8004aec:	193a      	adds	r2, r7, r4
 8004aee:	6013      	str	r3, [r2, #0]
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004af0:	197b      	adds	r3, r7, r5
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fc fa26 	bl	8000f44 <lfs_pair_fromle32>
            if (state < 0) {
 8004af8:	0022      	movs	r2, r4
 8004afa:	18bb      	adds	r3, r7, r2
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da02      	bge.n	8004b08 <lfs_dir_orphaningcommit+0x668>
                return state;
 8004b02:	18bb      	adds	r3, r7, r2
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	e017      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
            }

            ldir = pdir;
 8004b08:	238c      	movs	r3, #140	@ 0x8c
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	226c      	movs	r2, #108	@ 0x6c
 8004b0e:	18ba      	adds	r2, r7, r2
 8004b10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b12:	c313      	stmia	r3!, {r0, r1, r4}
 8004b14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b16:	c313      	stmia	r3!, {r0, r1, r4}
 8004b18:	ca03      	ldmia	r2!, {r0, r1}
 8004b1a:	c303      	stmia	r3!, {r0, r1}
    while (state == LFS_OK_RELOCATED) {
 8004b1c:	23d8      	movs	r3, #216	@ 0xd8
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d100      	bne.n	8004b28 <lfs_dir_orphaningcommit+0x688>
 8004b26:	e5bb      	b.n	80046a0 <lfs_dir_orphaningcommit+0x200>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004b28:	23d7      	movs	r3, #215	@ 0xd7
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <lfs_dir_orphaningcommit+0x696>
 8004b32:	2303      	movs	r3, #3
 8004b34:	e000      	b.n	8004b38 <lfs_dir_orphaningcommit+0x698>
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b039      	add	sp, #228	@ 0xe4
 8004b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b40:	000003ff 	.word	0x000003ff
 8004b44:	00000a0a 	.word	0x00000a0a
 8004b48:	0800b478 	.word	0x0800b478
 8004b4c:	0800b740 	.word	0x0800b740
 8004b50:	0800b588 	.word	0x0800b588
 8004b54:	4ff00000 	.word	0x4ff00000
 8004b58:	000ffc08 	.word	0x000ffc08

08004b5c <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7ff fc95 	bl	80044a0 <lfs_dir_orphaningcommit>
 8004b76:	0003      	movs	r3, r0
 8004b78:	617b      	str	r3, [r7, #20]
    if (orphans < 0) {
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da01      	bge.n	8004b84 <lfs_dir_commit+0x28>
        return orphans;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	e00f      	b.n	8004ba4 <lfs_dir_commit+0x48>
    }

    if (orphans) {
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <lfs_dir_commit+0x46>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f002 fc8a 	bl	80074a8 <lfs_fs_deorphan>
 8004b94:	0003      	movs	r3, r0
 8004b96:	613b      	str	r3, [r7, #16]
        if (err) {
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <lfs_dir_commit+0x46>
            return err;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	e000      	b.n	8004ba4 <lfs_dir_commit+0x48>
        }
    }

    return 0;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b006      	add	sp, #24
 8004baa:	bd80      	pop	{r7, pc}

08004bac <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004bac:	b590      	push	{r4, r7, lr}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	3b08      	subs	r3, #8
 8004bc4:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004bc6:	6939      	ldr	r1, [r7, #16]
 8004bc8:	6978      	ldr	r0, [r7, #20]
 8004bca:	f7fb faab 	bl	8000124 <__udivsi3>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <lfs_ctz_index+0x30>
        return 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e01e      	b.n	8004c1a <lfs_ctz_index+0x6e>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	0018      	movs	r0, r3
 8004be2:	f7fb fccb 	bl	800057c <lfs_popc>
 8004be6:	0003      	movs	r3, r0
 8004be8:	3302      	adds	r3, #2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	6939      	ldr	r1, [r7, #16]
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f7fb fa96 	bl	8000124 <__udivsi3>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4353      	muls	r3, r2
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	1ad4      	subs	r4, r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7fb fcb7 	bl	800057c <lfs_popc>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	1ae2      	subs	r2, r4, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	601a      	str	r2, [r3, #0]
    return i;
 8004c18:	68fb      	ldr	r3, [r7, #12]
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b007      	add	sp, #28
 8004c20:	bd90      	pop	{r4, r7, pc}

08004c22 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004c22:	b5b0      	push	{r4, r5, r7, lr}
 8004c24:	b08e      	sub	sp, #56	@ 0x38
 8004c26:	af04      	add	r7, sp, #16
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d108      	bne.n	8004c48 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4252      	negs	r2, r2
 8004c3c:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
        return 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e05a      	b.n	8004cfe <lfs_ctz_find+0xdc>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	2314      	movs	r3, #20
 8004c50:	18fa      	adds	r2, r7, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	0011      	movs	r1, r2
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7ff ffa8 	bl	8004bac <lfs_ctz_index>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004c60:	233c      	movs	r3, #60	@ 0x3c
 8004c62:	18fa      	adds	r2, r7, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	0011      	movs	r1, r2
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7ff ff9f 	bl	8004bac <lfs_ctz_index>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004c72:	e039      	b.n	8004ce8 <lfs_ctz_find+0xc6>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fb fc60 	bl	8000542 <lfs_npw2>
 8004c82:	0003      	movs	r3, r0
        lfs_size_t skip = lfs_min(
 8004c84:	1e5c      	subs	r4, r3, #1
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f7fb fc6b 	bl	8000564 <lfs_ctz>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	0019      	movs	r1, r3
 8004c92:	0020      	movs	r0, r4
 8004c94:	f7fb fc22 	bl	80004dc <lfs_min>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	61fb      	str	r3, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	0092      	lsls	r2, r2, #2
 8004ca2:	687d      	ldr	r5, [r7, #4]
 8004ca4:	68bc      	ldr	r4, [r7, #8]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	2104      	movs	r1, #4
 8004caa:	9103      	str	r1, [sp, #12]
 8004cac:	0039      	movs	r1, r7
 8004cae:	9102      	str	r1, [sp, #8]
 8004cb0:	9201      	str	r2, [sp, #4]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	002a      	movs	r2, r5
 8004cb8:	0021      	movs	r1, r4
 8004cba:	f7fb fce1 	bl	8000680 <lfs_bd_read>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	61bb      	str	r3, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7fb fc71 	bl	80005ac <lfs_fromle32>
 8004cca:	0003      	movs	r3, r0
 8004ccc:	603b      	str	r3, [r7, #0]
        if (err) {
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <lfs_ctz_find+0xb6>
            return err;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	e012      	b.n	8004cfe <lfs_ctz_find+0xdc>
        }

        current -= 1 << skip;
 8004cd8:	2201      	movs	r2, #1
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	0013      	movs	r3, r2
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8004ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d8c1      	bhi.n	8004c74 <lfs_ctz_find+0x52>
    }

    *block = head;
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cf4:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004cf6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cfa:	601a      	str	r2, [r3, #0]
    return 0;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b00a      	add	sp, #40	@ 0x28
 8004d04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d08 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004d08:	b5b0      	push	{r4, r5, r7, lr}
 8004d0a:	b092      	sub	sp, #72	@ 0x48
 8004d0c:	af04      	add	r7, sp, #16
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004d16:	2320      	movs	r3, #32
 8004d18:	18fa      	adds	r2, r7, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	0011      	movs	r1, r2
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f7fc fc8a 	bl	8001638 <lfs_alloc>
 8004d24:	0003      	movs	r3, r0
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (err) {
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <lfs_ctz_extend+0x2a>
            return err;
 8004d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d30:	e0f5      	b.n	8004f1e <lfs_ctz_extend+0x216>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004d32:	6a3a      	ldr	r2, [r7, #32]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	0011      	movs	r1, r2
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f7fc f80b 	bl	8000d54 <lfs_bd_erase>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (err) {
 8004d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <lfs_ctz_extend+0x4c>
                if (err == LFS_ERR_CORRUPT) {
 8004d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4a:	3354      	adds	r3, #84	@ 0x54
 8004d4c:	d100      	bne.n	8004d50 <lfs_ctz_extend+0x48>
 8004d4e:	e0d2      	b.n	8004ef6 <lfs_ctz_extend+0x1ee>
                    goto relocate;
                }
                return err;
 8004d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d52:	e0e4      	b.n	8004f1e <lfs_ctz_extend+0x216>
            }

            if (size == 0) {
 8004d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <lfs_ctz_extend+0x62>
                *block = nblock;
 8004d5a:	6a3a      	ldr	r2, [r7, #32]
 8004d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d5e:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
                return 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e0d9      	b.n	8004f1e <lfs_ctz_extend+0x216>
            }

            lfs_size_t noff = size - 1;
 8004d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004d70:	231c      	movs	r3, #28
 8004d72:	18fa      	adds	r2, r7, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7ff ff17 	bl	8004bac <lfs_ctz_index>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d046      	beq.n	8004e22 <lfs_ctz_extend+0x11a>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004d94:	2300      	movs	r3, #0
 8004d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d98:	e037      	b.n	8004e0a <lfs_ctz_extend+0x102>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d9e:	1ad1      	subs	r1, r2, r3
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	2301      	movs	r3, #1
 8004da6:	9303      	str	r3, [sp, #12]
 8004da8:	2317      	movs	r3, #23
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	9302      	str	r3, [sp, #8]
 8004dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	000b      	movs	r3, r1
 8004db8:	2100      	movs	r1, #0
 8004dba:	f7fb fc61 	bl	8000680 <lfs_bd_read>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <lfs_ctz_extend+0xc4>
                        return err;
 8004dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dca:	e0a8      	b.n	8004f1e <lfs_ctz_extend+0x216>
                    }

                    err = lfs_bd_prog(lfs,
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	687c      	ldr	r4, [r7, #4]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	9203      	str	r2, [sp, #12]
 8004dd8:	2217      	movs	r2, #23
 8004dda:	18ba      	adds	r2, r7, r2
 8004ddc:	9202      	str	r2, [sp, #8]
 8004dde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004de0:	9201      	str	r2, [sp, #4]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2301      	movs	r3, #1
 8004de6:	0022      	movs	r2, r4
 8004de8:	f7fb ff00 	bl	8000bec <lfs_bd_prog>
 8004dec:	0003      	movs	r3, r0
 8004dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8004df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d006      	beq.n	8004e04 <lfs_ctz_extend+0xfc>
                        if (err == LFS_ERR_CORRUPT) {
 8004df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df8:	3354      	adds	r3, #84	@ 0x54
 8004dfa:	d101      	bne.n	8004e00 <lfs_ctz_extend+0xf8>
                            goto relocate;
 8004dfc:	46c0      	nop			@ (mov r8, r8)
                    goto relocate;
 8004dfe:	e07a      	b.n	8004ef6 <lfs_ctz_extend+0x1ee>
                        }
                        return err;
 8004e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 8004e02:	e08c      	b.n	8004f1e <lfs_ctz_extend+0x216>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e06:	3301      	adds	r3, #1
 8004e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d3c3      	bcc.n	8004d9a <lfs_ctz_extend+0x92>
                    }
                }

                *block = nblock;
 8004e12:	6a3a      	ldr	r2, [r7, #32]
 8004e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e16:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e1c:	601a      	str	r2, [r3, #0]
                return 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e07d      	b.n	8004f1e <lfs_ctz_extend+0x216>
            }

            // append block
            index += 1;
 8004e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e24:	3301      	adds	r3, #1
 8004e26:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f7fb fb9a 	bl	8000564 <lfs_ctz>
 8004e30:	0003      	movs	r3, r0
 8004e32:	3301      	adds	r3, #1
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e3e:	e04d      	b.n	8004edc <lfs_ctz_extend+0x1d4>
                nhead = lfs_tole32(nhead);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7fb fbbb 	bl	80005be <lfs_tole32>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e50:	0092      	lsls	r2, r2, #2
 8004e52:	687d      	ldr	r5, [r7, #4]
 8004e54:	68bc      	ldr	r4, [r7, #8]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	2104      	movs	r1, #4
 8004e5a:	9103      	str	r1, [sp, #12]
 8004e5c:	2118      	movs	r1, #24
 8004e5e:	1879      	adds	r1, r7, r1
 8004e60:	9102      	str	r1, [sp, #8]
 8004e62:	9201      	str	r2, [sp, #4]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	2301      	movs	r3, #1
 8004e68:	002a      	movs	r2, r5
 8004e6a:	0021      	movs	r1, r4
 8004e6c:	f7fb febe 	bl	8000bec <lfs_bd_prog>
 8004e70:	0003      	movs	r3, r0
 8004e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7fb fb98 	bl	80005ac <lfs_fromle32>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <lfs_ctz_extend+0x188>
                    if (err == LFS_ERR_CORRUPT) {
 8004e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e88:	3354      	adds	r3, #84	@ 0x54
 8004e8a:	d036      	beq.n	8004efa <lfs_ctz_extend+0x1f2>
                        goto relocate;
                    }
                    return err;
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	e046      	b.n	8004f1e <lfs_ctz_extend+0x216>
                }

                if (i != skips-1) {
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	3b01      	subs	r3, #1
 8004e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d01d      	beq.n	8004ed6 <lfs_ctz_extend+0x1ce>
                    err = lfs_bd_read(lfs,
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e9e:	0092      	lsls	r2, r2, #2
 8004ea0:	687c      	ldr	r4, [r7, #4]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	2104      	movs	r1, #4
 8004ea6:	9103      	str	r1, [sp, #12]
 8004ea8:	2118      	movs	r1, #24
 8004eaa:	1879      	adds	r1, r7, r1
 8004eac:	9102      	str	r1, [sp, #8]
 8004eae:	9201      	str	r2, [sp, #4]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	0022      	movs	r2, r4
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	f7fb fbe2 	bl	8000680 <lfs_bd_read>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f7fb fb72 	bl	80005ac <lfs_fromle32>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <lfs_ctz_extend+0x1ce>
                        return err;
 8004ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed4:	e023      	b.n	8004f1e <lfs_ctz_extend+0x216>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	3301      	adds	r3, #1
 8004eda:	633b      	str	r3, [r7, #48]	@ 0x30
 8004edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d3ad      	bcc.n	8004e40 <lfs_ctz_extend+0x138>
                    }
                }
            }

            *block = nblock;
 8004ee4:	6a3a      	ldr	r2, [r7, #32]
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ee8:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	009a      	lsls	r2, r3, #2
 8004eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ef0:	601a      	str	r2, [r3, #0]
            return 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e013      	b.n	8004f1e <lfs_ctz_extend+0x216>
                    goto relocate;
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	e000      	b.n	8004efc <lfs_ctz_extend+0x1f4>
                        goto relocate;
 8004efa:	46c0      	nop			@ (mov r8, r8)
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004efc:	6a3a      	ldr	r2, [r7, #32]
 8004efe:	4c0a      	ldr	r4, [pc, #40]	@ (8004f28 <lfs_ctz_extend+0x220>)
 8004f00:	490a      	ldr	r1, [pc, #40]	@ (8004f2c <lfs_ctz_extend+0x224>)
 8004f02:	480b      	ldr	r0, [pc, #44]	@ (8004f30 <lfs_ctz_extend+0x228>)
 8004f04:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <lfs_ctz_extend+0x22c>)
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	0013      	movs	r3, r2
 8004f0a:	0022      	movs	r2, r4
 8004f0c:	f005 fc10 	bl	800a730 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	0011      	movs	r1, r2
 8004f16:	0018      	movs	r0, r3
 8004f18:	f7fb fb8e 	bl	8000638 <lfs_cache_drop>
    while (true) {
 8004f1c:	e6fb      	b.n	8004d16 <lfs_ctz_extend+0xe>
    }
}
 8004f1e:	0018      	movs	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b00e      	add	sp, #56	@ 0x38
 8004f24:	bdb0      	pop	{r4, r5, r7, pc}
 8004f26:	46c0      	nop			@ (mov r8, r8)
 8004f28:	00000bc3 	.word	0x00000bc3
 8004f2c:	0800b478 	.word	0x0800b478
 8004f30:	0800b604 	.word	0x0800b604
 8004f34:	0800b588 	.word	0x0800b588

08004f38 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004f38:	b5b0      	push	{r4, r5, r7, lr}
 8004f3a:	b090      	sub	sp, #64	@ 0x40
 8004f3c:	af04      	add	r7, sp, #16
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <lfs_ctz_traverse+0x18>
        return 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e072      	b.n	8005036 <lfs_ctz_traverse+0xfe>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f52:	3b01      	subs	r3, #1
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	231c      	movs	r3, #28
 8004f58:	18fa      	adds	r2, r7, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	0011      	movs	r1, r2
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f7ff fe24 	bl	8004bac <lfs_ctz_index>
 8004f64:	0003      	movs	r3, r0
 8004f66:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f6e:	0010      	movs	r0, r2
 8004f70:	4798      	blx	r3
 8004f72:	0003      	movs	r3, r0
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
        if (err) {
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <lfs_ctz_traverse+0x48>
            return err;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7e:	e05a      	b.n	8005036 <lfs_ctz_traverse+0xfe>
        }

        if (index == 0) {
 8004f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <lfs_ctz_traverse+0x52>
            return 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	e055      	b.n	8005036 <lfs_ctz_traverse+0xfe>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2202      	movs	r2, #2
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004f96:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004f98:	009c      	lsls	r4, r3, #2
        err = lfs_bd_read(lfs,
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004f9c:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	9303      	str	r3, [sp, #12]
 8004fa6:	2514      	movs	r5, #20
 8004fa8:	197b      	adds	r3, r7, r5
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	2300      	movs	r3, #0
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	0023      	movs	r3, r4
 8004fb6:	f7fb fb63 	bl	8000680 <lfs_bd_read>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004fbe:	197b      	adds	r3, r7, r5
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f7fb faf2 	bl	80005ac <lfs_fromle32>
 8004fc8:	0002      	movs	r2, r0
 8004fca:	197b      	adds	r3, r7, r5
 8004fcc:	601a      	str	r2, [r3, #0]
        heads[1] = lfs_fromle32(heads[1]);
 8004fce:	197b      	adds	r3, r7, r5
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f7fb faea 	bl	80005ac <lfs_fromle32>
 8004fd8:	0002      	movs	r2, r0
 8004fda:	197b      	adds	r3, r7, r5
 8004fdc:	605a      	str	r2, [r3, #4]
        if (err) {
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <lfs_ctz_traverse+0xb0>
            return err;
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	e026      	b.n	8005036 <lfs_ctz_traverse+0xfe>
        }

        for (int i = 0; i < count-1; i++) {
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fec:	e012      	b.n	8005014 <lfs_ctz_traverse+0xdc>
            err = cb(data, heads[i]);
 8004fee:	2314      	movs	r3, #20
 8004ff0:	18fb      	adds	r3, r7, r3
 8004ff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ff4:	0092      	lsls	r2, r2, #2
 8004ff6:	58d1      	ldr	r1, [r2, r3]
 8004ff8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ffc:	0010      	movs	r0, r2
 8004ffe:	4798      	blx	r3
 8005000:	0003      	movs	r3, r0
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
            if (err) {
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <lfs_ctz_traverse+0xd6>
                return err;
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	e013      	b.n	8005036 <lfs_ctz_traverse+0xfe>
        for (int i = 0; i < count-1; i++) {
 800500e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005010:	3301      	adds	r3, #1
 8005012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	3b01      	subs	r3, #1
 8005018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800501a:	429a      	cmp	r2, r3
 800501c:	dbe7      	blt.n	8004fee <lfs_ctz_traverse+0xb6>
            }
        }

        head = heads[count-1];
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	1e5a      	subs	r2, r3, #1
 8005022:	2314      	movs	r3, #20
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	0092      	lsls	r2, r2, #2
 8005028:	58d3      	ldr	r3, [r2, r3]
 800502a:	603b      	str	r3, [r7, #0]
        index -= count;
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8005034:	e798      	b.n	8004f68 <lfs_ctz_traverse+0x30>
    }
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b00c      	add	sp, #48	@ 0x30
 800503c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005040 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8005040:	b5b0      	push	{r4, r5, r7, lr}
 8005042:	b09a      	sub	sp, #104	@ 0x68
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2202      	movs	r2, #2
 8005052:	4013      	ands	r3, r2
 8005054:	d00a      	beq.n	800506c <lfs_file_opencfg_+0x2c>
        int err = lfs_fs_forceconsistency(lfs);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	0018      	movs	r0, r3
 800505a:	f002 fc11 	bl	8007880 <lfs_fs_forceconsistency>
 800505e:	0003      	movs	r3, r0
 8005060:	653b      	str	r3, [r7, #80]	@ 0x50
        if (err) {
 8005062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <lfs_file_opencfg_+0x2c>
            return err;
 8005068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800506a:	e1cd      	b.n	8005408 <lfs_file_opencfg_+0x3c8>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005070:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2200      	movs	r2, #0
 800507c:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2200      	movs	r2, #0
 8005082:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2200      	movs	r2, #0
 8005088:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	3308      	adds	r3, #8
 800508e:	0019      	movs	r1, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	3304      	adds	r3, #4
 8005094:	1d3a      	adds	r2, r7, #4
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7fd ff1c 	bl	8002ed4 <lfs_dir_find>
 800509c:	0003      	movs	r3, r0
 800509e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && lfs_path_islast(path))) {
 80050a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	da10      	bge.n	80050c8 <lfs_file_opencfg_+0x88>
 80050a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050a8:	3302      	adds	r3, #2
 80050aa:	d10a      	bne.n	80050c2 <lfs_file_opencfg_+0x82>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7fb fe94 	bl	8000ddc <lfs_path_islast>
 80050b4:	0003      	movs	r3, r0
 80050b6:	001a      	movs	r2, r3
 80050b8:	2301      	movs	r3, #1
 80050ba:	4053      	eors	r3, r2
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <lfs_file_opencfg_+0x88>
        err = tag;
 80050c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 80050c6:	e191      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2201      	movs	r2, #1
 80050cc:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	0011      	movs	r1, r2
 80050d4:	0018      	movs	r0, r3
 80050d6:	f7fc f9de 	bl	8001496 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80050da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050dc:	3302      	adds	r3, #2
 80050de:	d15c      	bne.n	800519a <lfs_file_opencfg_+0x15a>
        if (!(flags & LFS_O_CREAT)) {
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	2380      	movs	r3, #128	@ 0x80
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	4013      	ands	r3, r2
 80050e8:	d103      	bne.n	80050f2 <lfs_file_opencfg_+0xb2>
            err = LFS_ERR_NOENT;
 80050ea:	2302      	movs	r3, #2
 80050ec:	425b      	negs	r3, r3
 80050ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80050f0:	e17c      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
        }

        // don't allow trailing slashes
        if (lfs_path_isdir(path)) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7fb fe93 	bl	8000e20 <lfs_path_isdir>
 80050fa:	1e03      	subs	r3, r0, #0
 80050fc:	d003      	beq.n	8005106 <lfs_file_opencfg_+0xc6>
            err = LFS_ERR_NOTDIR;
 80050fe:	2314      	movs	r3, #20
 8005100:	425b      	negs	r3, r3
 8005102:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8005104:	e172      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
        }

        // check that name fits
        lfs_size_t nlen = lfs_path_namelen(path);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0018      	movs	r0, r3
 800510a:	f7fb fe55 	bl	8000db8 <lfs_path_namelen>
 800510e:	0003      	movs	r3, r0
 8005110:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005116:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005118:	429a      	cmp	r2, r3
 800511a:	d903      	bls.n	8005124 <lfs_file_opencfg_+0xe4>
            err = LFS_ERR_NAMETOOLONG;
 800511c:	2324      	movs	r3, #36	@ 0x24
 800511e:	425b      	negs	r3, r3
 8005120:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8005122:	e163      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	3308      	adds	r3, #8
 8005128:	0019      	movs	r1, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	889b      	ldrh	r3, [r3, #4]
 800512e:	029b      	lsls	r3, r3, #10
 8005130:	4ab7      	ldr	r2, [pc, #732]	@ (8005410 <lfs_file_opencfg_+0x3d0>)
 8005132:	431a      	orrs	r2, r3
 8005134:	202c      	movs	r0, #44	@ 0x2c
 8005136:	183b      	adds	r3, r7, r0
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	183b      	adds	r3, r7, r0
 800513c:	2200      	movs	r2, #0
 800513e:	605a      	str	r2, [r3, #4]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	889b      	ldrh	r3, [r3, #4]
 8005144:	029a      	lsls	r2, r3, #10
 8005146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005148:	4313      	orrs	r3, r2
 800514a:	2280      	movs	r2, #128	@ 0x80
 800514c:	0352      	lsls	r2, r2, #13
 800514e:	431a      	orrs	r2, r3
 8005150:	183b      	adds	r3, r7, r0
 8005152:	609a      	str	r2, [r3, #8]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	183b      	adds	r3, r7, r0
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	889b      	ldrh	r3, [r3, #4]
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	4aac      	ldr	r2, [pc, #688]	@ (8005414 <lfs_file_opencfg_+0x3d4>)
 8005162:	431a      	orrs	r2, r3
 8005164:	183b      	adds	r3, r7, r0
 8005166:	611a      	str	r2, [r3, #16]
 8005168:	183b      	adds	r3, r7, r0
 800516a:	2200      	movs	r2, #0
 800516c:	615a      	str	r2, [r3, #20]
 800516e:	183a      	adds	r2, r7, r0
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	2303      	movs	r3, #3
 8005174:	f7ff fcf2 	bl	8004b5c <lfs_dir_commit>
 8005178:	0003      	movs	r3, r0
 800517a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 800517c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800517e:	331c      	adds	r3, #28
 8005180:	d001      	beq.n	8005186 <lfs_file_opencfg_+0x146>
 8005182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005184:	e001      	b.n	800518a <lfs_file_opencfg_+0x14a>
 8005186:	2324      	movs	r3, #36	@ 0x24
 8005188:	425b      	negs	r3, r3
 800518a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 800518c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d000      	beq.n	8005194 <lfs_file_opencfg_+0x154>
 8005192:	e12a      	b.n	80053ea <lfs_file_opencfg_+0x3aa>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8005194:	4b9f      	ldr	r3, [pc, #636]	@ (8005414 <lfs_file_opencfg_+0x3d4>)
 8005196:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005198:	e044      	b.n	8005224 <lfs_file_opencfg_+0x1e4>
    } else if (flags & LFS_O_EXCL) {
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	2380      	movs	r3, #128	@ 0x80
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4013      	ands	r3, r2
 80051a2:	d003      	beq.n	80051ac <lfs_file_opencfg_+0x16c>
        err = LFS_ERR_EXIST;
 80051a4:	2311      	movs	r3, #17
 80051a6:	425b      	negs	r3, r3
 80051a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 80051aa:	e11f      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80051ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051ae:	0018      	movs	r0, r3
 80051b0:	f7fb ff35 	bl	800101e <lfs_tag_type3>
 80051b4:	0003      	movs	r3, r0
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d003      	beq.n	80051c2 <lfs_file_opencfg_+0x182>
        err = LFS_ERR_ISDIR;
 80051ba:	2315      	movs	r3, #21
 80051bc:	425b      	negs	r3, r3
 80051be:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 80051c0:	e114      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	2380      	movs	r3, #128	@ 0x80
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4013      	ands	r3, r2
 80051ca:	d00d      	beq.n	80051e8 <lfs_file_opencfg_+0x1a8>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	889b      	ldrh	r3, [r3, #4]
 80051d0:	029b      	lsls	r3, r3, #10
 80051d2:	4a90      	ldr	r2, [pc, #576]	@ (8005414 <lfs_file_opencfg_+0x3d4>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	2280      	movs	r2, #128	@ 0x80
 80051de:	0252      	lsls	r2, r2, #9
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80051e6:	e01d      	b.n	8005224 <lfs_file_opencfg_+0x1e4>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	3308      	adds	r3, #8
 80051ec:	0019      	movs	r1, r3
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	889b      	ldrh	r3, [r3, #4]
 80051f2:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80051f4:	4a88      	ldr	r2, [pc, #544]	@ (8005418 <lfs_file_opencfg_+0x3d8>)
 80051f6:	431a      	orrs	r2, r3
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	3328      	adds	r3, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80051fc:	4c87      	ldr	r4, [pc, #540]	@ (800541c <lfs_file_opencfg_+0x3dc>)
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	0013      	movs	r3, r2
 8005204:	0022      	movs	r2, r4
 8005206:	f7fc fba9 	bl	800195c <lfs_dir_get>
 800520a:	0003      	movs	r3, r0
 800520c:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (tag < 0) {
 800520e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005210:	2b00      	cmp	r3, #0
 8005212:	da02      	bge.n	800521a <lfs_file_opencfg_+0x1da>
            err = tag;
 8005214:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005216:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8005218:	e0e8      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
        }
        lfs_ctz_fromle32(&file->ctz);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	3328      	adds	r3, #40	@ 0x28
 800521e:	0018      	movs	r0, r3
 8005220:	f7fc f85e 	bl	80012e0 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005224:	2300      	movs	r3, #0
 8005226:	657b      	str	r3, [r7, #84]	@ 0x54
 8005228:	e064      	b.n	80052f4 <lfs_file_opencfg_+0x2b4>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522e:	2201      	movs	r2, #1
 8005230:	4013      	ands	r3, r2
 8005232:	d03e      	beq.n	80052b2 <lfs_file_opencfg_+0x272>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	3308      	adds	r3, #8
 8005238:	001c      	movs	r4, r3
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800523e:	6859      	ldr	r1, [r3, #4]
 8005240:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005242:	0013      	movs	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	189b      	adds	r3, r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	18cb      	adds	r3, r1, r3
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	22c0      	movs	r2, #192	@ 0xc0
 8005250:	0092      	lsls	r2, r2, #2
 8005252:	4694      	mov	ip, r2
 8005254:	4463      	add	r3, ip
 8005256:	051a      	lsls	r2, r3, #20
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	889b      	ldrh	r3, [r3, #4]
 800525c:	029b      	lsls	r3, r3, #10
 800525e:	431a      	orrs	r2, r3
 8005260:	0011      	movs	r1, r2
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005266:	6858      	ldr	r0, [r3, #4]
 8005268:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800526a:	0013      	movs	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	189b      	adds	r3, r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	18c3      	adds	r3, r0, r3
 8005274:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005276:	4319      	orrs	r1, r3
 8005278:	000d      	movs	r5, r1
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005282:	0013      	movs	r3, r2
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	189b      	adds	r3, r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	18cb      	adds	r3, r1, r3
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4a64      	ldr	r2, [pc, #400]	@ (8005420 <lfs_file_opencfg_+0x3e0>)
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	002b      	movs	r3, r5
 8005296:	0021      	movs	r1, r4
 8005298:	f7fc fb60 	bl	800195c <lfs_dir_get>
 800529c:	0003      	movs	r3, r0
 800529e:	647b      	str	r3, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80052a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da05      	bge.n	80052b2 <lfs_file_opencfg_+0x272>
 80052a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052a8:	3302      	adds	r3, #2
 80052aa:	d002      	beq.n	80052b2 <lfs_file_opencfg_+0x272>
                err = res;
 80052ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80052b0:	e09c      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	2202      	movs	r2, #2
 80052b8:	4013      	ands	r3, r2
 80052ba:	d018      	beq.n	80052ee <lfs_file_opencfg_+0x2ae>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c0:	6859      	ldr	r1, [r3, #4]
 80052c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052c4:	0013      	movs	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	18cb      	adds	r3, r1, r3
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d903      	bls.n	80052e0 <lfs_file_opencfg_+0x2a0>
                err = LFS_ERR_NOSPC;
 80052d8:	231c      	movs	r3, #28
 80052da:	425b      	negs	r3, r3
 80052dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80052de:	e085      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
            }

            file->flags |= LFS_F_DIRTY;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e4:	2280      	movs	r2, #128	@ 0x80
 80052e6:	0252      	lsls	r2, r2, #9
 80052e8:	431a      	orrs	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80052ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f0:	3301      	adds	r3, #1
 80052f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d394      	bcc.n	800522a <lfs_file_opencfg_+0x1ea>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <lfs_file_opencfg_+0x2d6>
        file->cache.buffer = file->cfg->buffer;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005314:	e010      	b.n	8005338 <lfs_file_opencfg_+0x2f8>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	0018      	movs	r0, r3
 800531e:	f7fb f972 	bl	8000606 <lfs_malloc>
 8005322:	0002      	movs	r2, r0
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <lfs_file_opencfg_+0x2f8>
            err = LFS_ERR_NOMEM;
 8005330:	230c      	movs	r3, #12
 8005332:	425b      	negs	r3, r3
 8005334:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8005336:	e059      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	3340      	adds	r3, #64	@ 0x40
 800533c:	001a      	movs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	0011      	movs	r1, r2
 8005342:	0018      	movs	r0, r3
 8005344:	f7fb f985 	bl	8000652 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8005348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800534a:	0018      	movs	r0, r3
 800534c:	f7fb fe67 	bl	800101e <lfs_tag_type3>
 8005350:	0003      	movs	r3, r0
 8005352:	001a      	movs	r2, r3
 8005354:	4b33      	ldr	r3, [pc, #204]	@ (8005424 <lfs_file_opencfg_+0x3e4>)
 8005356:	429a      	cmp	r2, r3
 8005358:	d145      	bne.n	80053e6 <lfs_file_opencfg_+0x3a6>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2202      	movs	r2, #2
 800535e:	4252      	negs	r2, r2
 8005360:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8005362:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005364:	0018      	movs	r0, r3
 8005366:	f7fb fe8f 	bl	8001088 <lfs_tag_size>
 800536a:	0002      	movs	r2, r0
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005374:	2280      	movs	r2, #128	@ 0x80
 8005376:	0352      	lsls	r2, r2, #13
 8005378:	431a      	orrs	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d023      	beq.n	80053e6 <lfs_file_opencfg_+0x3a6>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	3308      	adds	r3, #8
 80053a2:	001d      	movs	r5, r3
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	889b      	ldrh	r3, [r3, #4]
 80053a8:	029c      	lsls	r4, r3, #10
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005428 <lfs_file_opencfg_+0x3e8>)
 80053b0:	0011      	movs	r1, r2
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7fb f892 	bl	80004dc <lfs_min>
 80053b8:	0003      	movs	r3, r0
 80053ba:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80053bc:	2280      	movs	r2, #128	@ 0x80
 80053be:	0592      	lsls	r2, r2, #22
 80053c0:	431a      	orrs	r2, r3
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80053c6:	4915      	ldr	r1, [pc, #84]	@ (800541c <lfs_file_opencfg_+0x3dc>)
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	0013      	movs	r3, r2
 80053ce:	000a      	movs	r2, r1
 80053d0:	0029      	movs	r1, r5
 80053d2:	f7fc fac3 	bl	800195c <lfs_dir_get>
 80053d6:	0003      	movs	r3, r0
 80053d8:	64bb      	str	r3, [r7, #72]	@ 0x48
            if (res < 0) {
 80053da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053dc:	2b00      	cmp	r3, #0
 80053de:	da02      	bge.n	80053e6 <lfs_file_opencfg_+0x3a6>
                err = res;
 80053e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80053e4:	e002      	b.n	80053ec <lfs_file_opencfg_+0x3ac>
            }
        }
    }

    return 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e00e      	b.n	8005408 <lfs_file_opencfg_+0x3c8>
            goto cleanup;
 80053ea:	46c0      	nop			@ (mov r8, r8)

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f0:	2280      	movs	r2, #128	@ 0x80
 80053f2:	0312      	lsls	r2, r2, #12
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	0011      	movs	r1, r2
 8005400:	0018      	movs	r0, r3
 8005402:	f000 f82d 	bl	8005460 <lfs_file_close_>
    return err;
 8005406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8005408:	0018      	movs	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	b018      	add	sp, #96	@ 0x60
 800540e:	bdb0      	pop	{r4, r5, r7, pc}
 8005410:	40100000 	.word	0x40100000
 8005414:	20100000 	.word	0x20100000
 8005418:	20000008 	.word	0x20000008
 800541c:	700ffc00 	.word	0x700ffc00
 8005420:	7ffffc00 	.word	0x7ffffc00
 8005424:	00000201 	.word	0x00000201
 8005428:	000003fe 	.word	0x000003fe

0800542c <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 800542c:	b590      	push	{r4, r7, lr}
 800542e:	b089      	sub	sp, #36	@ 0x24
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 800543a:	683c      	ldr	r4, [r7, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <lfs_file_open_+0x30>)
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	0023      	movs	r3, r4
 8005448:	f7ff fdfa 	bl	8005040 <lfs_file_opencfg_>
 800544c:	0003      	movs	r3, r0
 800544e:	617b      	str	r3, [r7, #20]
    return err;
 8005450:	697b      	ldr	r3, [r7, #20]
}
 8005452:	0018      	movs	r0, r3
 8005454:	46bd      	mov	sp, r7
 8005456:	b007      	add	sp, #28
 8005458:	bd90      	pop	{r4, r7, pc}
 800545a:	46c0      	nop			@ (mov r8, r8)
 800545c:	0800c354 	.word	0x0800c354

08005460 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	0011      	movs	r1, r2
 8005470:	0018      	movs	r0, r3
 8005472:	f000 fa11 	bl	8005898 <lfs_file_sync_>
 8005476:	0003      	movs	r3, r0
 8005478:	60fb      	str	r3, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	0011      	movs	r1, r2
 8005480:	0018      	movs	r0, r3
 8005482:	f7fb ffe8 	bl	8001456 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <lfs_file_close_+0x3a>
        lfs_free(file->cache.buffer);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005494:	0018      	movs	r0, r3
 8005496:	f7fb f8c3 	bl	8000620 <lfs_free>
    }

    return err;
 800549a:	68fb      	ldr	r3, [r7, #12]
}
 800549c:	0018      	movs	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	b004      	add	sp, #16
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80054a4:	b5b0      	push	{r4, r5, r7, lr}
 80054a6:	b08c      	sub	sp, #48	@ 0x30
 80054a8:	af06      	add	r7, sp, #24
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80054ae:	230c      	movs	r3, #12
 80054b0:	18fa      	adds	r2, r7, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0011      	movs	r1, r2
 80054b6:	0018      	movs	r0, r3
 80054b8:	f7fc f8be 	bl	8001638 <lfs_alloc>
 80054bc:	0003      	movs	r3, r0
 80054be:	613b      	str	r3, [r7, #16]
        if (err) {
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <lfs_file_relocate+0x26>
            return err;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	e0c2      	b.n	8005650 <lfs_file_relocate+0x1ac>
        }

        err = lfs_bd_erase(lfs, nblock);
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0011      	movs	r1, r2
 80054d0:	0018      	movs	r0, r3
 80054d2:	f7fb fc3f 	bl	8000d54 <lfs_bd_erase>
 80054d6:	0003      	movs	r3, r0
 80054d8:	613b      	str	r3, [r7, #16]
        if (err) {
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <lfs_file_relocate+0x48>
            if (err == LFS_ERR_CORRUPT) {
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	3354      	adds	r3, #84	@ 0x54
 80054e4:	d100      	bne.n	80054e8 <lfs_file_relocate+0x44>
 80054e6:	e09d      	b.n	8005624 <lfs_file_relocate+0x180>
                goto relocate;
            }
            return err;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	e0b1      	b.n	8005650 <lfs_file_relocate+0x1ac>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	e069      	b.n	80055c6 <lfs_file_relocate+0x122>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054f6:	2380      	movs	r3, #128	@ 0x80
 80054f8:	035b      	lsls	r3, r3, #13
 80054fa:	4013      	ands	r3, r2
 80054fc:	d026      	beq.n	800554c <lfs_file_relocate+0xa8>
                err = lfs_dir_getread(lfs, &file->m,
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	001c      	movs	r4, r3
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	3340      	adds	r3, #64	@ 0x40
 8005508:	001d      	movs	r5, r3
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	1ad3      	subs	r3, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	8892      	ldrh	r2, [r2, #4]
 8005516:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 8005518:	494f      	ldr	r1, [pc, #316]	@ (8005658 <lfs_file_relocate+0x1b4>)
 800551a:	430a      	orrs	r2, r1
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	2101      	movs	r1, #1
 8005520:	9105      	str	r1, [sp, #20]
 8005522:	210b      	movs	r1, #11
 8005524:	1879      	adds	r1, r7, r1
 8005526:	9104      	str	r1, [sp, #16]
 8005528:	6979      	ldr	r1, [r7, #20]
 800552a:	9103      	str	r1, [sp, #12]
 800552c:	9202      	str	r2, [sp, #8]
 800552e:	4a4b      	ldr	r2, [pc, #300]	@ (800565c <lfs_file_relocate+0x1b8>)
 8005530:	9201      	str	r2, [sp, #4]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	002b      	movs	r3, r5
 8005536:	2200      	movs	r2, #0
 8005538:	0021      	movs	r1, r4
 800553a:	f7fc fa2c 	bl	8001996 <lfs_dir_getread>
 800553e:	0003      	movs	r3, r0
 8005540:	613b      	str	r3, [r7, #16]
                        i, &data, 1);
                if (err) {
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01f      	beq.n	8005588 <lfs_file_relocate+0xe4>
                    return err;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	e081      	b.n	8005650 <lfs_file_relocate+0x1ac>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	3340      	adds	r3, #64	@ 0x40
 8005550:	0019      	movs	r1, r3
                err = lfs_bd_read(lfs,
 8005552:	687c      	ldr	r4, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad5      	subs	r5, r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	9203      	str	r2, [sp, #12]
 8005566:	220b      	movs	r2, #11
 8005568:	18ba      	adds	r2, r7, r2
 800556a:	9202      	str	r2, [sp, #8]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	9201      	str	r2, [sp, #4]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	002b      	movs	r3, r5
 8005574:	0022      	movs	r2, r4
 8005576:	f7fb f883 	bl	8000680 <lfs_bd_read>
 800557a:	0003      	movs	r3, r0
 800557c:	613b      	str	r3, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <lfs_file_relocate+0xe4>
                    return err;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	e063      	b.n	8005650 <lfs_file_relocate+0x1ac>
                }
            }

            err = lfs_bd_prog(lfs,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3310      	adds	r3, #16
 800558c:	0019      	movs	r1, r3
 800558e:	687c      	ldr	r4, [r7, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	9203      	str	r2, [sp, #12]
 8005598:	220b      	movs	r2, #11
 800559a:	18ba      	adds	r2, r7, r2
 800559c:	9202      	str	r2, [sp, #8]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	9201      	str	r2, [sp, #4]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	2301      	movs	r3, #1
 80055a6:	0022      	movs	r2, r4
 80055a8:	f7fb fb20 	bl	8000bec <lfs_bd_prog>
 80055ac:	0003      	movs	r3, r0
 80055ae:	613b      	str	r3, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <lfs_file_relocate+0x11c>
                if (err == LFS_ERR_CORRUPT) {
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3354      	adds	r3, #84	@ 0x54
 80055ba:	d035      	beq.n	8005628 <lfs_file_relocate+0x184>
                    goto relocate;
                }
                return err;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	e047      	b.n	8005650 <lfs_file_relocate+0x1ac>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	3301      	adds	r3, #1
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d390      	bcc.n	80054f2 <lfs_file_relocate+0x4e>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69d9      	ldr	r1, [r3, #28]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	001a      	movs	r2, r3
 80055e0:	f005 f9c7 	bl	800a972 <memcpy>
        file->cache.block = lfs->pcache.block;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699a      	ldr	r2, [r3, #24]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3310      	adds	r3, #16
 8005600:	001a      	movs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	0011      	movs	r1, r2
 8005606:	0018      	movs	r0, r3
 8005608:	f7fb f823 	bl	8000652 <lfs_cache_zero>

        file->block = nblock;
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005616:	2280      	movs	r2, #128	@ 0x80
 8005618:	0292      	lsls	r2, r2, #10
 800561a:	431a      	orrs	r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8005620:	2300      	movs	r3, #0
 8005622:	e015      	b.n	8005650 <lfs_file_relocate+0x1ac>
                goto relocate;
 8005624:	46c0      	nop			@ (mov r8, r8)
 8005626:	e000      	b.n	800562a <lfs_file_relocate+0x186>
                    goto relocate;
 8005628:	46c0      	nop			@ (mov r8, r8)

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4c0c      	ldr	r4, [pc, #48]	@ (8005660 <lfs_file_relocate+0x1bc>)
 800562e:	490d      	ldr	r1, [pc, #52]	@ (8005664 <lfs_file_relocate+0x1c0>)
 8005630:	480d      	ldr	r0, [pc, #52]	@ (8005668 <lfs_file_relocate+0x1c4>)
 8005632:	4b0e      	ldr	r3, [pc, #56]	@ (800566c <lfs_file_relocate+0x1c8>)
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	0013      	movs	r3, r2
 8005638:	0022      	movs	r2, r4
 800563a:	f005 f879 	bl	800a730 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3310      	adds	r3, #16
 8005642:	001a      	movs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	0011      	movs	r1, r2
 8005648:	0018      	movs	r0, r3
 800564a:	f7fa fff5 	bl	8000638 <lfs_cache_drop>
    while (true) {
 800564e:	e72e      	b.n	80054ae <lfs_file_relocate+0xa>
    }
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b006      	add	sp, #24
 8005656:	bdb0      	pop	{r4, r5, r7, pc}
 8005658:	20100000 	.word	0x20100000
 800565c:	fff7fc00 	.word	0xfff7fc00
 8005660:	00000cff 	.word	0x00000cff
 8005664:	0800b478 	.word	0x0800b478
 8005668:	0800b604 	.word	0x0800b604
 800566c:	0800b588 	.word	0x0800b588

08005670 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	0018      	movs	r0, r3
 8005686:	f7fb ff40 	bl	800150a <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	0011      	movs	r1, r2
 8005690:	0018      	movs	r0, r3
 8005692:	f7ff ff07 	bl	80054a4 <lfs_file_relocate>
 8005696:	0003      	movs	r3, r0
 8005698:	60fb      	str	r3, [r7, #12]
    if (err) {
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <lfs_file_outline+0x34>
        return err;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	e006      	b.n	80056b2 <lfs_file_outline+0x42>
    }

    file->flags &= ~LFS_F_INLINE;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a8:	4a04      	ldr	r2, [pc, #16]	@ (80056bc <lfs_file_outline+0x4c>)
 80056aa:	401a      	ands	r2, r3
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	0018      	movs	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b004      	add	sp, #16
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	ffefffff 	.word	0xffefffff

080056c0 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b09f      	sub	sp, #124	@ 0x7c
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056ce:	2380      	movs	r3, #128	@ 0x80
 80056d0:	02db      	lsls	r3, r3, #11
 80056d2:	4013      	ands	r3, r2
 80056d4:	d013      	beq.n	80056fe <lfs_file_flush+0x3e>
        if (!(file->flags & LFS_F_INLINE)) {
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056da:	2380      	movs	r3, #128	@ 0x80
 80056dc:	035b      	lsls	r3, r3, #13
 80056de:	4013      	ands	r3, r2
 80056e0:	d107      	bne.n	80056f2 <lfs_file_flush+0x32>
            lfs_cache_drop(lfs, &file->cache);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	3340      	adds	r3, #64	@ 0x40
 80056e6:	001a      	movs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	0011      	movs	r1, r2
 80056ec:	0018      	movs	r0, r3
 80056ee:	f7fa ffa3 	bl	8000638 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	4a62      	ldr	r2, [pc, #392]	@ (8005880 <lfs_file_flush+0x1c0>)
 80056f8:	401a      	ands	r2, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005702:	2380      	movs	r3, #128	@ 0x80
 8005704:	029b      	lsls	r3, r3, #10
 8005706:	4013      	ands	r3, r2
 8005708:	d100      	bne.n	800570c <lfs_file_flush+0x4c>
 800570a:	e0b4      	b.n	8005876 <lfs_file_flush+0x1b6>
        lfs_off_t pos = file->pos;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005710:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005716:	2380      	movs	r3, #128	@ 0x80
 8005718:	035b      	lsls	r3, r3, #13
 800571a:	4013      	ands	r3, r2
 800571c:	d000      	beq.n	8005720 <lfs_file_flush+0x60>
 800571e:	e085      	b.n	800582c <lfs_file_flush+0x16c>
            // copy over anything after current branch
            lfs_file_t orig = {
 8005720:	240c      	movs	r4, #12
 8005722:	193b      	adds	r3, r7, r4
 8005724:	0018      	movs	r0, r3
 8005726:	2354      	movs	r3, #84	@ 0x54
 8005728:	001a      	movs	r2, r3
 800572a:	2100      	movs	r1, #0
 800572c:	f005 f86a 	bl	800a804 <memset>
                .ctz.head = file->ctz.head,
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8005734:	193b      	adds	r3, r7, r4
 8005736:	629a      	str	r2, [r3, #40]	@ 0x28
                .ctz.size = file->ctz.size,
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 800573c:	193b      	adds	r3, r7, r4
 800573e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005740:	193b      	adds	r3, r7, r4
 8005742:	2201      	movs	r2, #1
 8005744:	631a      	str	r2, [r3, #48]	@ 0x30
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 800574a:	193b      	adds	r3, r7, r4
 800574c:	635a      	str	r2, [r3, #52]	@ 0x34
 800574e:	193b      	adds	r3, r7, r4
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	3340      	adds	r3, #64	@ 0x40
 8005754:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005756:	c313      	stmia	r3!, {r0, r1, r4}
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	601a      	str	r2, [r3, #0]
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	0011      	movs	r1, r2
 8005762:	0018      	movs	r0, r3
 8005764:	f7fa ff68 	bl	8000638 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8005768:	e02f      	b.n	80057ca <lfs_file_flush+0x10a>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800576a:	2363      	movs	r3, #99	@ 0x63
 800576c:	18fa      	adds	r2, r7, r3
 800576e:	230c      	movs	r3, #12
 8005770:	18f9      	adds	r1, r7, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	2301      	movs	r3, #1
 8005776:	f000 f945 	bl	8005a04 <lfs_file_flushedread>
 800577a:	0003      	movs	r3, r0
 800577c:	667b      	str	r3, [r7, #100]	@ 0x64
                if (res < 0) {
 800577e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005780:	2b00      	cmp	r3, #0
 8005782:	da01      	bge.n	8005788 <lfs_file_flush+0xc8>
                    return res;
 8005784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005786:	e077      	b.n	8005878 <lfs_file_flush+0x1b8>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005788:	2363      	movs	r3, #99	@ 0x63
 800578a:	18fa      	adds	r2, r7, r3
 800578c:	6839      	ldr	r1, [r7, #0]
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	2301      	movs	r3, #1
 8005792:	f000 fa4b 	bl	8005c2c <lfs_file_flushedwrite>
 8005796:	0003      	movs	r3, r0
 8005798:	667b      	str	r3, [r7, #100]	@ 0x64
                if (res < 0) {
 800579a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800579c:	2b00      	cmp	r3, #0
 800579e:	da01      	bge.n	80057a4 <lfs_file_flush+0xe4>
                    return res;
 80057a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057a2:	e069      	b.n	8005878 <lfs_file_flush+0x1b8>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3301      	adds	r3, #1
 80057aa:	d00e      	beq.n	80057ca <lfs_file_flush+0x10a>
                    lfs_cache_drop(lfs, &orig.cache);
 80057ac:	230c      	movs	r3, #12
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	3340      	adds	r3, #64	@ 0x40
 80057b2:	001a      	movs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	0011      	movs	r1, r2
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7fa ff3d 	bl	8000638 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	0011      	movs	r1, r2
 80057c4:	0018      	movs	r0, r3
 80057c6:	f7fa ff37 	bl	8000638 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d3c9      	bcc.n	800576a <lfs_file_flush+0xaa>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	3340      	adds	r3, #64	@ 0x40
 80057da:	0019      	movs	r1, r3
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	2301      	movs	r3, #1
 80057e2:	f7fb f943 	bl	8000a6c <lfs_bd_flush>
 80057e6:	0003      	movs	r3, r0
 80057e8:	66bb      	str	r3, [r7, #104]	@ 0x68
                if (err) {
 80057ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d029      	beq.n	8005844 <lfs_file_flush+0x184>
                    if (err == LFS_ERR_CORRUPT) {
 80057f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057f2:	3354      	adds	r3, #84	@ 0x54
 80057f4:	d001      	beq.n	80057fa <lfs_file_flush+0x13a>
                        goto relocate;
                    }
                    return err;
 80057f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057f8:	e03e      	b.n	8005878 <lfs_file_flush+0x1b8>
                        goto relocate;
 80057fa:	46c0      	nop			@ (mov r8, r8)
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005800:	4c20      	ldr	r4, [pc, #128]	@ (8005884 <lfs_file_flush+0x1c4>)
 8005802:	4921      	ldr	r1, [pc, #132]	@ (8005888 <lfs_file_flush+0x1c8>)
 8005804:	4821      	ldr	r0, [pc, #132]	@ (800588c <lfs_file_flush+0x1cc>)
 8005806:	4b22      	ldr	r3, [pc, #136]	@ (8005890 <lfs_file_flush+0x1d0>)
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	0013      	movs	r3, r2
 800580c:	0022      	movs	r2, r4
 800580e:	f004 ff8f 	bl	800a730 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	0011      	movs	r1, r2
 8005818:	0018      	movs	r0, r3
 800581a:	f7ff fe43 	bl	80054a4 <lfs_file_relocate>
 800581e:	0003      	movs	r3, r0
 8005820:	66bb      	str	r3, [r7, #104]	@ 0x68
                if (err) {
 8005822:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0d6      	beq.n	80057d6 <lfs_file_flush+0x116>
                    return err;
 8005828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800582a:	e025      	b.n	8005878 <lfs_file_flush+0x1b8>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	0019      	movs	r1, r3
 8005836:	0010      	movs	r0, r2
 8005838:	f7fa fe42 	bl	80004c0 <lfs_max>
 800583c:	0002      	movs	r2, r0
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	635a      	str	r2, [r3, #52]	@ 0x34
 8005842:	e000      	b.n	8005846 <lfs_file_flush+0x186>
                break;
 8005844:	46c0      	nop			@ (mov r8, r8)
        }

        // actual file updates
        file->ctz.head = file->block;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585a:	4a0e      	ldr	r2, [pc, #56]	@ (8005894 <lfs_file_flush+0x1d4>)
 800585c:	401a      	ands	r2, r3
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	2280      	movs	r2, #128	@ 0x80
 8005868:	0252      	lsls	r2, r2, #9
 800586a:	431a      	orrs	r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005874:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8005876:	2300      	movs	r3, #0
}
 8005878:	0018      	movs	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	b01d      	add	sp, #116	@ 0x74
 800587e:	bd90      	pop	{r4, r7, pc}
 8005880:	fffbffff 	.word	0xfffbffff
 8005884:	00000d4e 	.word	0x00000d4e
 8005888:	0800b478 	.word	0x0800b478
 800588c:	0800b604 	.word	0x0800b604
 8005890:	0800b588 	.word	0x0800b588
 8005894:	fffdffff 	.word	0xfffdffff

08005898 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b091      	sub	sp, #68	@ 0x44
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058a6:	2380      	movs	r3, #128	@ 0x80
 80058a8:	031b      	lsls	r3, r3, #12
 80058aa:	4013      	ands	r3, r2
 80058ac:	d001      	beq.n	80058b2 <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e09d      	b.n	80059ee <lfs_file_sync_+0x156>
    }

    int err = lfs_file_flush(lfs, file);
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	0011      	movs	r1, r2
 80058b8:	0018      	movs	r0, r3
 80058ba:	f7ff ff01 	bl	80056c0 <lfs_file_flush>
 80058be:	0003      	movs	r3, r0
 80058c0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (err) {
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d008      	beq.n	80058da <lfs_file_sync_+0x42>
        file->flags |= LFS_F_ERRED;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	2280      	movs	r2, #128	@ 0x80
 80058ce:	0312      	lsls	r2, r2, #12
 80058d0:	431a      	orrs	r2, r3
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	e089      	b.n	80059ee <lfs_file_sync_+0x156>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058de:	2380      	movs	r3, #128	@ 0x80
 80058e0:	025b      	lsls	r3, r3, #9
 80058e2:	4013      	ands	r3, r2
 80058e4:	d100      	bne.n	80058e8 <lfs_file_sync_+0x50>
 80058e6:	e081      	b.n	80059ec <lfs_file_sync_+0x154>
            !lfs_pair_isnull(file->m.pair)) {
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	3308      	adds	r3, #8
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7fb fabd 	bl	8000e6c <lfs_pair_isnull>
 80058f2:	0003      	movs	r3, r0
 80058f4:	001a      	movs	r2, r3
 80058f6:	2301      	movs	r3, #1
 80058f8:	4053      	eors	r3, r2
 80058fa:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d100      	bne.n	8005902 <lfs_file_sync_+0x6a>
 8005900:	e074      	b.n	80059ec <lfs_file_sync_+0x154>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005906:	2380      	movs	r3, #128	@ 0x80
 8005908:	035b      	lsls	r3, r3, #13
 800590a:	4013      	ands	r3, r2
 800590c:	d10e      	bne.n	800592c <lfs_file_sync_+0x94>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3310      	adds	r3, #16
 8005912:	0019      	movs	r1, r3
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	2300      	movs	r3, #0
 800591a:	f7fb f92d 	bl	8000b78 <lfs_bd_sync>
 800591e:	0003      	movs	r3, r0
 8005920:	633b      	str	r3, [r7, #48]	@ 0x30
            if (err) {
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <lfs_file_sync_+0x94>
                return err;
 8005928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592a:	e060      	b.n	80059ee <lfs_file_sync_+0x156>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005930:	2380      	movs	r3, #128	@ 0x80
 8005932:	035b      	lsls	r3, r3, #13
 8005934:	4013      	ands	r3, r2
 8005936:	d00a      	beq.n	800594e <lfs_file_sync_+0xb6>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005938:	233e      	movs	r3, #62	@ 0x3e
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	4a2e      	ldr	r2, [pc, #184]	@ (80059f8 <lfs_file_sync_+0x160>)
 800593e:	801a      	strh	r2, [r3, #0]
            buffer = file->cache.buffer;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005944:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	637b      	str	r3, [r7, #52]	@ 0x34
 800594c:	e011      	b.n	8005972 <lfs_file_sync_+0xda>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 800594e:	233e      	movs	r3, #62	@ 0x3e
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	4a2a      	ldr	r2, [pc, #168]	@ (80059fc <lfs_file_sync_+0x164>)
 8005954:	801a      	strh	r2, [r3, #0]
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8005956:	2428      	movs	r4, #40	@ 0x28
 8005958:	193a      	adds	r2, r7, r4
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	3328      	adds	r3, #40	@ 0x28
 800595e:	cb03      	ldmia	r3!, {r0, r1}
 8005960:	c203      	stmia	r2!, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8005962:	193b      	adds	r3, r7, r4
 8005964:	0018      	movs	r0, r3
 8005966:	f7fb fcd3 	bl	8001310 <lfs_ctz_tole32>
            buffer = &ctz;
 800596a:	193b      	adds	r3, r7, r4
 800596c:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 800596e:	2308      	movs	r3, #8
 8005970:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	3308      	adds	r3, #8
 8005976:	0019      	movs	r1, r3
 8005978:	233e      	movs	r3, #62	@ 0x3e
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	051a      	lsls	r2, r3, #20
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	889b      	ldrh	r3, [r3, #4]
 8005984:	029b      	lsls	r3, r3, #10
 8005986:	431a      	orrs	r2, r3
 8005988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598a:	431a      	orrs	r2, r3
 800598c:	2018      	movs	r0, #24
 800598e:	183b      	adds	r3, r7, r0
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	183b      	adds	r3, r7, r0
 8005994:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005996:	605a      	str	r2, [r3, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	889b      	ldrh	r3, [r3, #4]
 800599c:	029a      	lsls	r2, r3, #10
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	2281      	movs	r2, #129	@ 0x81
 80059a8:	0552      	lsls	r2, r2, #21
 80059aa:	431a      	orrs	r2, r3
 80059ac:	183b      	adds	r3, r7, r0
 80059ae:	609a      	str	r2, [r3, #8]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	183b      	adds	r3, r7, r0
 80059b8:	60da      	str	r2, [r3, #12]
 80059ba:	183a      	adds	r2, r7, r0
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	2302      	movs	r3, #2
 80059c0:	f7ff f8cc 	bl	8004b5c <lfs_dir_commit>
 80059c4:	0003      	movs	r3, r0
 80059c6:	633b      	str	r3, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80059c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d008      	beq.n	80059e0 <lfs_file_sync_+0x148>
            file->flags |= LFS_F_ERRED;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d2:	2280      	movs	r2, #128	@ 0x80
 80059d4:	0312      	lsls	r2, r2, #12
 80059d6:	431a      	orrs	r2, r3
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80059dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059de:	e006      	b.n	80059ee <lfs_file_sync_+0x156>
        }

        file->flags &= ~LFS_F_DIRTY;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	4a06      	ldr	r2, [pc, #24]	@ (8005a00 <lfs_file_sync_+0x168>)
 80059e6:	401a      	ands	r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	0018      	movs	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b011      	add	sp, #68	@ 0x44
 80059f4:	bd90      	pop	{r4, r7, pc}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	00000201 	.word	0x00000201
 80059fc:	00000202 	.word	0x00000202
 8005a00:	fffeffff 	.word	0xfffeffff

08005a04 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a06:	b091      	sub	sp, #68	@ 0x44
 8005a08:	af06      	add	r7, sp, #24
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d301      	bcc.n	8005a2a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e0bf      	b.n	8005baa <lfs_file_flushedread+0x1a6>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	0011      	movs	r1, r2
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f7fa fd4f 	bl	80004dc <lfs_min>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	603b      	str	r3, [r7, #0]
    nsize = size;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8005a46:	e0ab      	b.n	8005ba0 <lfs_file_flushedread+0x19c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a4c:	2380      	movs	r3, #128	@ 0x80
 8005a4e:	02db      	lsls	r3, r3, #11
 8005a50:	4013      	ands	r3, r2
 8005a52:	d006      	beq.n	8005a62 <lfs_file_flushedread+0x5e>
                file->off == lfs->cfg->block_size) {
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a5c:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d133      	bne.n	8005aca <lfs_file_flushedread+0xc6>
            if (!(file->flags & LFS_F_INLINE)) {
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a66:	2380      	movs	r3, #128	@ 0x80
 8005a68:	035b      	lsls	r3, r3, #13
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d11e      	bne.n	8005aac <lfs_file_flushedread+0xa8>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	3340      	adds	r3, #64	@ 0x40
 8005a72:	001d      	movs	r5, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	3138      	adds	r1, #56	@ 0x38
 8005a84:	68b8      	ldr	r0, [r7, #8]
 8005a86:	303c      	adds	r0, #60	@ 0x3c
 8005a88:	68fc      	ldr	r4, [r7, #12]
 8005a8a:	9003      	str	r0, [sp, #12]
 8005a8c:	9102      	str	r1, [sp, #8]
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	9200      	str	r2, [sp, #0]
 8005a92:	0033      	movs	r3, r6
 8005a94:	002a      	movs	r2, r5
 8005a96:	2100      	movs	r1, #0
 8005a98:	0020      	movs	r0, r4
 8005a9a:	f7ff f8c2 	bl	8004c22 <lfs_ctz_find>
 8005a9e:	0003      	movs	r3, r0
 8005aa0:	61fb      	str	r3, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <lfs_file_flushedread+0xb8>
                    return err;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	e07e      	b.n	8005baa <lfs_file_flushedread+0x1a6>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	4252      	negs	r2, r2
 8005ab2:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac0:	2280      	movs	r2, #128	@ 0x80
 8005ac2:	02d2      	lsls	r2, r2, #11
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad4:	1ad2      	subs	r2, r2, r3
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	0011      	movs	r1, r2
 8005ada:	0018      	movs	r0, r3
 8005adc:	f7fa fcfe 	bl	80004dc <lfs_min>
 8005ae0:	0003      	movs	r3, r0
 8005ae2:	61bb      	str	r3, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ae8:	2380      	movs	r3, #128	@ 0x80
 8005aea:	035b      	lsls	r3, r3, #13
 8005aec:	4013      	ands	r3, r2
 8005aee:	d026      	beq.n	8005b3e <lfs_file_flushedread+0x13a>
            int err = lfs_dir_getread(lfs, &file->m,
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	3308      	adds	r3, #8
 8005af4:	001d      	movs	r5, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3340      	adds	r3, #64	@ 0x40
 8005afa:	001e      	movs	r6, r3
                    NULL, &file->cache, lfs->cfg->block_size,
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b00:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	889b      	ldrh	r3, [r3, #4]
 8005b06:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8005b08:	492a      	ldr	r1, [pc, #168]	@ (8005bb4 <lfs_file_flushedread+0x1b0>)
 8005b0a:	4319      	orrs	r1, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b10:	68fc      	ldr	r4, [r7, #12]
 8005b12:	69b8      	ldr	r0, [r7, #24]
 8005b14:	9005      	str	r0, [sp, #20]
 8005b16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b18:	9004      	str	r0, [sp, #16]
 8005b1a:	9303      	str	r3, [sp, #12]
 8005b1c:	9102      	str	r1, [sp, #8]
 8005b1e:	4b26      	ldr	r3, [pc, #152]	@ (8005bb8 <lfs_file_flushedread+0x1b4>)
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	9200      	str	r2, [sp, #0]
 8005b24:	0033      	movs	r3, r6
 8005b26:	2200      	movs	r2, #0
 8005b28:	0029      	movs	r1, r5
 8005b2a:	0020      	movs	r0, r4
 8005b2c:	f7fb ff33 	bl	8001996 <lfs_dir_getread>
 8005b30:	0003      	movs	r3, r0
 8005b32:	613b      	str	r3, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d01e      	beq.n	8005b78 <lfs_file_flushedread+0x174>
                return err;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	e035      	b.n	8005baa <lfs_file_flushedread+0x1a6>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	3340      	adds	r3, #64	@ 0x40
 8005b42:	001c      	movs	r4, r3
                    NULL, &file->cache, lfs->cfg->block_size,
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b48:	69dd      	ldr	r5, [r3, #28]
            int err = lfs_bd_read(lfs,
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	69b9      	ldr	r1, [r7, #24]
 8005b56:	9103      	str	r1, [sp, #12]
 8005b58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b5a:	9102      	str	r1, [sp, #8]
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	9200      	str	r2, [sp, #0]
 8005b60:	002b      	movs	r3, r5
 8005b62:	0022      	movs	r2, r4
 8005b64:	2100      	movs	r1, #0
 8005b66:	f7fa fd8b 	bl	8000680 <lfs_bd_read>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	617b      	str	r3, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <lfs_file_flushedread+0x174>
                return err;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	e018      	b.n	8005baa <lfs_file_flushedread+0x1a6>
            }
        }

        file->pos += diff;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	18d2      	adds	r2, r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	18d2      	adds	r2, r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8005b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	18d3      	adds	r3, r2, r3
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d000      	beq.n	8005ba8 <lfs_file_flushedread+0x1a4>
 8005ba6:	e74f      	b.n	8005a48 <lfs_file_flushedread+0x44>
    }

    return size;
 8005ba8:	683b      	ldr	r3, [r7, #0]
}
 8005baa:	0018      	movs	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b00b      	add	sp, #44	@ 0x2c
 8005bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	20100000 	.word	0x20100000
 8005bb8:	fff7fc00 	.word	0xfff7fc00

08005bbc <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d105      	bne.n	8005be0 <lfs_file_read_+0x24>
 8005bd4:	4b11      	ldr	r3, [pc, #68]	@ (8005c1c <lfs_file_read_+0x60>)
 8005bd6:	4a12      	ldr	r2, [pc, #72]	@ (8005c20 <lfs_file_read_+0x64>)
 8005bd8:	4912      	ldr	r1, [pc, #72]	@ (8005c24 <lfs_file_read_+0x68>)
 8005bda:	4813      	ldr	r0, [pc, #76]	@ (8005c28 <lfs_file_read_+0x6c>)
 8005bdc:	f004 fbf0 	bl	800a3c0 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	029b      	lsls	r3, r3, #10
 8005be8:	4013      	ands	r3, r2
 8005bea:	d00c      	beq.n	8005c06 <lfs_file_read_+0x4a>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	0011      	movs	r1, r2
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f7ff fd64 	bl	80056c0 <lfs_file_flush>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	617b      	str	r3, [r7, #20]
        if (err) {
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <lfs_file_read_+0x4a>
            return err;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	e006      	b.n	8005c14 <lfs_file_read_+0x58>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7ff fef9 	bl	8005a04 <lfs_file_flushedread>
 8005c12:	0003      	movs	r3, r0
}
 8005c14:	0018      	movs	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b006      	add	sp, #24
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	0800b7ac 	.word	0x0800b7ac
 8005c20:	0800c360 	.word	0x0800c360
 8005c24:	00000de2 	.word	0x00000de2
 8005c28:	0800b478 	.word	0x0800b478

08005c2c <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c2e:	b091      	sub	sp, #68	@ 0x44
 8005c30:	af04      	add	r7, sp, #16
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c46:	2380      	movs	r3, #128	@ 0x80
 8005c48:	035b      	lsls	r3, r3, #13
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d100      	bne.n	8005c50 <lfs_file_flushedwrite+0x24>
 8005c4e:	e109      	b.n	8005e64 <lfs_file_flushedwrite+0x238>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c56:	18d2      	adds	r2, r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	0019      	movs	r1, r3
 8005c5e:	0010      	movs	r0, r2
 8005c60:	f7fa fc2e 	bl	80004c0 <lfs_max>
 8005c64:	0002      	movs	r2, r0
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d800      	bhi.n	8005c70 <lfs_file_flushedwrite+0x44>
 8005c6e:	e0f9      	b.n	8005e64 <lfs_file_flushedwrite+0x238>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	0011      	movs	r1, r2
 8005c76:	0018      	movs	r0, r3
 8005c78:	f7ff fcfa 	bl	8005670 <lfs_file_outline>
 8005c7c:	0003      	movs	r3, r0
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (err) {
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d100      	bne.n	8005c88 <lfs_file_flushedwrite+0x5c>
 8005c86:	e0ed      	b.n	8005e64 <lfs_file_flushedwrite+0x238>
            file->flags |= LFS_F_ERRED;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8c:	2280      	movs	r2, #128	@ 0x80
 8005c8e:	0312      	lsls	r2, r2, #12
 8005c90:	431a      	orrs	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	e0e9      	b.n	8005e6e <lfs_file_flushedwrite+0x242>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c9e:	2380      	movs	r3, #128	@ 0x80
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d007      	beq.n	8005cb6 <lfs_file_flushedwrite+0x8a>
                file->off == lfs->cfg->block_size) {
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cae:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d000      	beq.n	8005cb6 <lfs_file_flushedwrite+0x8a>
 8005cb4:	e076      	b.n	8005da4 <lfs_file_flushedwrite+0x178>
            if (!(file->flags & LFS_F_INLINE)) {
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cba:	2380      	movs	r3, #128	@ 0x80
 8005cbc:	035b      	lsls	r3, r3, #13
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d161      	bne.n	8005d86 <lfs_file_flushedwrite+0x15a>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cc6:	2380      	movs	r3, #128	@ 0x80
 8005cc8:	029b      	lsls	r3, r3, #10
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d134      	bne.n	8005d38 <lfs_file_flushedwrite+0x10c>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d030      	beq.n	8005d38 <lfs_file_flushedwrite+0x10c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	3340      	adds	r3, #64	@ 0x40
 8005cda:	001d      	movs	r5, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005cee:	2000      	movs	r0, #0
 8005cf0:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005cf2:	68fc      	ldr	r4, [r7, #12]
 8005cf4:	2010      	movs	r0, #16
 8005cf6:	1838      	adds	r0, r7, r0
 8005cf8:	9003      	str	r0, [sp, #12]
 8005cfa:	9102      	str	r1, [sp, #8]
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	9200      	str	r2, [sp, #0]
 8005d00:	0033      	movs	r3, r6
 8005d02:	002a      	movs	r2, r5
 8005d04:	2100      	movs	r1, #0
 8005d06:	0020      	movs	r0, r4
 8005d08:	f7fe ff8b 	bl	8004c22 <lfs_ctz_find>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	623b      	str	r3, [r7, #32]
                    if (err) {
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d008      	beq.n	8005d28 <lfs_file_flushedwrite+0xfc>
                        file->flags |= LFS_F_ERRED;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1a:	2280      	movs	r2, #128	@ 0x80
 8005d1c:	0312      	lsls	r2, r2, #12
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	e0a2      	b.n	8005e6e <lfs_file_flushedwrite+0x242>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	3340      	adds	r3, #64	@ 0x40
 8005d2c:	001a      	movs	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	0011      	movs	r1, r2
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7fa fc8d 	bl	8000652 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f7fb fbe5 	bl	800150a <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	3340      	adds	r3, #64	@ 0x40
 8005d44:	001c      	movs	r4, r3
 8005d46:	68fd      	ldr	r5, [r7, #12]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	3238      	adds	r2, #56	@ 0x38
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	313c      	adds	r1, #60	@ 0x3c
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	9102      	str	r1, [sp, #8]
 8005d5c:	9201      	str	r2, [sp, #4]
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	0033      	movs	r3, r6
 8005d62:	002a      	movs	r2, r5
 8005d64:	0021      	movs	r1, r4
 8005d66:	f7fe ffcf 	bl	8004d08 <lfs_ctz_extend>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	61fb      	str	r3, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d010      	beq.n	8005d96 <lfs_file_flushedwrite+0x16a>
                    file->flags |= LFS_F_ERRED;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d78:	2280      	movs	r2, #128	@ 0x80
 8005d7a:	0312      	lsls	r2, r2, #12
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	e073      	b.n	8005e6e <lfs_file_flushedwrite+0x242>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	4252      	negs	r2, r2
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9a:	2280      	movs	r2, #128	@ 0x80
 8005d9c:	0292      	lsls	r2, r2, #10
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005da8:	69da      	ldr	r2, [r3, #28]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	0011      	movs	r1, r2
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7fa fb91 	bl	80004dc <lfs_min>
 8005dba:	0003      	movs	r3, r0
 8005dbc:	61bb      	str	r3, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	3340      	adds	r3, #64	@ 0x40
 8005dc2:	001c      	movs	r4, r3
 8005dc4:	68fd      	ldr	r5, [r7, #12]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	69b9      	ldr	r1, [r7, #24]
 8005dd2:	9103      	str	r1, [sp, #12]
 8005dd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dd6:	9102      	str	r1, [sp, #8]
 8005dd8:	9301      	str	r3, [sp, #4]
 8005dda:	9200      	str	r2, [sp, #0]
 8005ddc:	2301      	movs	r3, #1
 8005dde:	002a      	movs	r2, r5
 8005de0:	0021      	movs	r1, r4
 8005de2:	f7fa ff03 	bl	8000bec <lfs_bd_prog>
 8005de6:	0003      	movs	r3, r0
 8005de8:	617b      	str	r3, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d020      	beq.n	8005e32 <lfs_file_flushedwrite+0x206>
                if (err == LFS_ERR_CORRUPT) {
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	3354      	adds	r3, #84	@ 0x54
 8005df4:	d008      	beq.n	8005e08 <lfs_file_flushedwrite+0x1dc>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	2280      	movs	r2, #128	@ 0x80
 8005dfc:	0312      	lsls	r2, r2, #12
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	e032      	b.n	8005e6e <lfs_file_flushedwrite+0x242>
                    goto relocate;
 8005e08:	46c0      	nop			@ (mov r8, r8)
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	0011      	movs	r1, r2
 8005e10:	0018      	movs	r0, r3
 8005e12:	f7ff fb47 	bl	80054a4 <lfs_file_relocate>
 8005e16:	0003      	movs	r3, r0
 8005e18:	617b      	str	r3, [r7, #20]
            if (err) {
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0ce      	beq.n	8005dbe <lfs_file_flushedwrite+0x192>
                file->flags |= LFS_F_ERRED;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e24:	2280      	movs	r2, #128	@ 0x80
 8005e26:	0312      	lsls	r2, r2, #12
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	e01d      	b.n	8005e6e <lfs_file_flushedwrite+0x242>
            break;
 8005e32:	46c0      	nop			@ (mov r8, r8)
            }
        }

        file->pos += diff;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	18d2      	adds	r2, r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	18d2      	adds	r2, r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8005e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	18d3      	adds	r3, r2, r3
 8005e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8005e54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f7fb fb53 	bl	800150a <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8005e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d000      	beq.n	8005e6c <lfs_file_flushedwrite+0x240>
 8005e6a:	e716      	b.n	8005c9a <lfs_file_flushedwrite+0x6e>
    }

    return size;
 8005e6c:	683b      	ldr	r3, [r7, #0]
}
 8005e6e:	0018      	movs	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b00d      	add	sp, #52	@ 0x34
 8005e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005e78 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	@ 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d105      	bne.n	8005e9c <lfs_file_write_+0x24>
 8005e90:	4b3a      	ldr	r3, [pc, #232]	@ (8005f7c <lfs_file_write_+0x104>)
 8005e92:	4a3b      	ldr	r2, [pc, #236]	@ (8005f80 <lfs_file_write_+0x108>)
 8005e94:	493b      	ldr	r1, [pc, #236]	@ (8005f84 <lfs_file_write_+0x10c>)
 8005e96:	483c      	ldr	r0, [pc, #240]	@ (8005f88 <lfs_file_write_+0x110>)
 8005e98:	f004 fa92 	bl	800a3c0 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	02db      	lsls	r3, r3, #11
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d00c      	beq.n	8005ec2 <lfs_file_write_+0x4a>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	0011      	movs	r1, r2
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f7ff fc06 	bl	80056c0 <lfs_file_flush>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        if (err) {
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <lfs_file_write_+0x4a>
            return err;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	e058      	b.n	8005f74 <lfs_file_write_+0xfc>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ec6:	2380      	movs	r3, #128	@ 0x80
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d009      	beq.n	8005ee2 <lfs_file_write_+0x6a>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d203      	bcs.n	8005ee2 <lfs_file_write_+0x6a>
        file->pos = file->ctz.size;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	18d2      	adds	r2, r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d902      	bls.n	8005ef8 <lfs_file_write_+0x80>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005ef2:	231b      	movs	r3, #27
 8005ef4:	425b      	negs	r3, r3
 8005ef6:	e03d      	b.n	8005f74 <lfs_file_write_+0xfc>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005efc:	2380      	movs	r3, #128	@ 0x80
 8005efe:	029b      	lsls	r3, r3, #10
 8005f00:	4013      	ands	r3, r2
 8005f02:	d123      	bne.n	8005f4c <lfs_file_write_+0xd4>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d91d      	bls.n	8005f4c <lfs_file_write_+0xd4>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f14:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8005f1e:	e010      	b.n	8005f42 <lfs_file_write_+0xca>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8005f20:	2117      	movs	r1, #23
 8005f22:	187b      	adds	r3, r7, r1
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	187a      	adds	r2, r7, r1
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f7ff fe7c 	bl	8005c2c <lfs_file_flushedwrite>
 8005f34:	0003      	movs	r3, r0
 8005f36:	61fb      	str	r3, [r7, #28]
            if (res < 0) {
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da01      	bge.n	8005f42 <lfs_file_write_+0xca>
                return res;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	e018      	b.n	8005f74 <lfs_file_write_+0xfc>
        while (file->pos < pos) {
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f46:	6a3a      	ldr	r2, [r7, #32]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d8e9      	bhi.n	8005f20 <lfs_file_write_+0xa8>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fe6a 	bl	8005c2c <lfs_file_flushedwrite>
 8005f58:	0003      	movs	r3, r0
 8005f5a:	61bb      	str	r3, [r7, #24]
    if (nsize < 0) {
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	da01      	bge.n	8005f66 <lfs_file_write_+0xee>
        return nsize;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	e006      	b.n	8005f74 <lfs_file_write_+0xfc>
    }

    file->flags &= ~LFS_F_ERRED;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6a:	4a08      	ldr	r2, [pc, #32]	@ (8005f8c <lfs_file_write_+0x114>)
 8005f6c:	401a      	ands	r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8005f72:	69bb      	ldr	r3, [r7, #24]
}
 8005f74:	0018      	movs	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b00a      	add	sp, #40	@ 0x28
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	0800b7dc 	.word	0x0800b7dc
 8005f80:	0800c370 	.word	0x0800c370
 8005f84:	00000e49 	.word	0x00000e49
 8005f88:	0800b478 	.word	0x0800b478
 8005f8c:	fff7ffff 	.word	0xfff7ffff

08005f90 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005f90:	b590      	push	{r4, r7, lr}
 8005f92:	b08d      	sub	sp, #52	@ 0x34
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	6a1a      	ldr	r2, [r3, #32]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // note the most common reason for this failure is a before-c99 compiler,
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // check that the required io functions are provided
    LFS_ASSERT(lfs->cfg->read != NULL);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <lfs_init+0x32>
 8005fb6:	4bd5      	ldr	r3, [pc, #852]	@ (800630c <lfs_init+0x37c>)
 8005fb8:	4ad5      	ldr	r2, [pc, #852]	@ (8006310 <lfs_init+0x380>)
 8005fba:	49d6      	ldr	r1, [pc, #856]	@ (8006314 <lfs_init+0x384>)
 8005fbc:	48d6      	ldr	r0, [pc, #856]	@ (8006318 <lfs_init+0x388>)
 8005fbe:	f004 f9ff 	bl	800a3c0 <__assert_func>
#ifndef LFS_READONLY
    LFS_ASSERT(lfs->cfg->prog != NULL);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <lfs_init+0x48>
 8005fcc:	4bd3      	ldr	r3, [pc, #844]	@ (800631c <lfs_init+0x38c>)
 8005fce:	4ad0      	ldr	r2, [pc, #832]	@ (8006310 <lfs_init+0x380>)
 8005fd0:	49d3      	ldr	r1, [pc, #844]	@ (8006320 <lfs_init+0x390>)
 8005fd2:	48d1      	ldr	r0, [pc, #836]	@ (8006318 <lfs_init+0x388>)
 8005fd4:	f004 f9f4 	bl	800a3c0 <__assert_func>
    LFS_ASSERT(lfs->cfg->erase != NULL);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d105      	bne.n	8005fee <lfs_init+0x5e>
 8005fe2:	4bd0      	ldr	r3, [pc, #832]	@ (8006324 <lfs_init+0x394>)
 8005fe4:	4aca      	ldr	r2, [pc, #808]	@ (8006310 <lfs_init+0x380>)
 8005fe6:	49d0      	ldr	r1, [pc, #832]	@ (8006328 <lfs_init+0x398>)
 8005fe8:	48cb      	ldr	r0, [pc, #812]	@ (8006318 <lfs_init+0x388>)
 8005fea:	f004 f9e9 	bl	800a3c0 <__assert_func>
    LFS_ASSERT(lfs->cfg->sync != NULL);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <lfs_init+0x74>
 8005ff8:	4bcc      	ldr	r3, [pc, #816]	@ (800632c <lfs_init+0x39c>)
 8005ffa:	4ac5      	ldr	r2, [pc, #788]	@ (8006310 <lfs_init+0x380>)
 8005ffc:	49cc      	ldr	r1, [pc, #816]	@ (8006330 <lfs_init+0x3a0>)
 8005ffe:	48c6      	ldr	r0, [pc, #792]	@ (8006318 <lfs_init+0x388>)
 8006000:	f004 f9de 	bl	800a3c0 <__assert_func>
#endif

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <lfs_init+0x8a>
 800600e:	4bc9      	ldr	r3, [pc, #804]	@ (8006334 <lfs_init+0x3a4>)
 8006010:	4abf      	ldr	r2, [pc, #764]	@ (8006310 <lfs_init+0x380>)
 8006012:	49c9      	ldr	r1, [pc, #804]	@ (8006338 <lfs_init+0x3a8>)
 8006014:	48c0      	ldr	r0, [pc, #768]	@ (8006318 <lfs_init+0x388>)
 8006016:	f004 f9d3 	bl	800a3c0 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <lfs_init+0xa2>
 8006024:	4bc5      	ldr	r3, [pc, #788]	@ (800633c <lfs_init+0x3ac>)
 8006026:	4aba      	ldr	r2, [pc, #744]	@ (8006310 <lfs_init+0x380>)
 8006028:	2184      	movs	r1, #132	@ 0x84
 800602a:	0149      	lsls	r1, r1, #5
 800602c:	48ba      	ldr	r0, [pc, #744]	@ (8006318 <lfs_init+0x388>)
 800602e:	f004 f9c7 	bl	800a3c0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	2b00      	cmp	r3, #0
 800603a:	d105      	bne.n	8006048 <lfs_init+0xb8>
 800603c:	4bc0      	ldr	r3, [pc, #768]	@ (8006340 <lfs_init+0x3b0>)
 800603e:	4ab4      	ldr	r2, [pc, #720]	@ (8006310 <lfs_init+0x380>)
 8006040:	49c0      	ldr	r1, [pc, #768]	@ (8006344 <lfs_init+0x3b4>)
 8006042:	48b5      	ldr	r0, [pc, #724]	@ (8006318 <lfs_init+0x388>)
 8006044:	f004 f9bc 	bl	800a3c0 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800604c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	0019      	movs	r1, r3
 8006056:	0010      	movs	r0, r2
 8006058:	f7fa f8ea 	bl	8000230 <__aeabi_uidivmod>
 800605c:	1e0b      	subs	r3, r1, #0
 800605e:	d005      	beq.n	800606c <lfs_init+0xdc>
 8006060:	4bb9      	ldr	r3, [pc, #740]	@ (8006348 <lfs_init+0x3b8>)
 8006062:	4aab      	ldr	r2, [pc, #684]	@ (8006310 <lfs_init+0x380>)
 8006064:	49b9      	ldr	r1, [pc, #740]	@ (800634c <lfs_init+0x3bc>)
 8006066:	48ac      	ldr	r0, [pc, #688]	@ (8006318 <lfs_init+0x388>)
 8006068:	f004 f9aa 	bl	800a3c0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006070:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	0019      	movs	r1, r3
 800607a:	0010      	movs	r0, r2
 800607c:	f7fa f8d8 	bl	8000230 <__aeabi_uidivmod>
 8006080:	1e0b      	subs	r3, r1, #0
 8006082:	d005      	beq.n	8006090 <lfs_init+0x100>
 8006084:	4bb2      	ldr	r3, [pc, #712]	@ (8006350 <lfs_init+0x3c0>)
 8006086:	4aa2      	ldr	r2, [pc, #648]	@ (8006310 <lfs_init+0x380>)
 8006088:	49b2      	ldr	r1, [pc, #712]	@ (8006354 <lfs_init+0x3c4>)
 800608a:	48a3      	ldr	r0, [pc, #652]	@ (8006318 <lfs_init+0x388>)
 800608c:	f004 f998 	bl	800a3c0 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006094:	69da      	ldr	r2, [r3, #28]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	0019      	movs	r1, r3
 800609e:	0010      	movs	r0, r2
 80060a0:	f7fa f8c6 	bl	8000230 <__aeabi_uidivmod>
 80060a4:	1e0b      	subs	r3, r1, #0
 80060a6:	d005      	beq.n	80060b4 <lfs_init+0x124>
 80060a8:	4bab      	ldr	r3, [pc, #684]	@ (8006358 <lfs_init+0x3c8>)
 80060aa:	4a99      	ldr	r2, [pc, #612]	@ (8006310 <lfs_init+0x380>)
 80060ac:	49ab      	ldr	r1, [pc, #684]	@ (800635c <lfs_init+0x3cc>)
 80060ae:	489a      	ldr	r0, [pc, #616]	@ (8006318 <lfs_init+0x388>)
 80060b0:	f004 f986 	bl	800a3c0 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80060bc:	d805      	bhi.n	80060ca <lfs_init+0x13a>
 80060be:	4ba8      	ldr	r3, [pc, #672]	@ (8006360 <lfs_init+0x3d0>)
 80060c0:	4a93      	ldr	r2, [pc, #588]	@ (8006310 <lfs_init+0x380>)
 80060c2:	49a8      	ldr	r1, [pc, #672]	@ (8006364 <lfs_init+0x3d4>)
 80060c4:	4894      	ldr	r0, [pc, #592]	@ (8006318 <lfs_init+0x388>)
 80060c6:	f004 f97b 	bl	800a3c0 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	3b08      	subs	r3, #8
 80060d2:	0019      	movs	r1, r3
 80060d4:	2301      	movs	r3, #1
 80060d6:	4258      	negs	r0, r3
 80060d8:	f7fa f824 	bl	8000124 <__udivsi3>
 80060dc:	0003      	movs	r3, r0
 80060de:	0018      	movs	r0, r3
 80060e0:	f7fa fa2f 	bl	8000542 <lfs_npw2>
 80060e4:	0003      	movs	r3, r0
 80060e6:	009a      	lsls	r2, r3, #2
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d905      	bls.n	80060fe <lfs_init+0x16e>
 80060f2:	4b9d      	ldr	r3, [pc, #628]	@ (8006368 <lfs_init+0x3d8>)
 80060f4:	4a86      	ldr	r2, [pc, #536]	@ (8006310 <lfs_init+0x380>)
 80060f6:	499d      	ldr	r1, [pc, #628]	@ (800636c <lfs_init+0x3dc>)
 80060f8:	4887      	ldr	r0, [pc, #540]	@ (8006318 <lfs_init+0x388>)
 80060fa:	f004 f961 	bl	800a3c0 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	d105      	bne.n	8006114 <lfs_init+0x184>
 8006108:	4b99      	ldr	r3, [pc, #612]	@ (8006370 <lfs_init+0x3e0>)
 800610a:	4a81      	ldr	r2, [pc, #516]	@ (8006310 <lfs_init+0x380>)
 800610c:	4999      	ldr	r1, [pc, #612]	@ (8006374 <lfs_init+0x3e4>)
 800610e:	4882      	ldr	r0, [pc, #520]	@ (8006318 <lfs_init+0x388>)
 8006110:	f004 f956 	bl	800a3c0 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00e      	beq.n	800613c <lfs_init+0x1ac>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006122:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	085b      	lsrs	r3, r3, #1
 800612c:	429a      	cmp	r2, r3
 800612e:	d205      	bcs.n	800613c <lfs_init+0x1ac>
 8006130:	4b91      	ldr	r3, [pc, #580]	@ (8006378 <lfs_init+0x3e8>)
 8006132:	4a77      	ldr	r2, [pc, #476]	@ (8006310 <lfs_init+0x380>)
 8006134:	4991      	ldr	r1, [pc, #580]	@ (800637c <lfs_init+0x3ec>)
 8006136:	4878      	ldr	r0, [pc, #480]	@ (8006318 <lfs_init+0x388>)
 8006138:	f004 f942 	bl	800a3c0 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006142:	3301      	adds	r3, #1
 8006144:	d00d      	beq.n	8006162 <lfs_init+0x1d2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800614a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	429a      	cmp	r2, r3
 8006154:	d905      	bls.n	8006162 <lfs_init+0x1d2>
 8006156:	4b8a      	ldr	r3, [pc, #552]	@ (8006380 <lfs_init+0x3f0>)
 8006158:	4a6d      	ldr	r2, [pc, #436]	@ (8006310 <lfs_init+0x380>)
 800615a:	498a      	ldr	r1, [pc, #552]	@ (8006384 <lfs_init+0x3f4>)
 800615c:	486e      	ldr	r0, [pc, #440]	@ (8006318 <lfs_init+0x388>)
 800615e:	f004 f92f 	bl	800a3c0 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // check that metadata_max is a multiple of read_size and prog_size,
    // and a factor of the block_size
    LFS_ASSERT(!lfs->cfg->metadata_max
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d011      	beq.n	8006190 <lfs_init+0x200>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006170:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	0019      	movs	r1, r3
 800617a:	0010      	movs	r0, r2
 800617c:	f7fa f858 	bl	8000230 <__aeabi_uidivmod>
 8006180:	1e0b      	subs	r3, r1, #0
 8006182:	d005      	beq.n	8006190 <lfs_init+0x200>
 8006184:	4b80      	ldr	r3, [pc, #512]	@ (8006388 <lfs_init+0x3f8>)
 8006186:	4a62      	ldr	r2, [pc, #392]	@ (8006310 <lfs_init+0x380>)
 8006188:	4980      	ldr	r1, [pc, #512]	@ (800638c <lfs_init+0x3fc>)
 800618a:	4863      	ldr	r0, [pc, #396]	@ (8006318 <lfs_init+0x388>)
 800618c:	f004 f918 	bl	800a3c0 <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->read_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d011      	beq.n	80061be <lfs_init+0x22e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800619e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	0019      	movs	r1, r3
 80061a8:	0010      	movs	r0, r2
 80061aa:	f7fa f841 	bl	8000230 <__aeabi_uidivmod>
 80061ae:	1e0b      	subs	r3, r1, #0
 80061b0:	d005      	beq.n	80061be <lfs_init+0x22e>
 80061b2:	4b77      	ldr	r3, [pc, #476]	@ (8006390 <lfs_init+0x400>)
 80061b4:	4a56      	ldr	r2, [pc, #344]	@ (8006310 <lfs_init+0x380>)
 80061b6:	4977      	ldr	r1, [pc, #476]	@ (8006394 <lfs_init+0x404>)
 80061b8:	4857      	ldr	r0, [pc, #348]	@ (8006318 <lfs_init+0x388>)
 80061ba:	f004 f901 	bl	800a3c0 <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->prog_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d011      	beq.n	80061ec <lfs_init+0x25c>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d4:	0019      	movs	r1, r3
 80061d6:	0010      	movs	r0, r2
 80061d8:	f7fa f82a 	bl	8000230 <__aeabi_uidivmod>
 80061dc:	1e0b      	subs	r3, r1, #0
 80061de:	d005      	beq.n	80061ec <lfs_init+0x25c>
 80061e0:	4b6d      	ldr	r3, [pc, #436]	@ (8006398 <lfs_init+0x408>)
 80061e2:	4a4b      	ldr	r2, [pc, #300]	@ (8006310 <lfs_init+0x380>)
 80061e4:	496d      	ldr	r1, [pc, #436]	@ (800639c <lfs_init+0x40c>)
 80061e6:	484c      	ldr	r0, [pc, #304]	@ (8006318 <lfs_init+0x388>)
 80061e8:	f004 f8ea 	bl	800a3c0 <__assert_func>
            || lfs->cfg->block_size % lfs->cfg->metadata_max == 0);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <lfs_init+0x272>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	e010      	b.n	8006224 <lfs_init+0x294>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006208:	0018      	movs	r0, r3
 800620a:	f7fa f9fc 	bl	8000606 <lfs_malloc>
 800620e:	0002      	movs	r2, r0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d103      	bne.n	8006224 <lfs_init+0x294>
            err = LFS_ERR_NOMEM;
 800621c:	230c      	movs	r3, #12
 800621e:	425b      	negs	r3, r3
 8006220:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006222:	e193      	b.n	800654c <lfs_init+0x5bc>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <lfs_init+0x2aa>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	61da      	str	r2, [r3, #28]
 8006238:	e010      	b.n	800625c <lfs_init+0x2cc>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	0018      	movs	r0, r3
 8006242:	f7fa f9e0 	bl	8000606 <lfs_malloc>
 8006246:	0002      	movs	r2, r0
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <lfs_init+0x2cc>
            err = LFS_ERR_NOMEM;
 8006254:	230c      	movs	r3, #12
 8006256:	425b      	negs	r3, r3
 8006258:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 800625a:	e177      	b.n	800654c <lfs_init+0x5bc>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	0011      	movs	r1, r2
 8006262:	0018      	movs	r0, r3
 8006264:	f7fa f9f5 	bl	8000652 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3310      	adds	r3, #16
 800626c:	001a      	movs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0011      	movs	r1, r2
 8006272:	0018      	movs	r0, r3
 8006274:	f7fa f9ed 	bl	8000652 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <lfs_init+0x2fe>
 8006282:	4b47      	ldr	r3, [pc, #284]	@ (80063a0 <lfs_init+0x410>)
 8006284:	4a22      	ldr	r2, [pc, #136]	@ (8006310 <lfs_init+0x380>)
 8006286:	4947      	ldr	r1, [pc, #284]	@ (80063a4 <lfs_init+0x414>)
 8006288:	4823      	ldr	r0, [pc, #140]	@ (8006318 <lfs_init+0x388>)
 800628a:	f004 f899 	bl	800a3c0 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <lfs_init+0x314>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800629c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	665a      	str	r2, [r3, #100]	@ 0x64
 80062a2:	e010      	b.n	80062c6 <lfs_init+0x336>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	0018      	movs	r0, r3
 80062ac:	f7fa f9ab 	bl	8000606 <lfs_malloc>
 80062b0:	0002      	movs	r2, r0
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d103      	bne.n	80062c6 <lfs_init+0x336>
            err = LFS_ERR_NOMEM;
 80062be:	230c      	movs	r3, #12
 80062c0:	425b      	negs	r3, r3
 80062c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80062c4:	e142      	b.n	800654c <lfs_init+0x5bc>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062cc:	2bff      	cmp	r3, #255	@ 0xff
 80062ce:	d905      	bls.n	80062dc <lfs_init+0x34c>
 80062d0:	4b35      	ldr	r3, [pc, #212]	@ (80063a8 <lfs_init+0x418>)
 80062d2:	4a0f      	ldr	r2, [pc, #60]	@ (8006310 <lfs_init+0x380>)
 80062d4:	4935      	ldr	r1, [pc, #212]	@ (80063ac <lfs_init+0x41c>)
 80062d6:	4810      	ldr	r0, [pc, #64]	@ (8006318 <lfs_init+0x388>)
 80062d8:	f004 f872 	bl	800a3c0 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <lfs_init+0x364>
        lfs->name_max = LFS_NAME_MAX;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	22ff      	movs	r2, #255	@ 0xff
 80062f2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	da5c      	bge.n	80063b8 <lfs_init+0x428>
 80062fe:	4b2c      	ldr	r3, [pc, #176]	@ (80063b0 <lfs_init+0x420>)
 8006300:	4a03      	ldr	r2, [pc, #12]	@ (8006310 <lfs_init+0x380>)
 8006302:	492c      	ldr	r1, [pc, #176]	@ (80063b4 <lfs_init+0x424>)
 8006304:	4804      	ldr	r0, [pc, #16]	@ (8006318 <lfs_init+0x388>)
 8006306:	f004 f85b 	bl	800a3c0 <__assert_func>
 800630a:	46c0      	nop			@ (mov r8, r8)
 800630c:	0800b80c 	.word	0x0800b80c
 8006310:	0800c380 	.word	0x0800c380
 8006314:	00001076 	.word	0x00001076
 8006318:	0800b478 	.word	0x0800b478
 800631c:	0800b82c 	.word	0x0800b82c
 8006320:	00001078 	.word	0x00001078
 8006324:	0800b84c 	.word	0x0800b84c
 8006328:	00001079 	.word	0x00001079
 800632c:	0800b86c 	.word	0x0800b86c
 8006330:	0000107a 	.word	0x0000107a
 8006334:	0800b88c 	.word	0x0800b88c
 8006338:	0000107f 	.word	0x0000107f
 800633c:	0800b8a8 	.word	0x0800b8a8
 8006340:	0800b8c4 	.word	0x0800b8c4
 8006344:	00001081 	.word	0x00001081
 8006348:	0800b8e0 	.word	0x0800b8e0
 800634c:	00001085 	.word	0x00001085
 8006350:	0800b910 	.word	0x0800b910
 8006354:	00001086 	.word	0x00001086
 8006358:	0800b940 	.word	0x0800b940
 800635c:	00001087 	.word	0x00001087
 8006360:	0800b974 	.word	0x0800b974
 8006364:	0000108a 	.word	0x0000108a
 8006368:	0800b990 	.word	0x0800b990
 800636c:	0000108d 	.word	0x0000108d
 8006370:	0800b9dc 	.word	0x0800b9dc
 8006374:	00001096 	.word	0x00001096
 8006378:	0800b9f8 	.word	0x0800b9f8
 800637c:	0000109c 	.word	0x0000109c
 8006380:	0800ba4c 	.word	0x0800ba4c
 8006384:	0000109e 	.word	0x0000109e
 8006388:	0800baac 	.word	0x0800baac
 800638c:	000010a3 	.word	0x000010a3
 8006390:	0800bafc 	.word	0x0800bafc
 8006394:	000010a5 	.word	0x000010a5
 8006398:	0800bb4c 	.word	0x0800bb4c
 800639c:	000010a7 	.word	0x000010a7
 80063a0:	0800bb9c 	.word	0x0800bb9c
 80063a4:	000010c6 	.word	0x000010c6
 80063a8:	0800bbbc 	.word	0x0800bbbc
 80063ac:	000010d2 	.word	0x000010d2
 80063b0:	0800bbd8 	.word	0x0800bbd8
 80063b4:	000010d8 	.word	0x000010d8
    lfs->file_max = lfs->cfg->file_max;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <lfs_init+0x440>
        lfs->file_max = LFS_FILE_MAX;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a64      	ldr	r2, [pc, #400]	@ (8006560 <lfs_init+0x5d0>)
 80063ce:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063d6:	4a63      	ldr	r2, [pc, #396]	@ (8006564 <lfs_init+0x5d4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d905      	bls.n	80063e8 <lfs_init+0x458>
 80063dc:	4b62      	ldr	r3, [pc, #392]	@ (8006568 <lfs_init+0x5d8>)
 80063de:	4a63      	ldr	r2, [pc, #396]	@ (800656c <lfs_init+0x5dc>)
 80063e0:	4963      	ldr	r1, [pc, #396]	@ (8006570 <lfs_init+0x5e0>)
 80063e2:	4864      	ldr	r0, [pc, #400]	@ (8006574 <lfs_init+0x5e4>)
 80063e4:	f003 ffec 	bl	800a3c0 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <lfs_init+0x470>
        lfs->attr_max = LFS_ATTR_MAX;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a59      	ldr	r2, [pc, #356]	@ (8006564 <lfs_init+0x5d4>)
 80063fe:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006404:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	429a      	cmp	r2, r3
 800640e:	d905      	bls.n	800641c <lfs_init+0x48c>
 8006410:	4b59      	ldr	r3, [pc, #356]	@ (8006578 <lfs_init+0x5e8>)
 8006412:	4a56      	ldr	r2, [pc, #344]	@ (800656c <lfs_init+0x5dc>)
 8006414:	4959      	ldr	r1, [pc, #356]	@ (800657c <lfs_init+0x5ec>)
 8006416:	4857      	ldr	r0, [pc, #348]	@ (8006574 <lfs_init+0x5e4>)
 8006418:	f003 ffd2 	bl	800a3c0 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006422:	3301      	adds	r3, #1
 8006424:	d00d      	beq.n	8006442 <lfs_init+0x4b2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800642a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	429a      	cmp	r2, r3
 8006434:	d905      	bls.n	8006442 <lfs_init+0x4b2>
 8006436:	4b52      	ldr	r3, [pc, #328]	@ (8006580 <lfs_init+0x5f0>)
 8006438:	4a4c      	ldr	r2, [pc, #304]	@ (800656c <lfs_init+0x5dc>)
 800643a:	4952      	ldr	r1, [pc, #328]	@ (8006584 <lfs_init+0x5f4>)
 800643c:	484d      	ldr	r0, [pc, #308]	@ (8006574 <lfs_init+0x5e4>)
 800643e:	f003 ffbf 	bl	800a3c0 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006448:	3301      	adds	r3, #1
 800644a:	d00c      	beq.n	8006466 <lfs_init+0x4d6>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006456:	429a      	cmp	r2, r3
 8006458:	d905      	bls.n	8006466 <lfs_init+0x4d6>
 800645a:	4b4b      	ldr	r3, [pc, #300]	@ (8006588 <lfs_init+0x5f8>)
 800645c:	4a43      	ldr	r2, [pc, #268]	@ (800656c <lfs_init+0x5dc>)
 800645e:	494b      	ldr	r1, [pc, #300]	@ (800658c <lfs_init+0x5fc>)
 8006460:	4844      	ldr	r0, [pc, #272]	@ (8006574 <lfs_init+0x5e4>)
 8006462:	f003 ffad 	bl	800a3c0 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800646a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800646c:	3301      	adds	r3, #1
 800646e:	d018      	beq.n	80064a2 <lfs_init+0x512>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006474:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800647a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <lfs_init+0x4fa>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006486:	08db      	lsrs	r3, r3, #3
 8006488:	e003      	b.n	8006492 <lfs_init+0x502>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	08db      	lsrs	r3, r3, #3
 8006492:	4293      	cmp	r3, r2
 8006494:	d205      	bcs.n	80064a2 <lfs_init+0x512>
 8006496:	4b3e      	ldr	r3, [pc, #248]	@ (8006590 <lfs_init+0x600>)
 8006498:	4a34      	ldr	r2, [pc, #208]	@ (800656c <lfs_init+0x5dc>)
 800649a:	493e      	ldr	r1, [pc, #248]	@ (8006594 <lfs_init+0x604>)
 800649c:	4835      	ldr	r0, [pc, #212]	@ (8006574 <lfs_init+0x5e4>)
 800649e:	f003 ff8f 	bl	800a3c0 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064b0:	3301      	adds	r3, #1
 80064b2:	d103      	bne.n	80064bc <lfs_init+0x52c>
        lfs->inline_max = 0;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80064ba:	e022      	b.n	8006502 <lfs_init+0x572>
    } else if (lfs->inline_max == 0) {
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d11e      	bne.n	8006502 <lfs_init+0x572>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064c8:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <lfs_init+0x552>
                        ? lfs->cfg->metadata_max
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 80064de:	08db      	lsrs	r3, r3, #3
 80064e0:	e003      	b.n	80064ea <lfs_init+0x55a>
                        : lfs->cfg->block_size)/8));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064e6:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 80064e8:	08db      	lsrs	r3, r3, #3
 80064ea:	0019      	movs	r1, r3
 80064ec:	0010      	movs	r0, r2
 80064ee:	f7f9 fff5 	bl	80004dc <lfs_min>
 80064f2:	0003      	movs	r3, r0
 80064f4:	0019      	movs	r1, r3
 80064f6:	0020      	movs	r0, r4
 80064f8:	f7f9 fff0 	bl	80004dc <lfs_min>
 80064fc:	0002      	movs	r2, r0
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	4252      	negs	r2, r2
 8006508:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	4252      	negs	r2, r2
 8006510:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	333c      	adds	r3, #60	@ 0x3c
 8006522:	220c      	movs	r2, #12
 8006524:	2100      	movs	r1, #0
 8006526:	0018      	movs	r0, r3
 8006528:	f004 f96c 	bl	800a804 <memset>
    lfs->gstate = (lfs_gstate_t){0};
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3330      	adds	r3, #48	@ 0x30
 8006530:	220c      	movs	r2, #12
 8006532:	2100      	movs	r1, #0
 8006534:	0018      	movs	r0, r3
 8006536:	f004 f965 	bl	800a804 <memset>
    lfs->gdelta = (lfs_gstate_t){0};
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3348      	adds	r3, #72	@ 0x48
 800653e:	220c      	movs	r2, #12
 8006540:	2100      	movs	r1, #0
 8006542:	0018      	movs	r0, r3
 8006544:	f004 f95e 	bl	800a804 <memset>
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8006548:	2300      	movs	r3, #0
 800654a:	e004      	b.n	8006556 <lfs_init+0x5c6>

cleanup:
    lfs_deinit(lfs);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	0018      	movs	r0, r3
 8006550:	f000 f822 	bl	8006598 <lfs_deinit>
    return err;
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006556:	0018      	movs	r0, r3
 8006558:	46bd      	mov	sp, r7
 800655a:	b00d      	add	sp, #52	@ 0x34
 800655c:	bd90      	pop	{r4, r7, pc}
 800655e:	46c0      	nop			@ (mov r8, r8)
 8006560:	7fffffff 	.word	0x7fffffff
 8006564:	000003fe 	.word	0x000003fe
 8006568:	0800bbfc 	.word	0x0800bbfc
 800656c:	0800c380 	.word	0x0800c380
 8006570:	000010de 	.word	0x000010de
 8006574:	0800b478 	.word	0x0800b478
 8006578:	0800bc18 	.word	0x0800bc18
 800657c:	000010e4 	.word	0x000010e4
 8006580:	0800bc48 	.word	0x0800bc48
 8006584:	000010e6 	.word	0x000010e6
 8006588:	0800bca0 	.word	0x0800bca0
 800658c:	000010e8 	.word	0x000010e8
 8006590:	0800bcf0 	.word	0x0800bcf0
 8006594:	000010ea 	.word	0x000010ea

08006598 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	0018      	movs	r0, r3
 80065b0:	f7fa f836 	bl	8000620 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d104      	bne.n	80065c8 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	0018      	movs	r0, r3
 80065c4:	f7fa f82c 	bl	8000620 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d6:	0018      	movs	r0, r3
 80065d8:	f7fa f822 	bl	8000620 <lfs_free>
    }

    return 0;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	0018      	movs	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b002      	add	sp, #8
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 80065e8:	b5b0      	push	{r4, r5, r7, lr}
 80065ea:	b0a0      	sub	sp, #128	@ 0x80
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
    int err = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	0011      	movs	r1, r2
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7ff fcc7 	bl	8005f90 <lfs_init>
 8006602:	0003      	movs	r3, r0
 8006604:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (err) {
 8006606:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <lfs_format_+0x28>
            return err;
 800660c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800660e:	e09d      	b.n	800674c <lfs_format_+0x164>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <lfs_format_+0x3c>
 8006618:	4b4e      	ldr	r3, [pc, #312]	@ (8006754 <lfs_format_+0x16c>)
 800661a:	4a4f      	ldr	r2, [pc, #316]	@ (8006758 <lfs_format_+0x170>)
 800661c:	494f      	ldr	r1, [pc, #316]	@ (800675c <lfs_format_+0x174>)
 800661e:	4850      	ldr	r0, [pc, #320]	@ (8006760 <lfs_format_+0x178>)
 8006620:	f003 fece 	bl	800a3c0 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800662c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662e:	001a      	movs	r2, r3
 8006630:	2100      	movs	r1, #0
 8006632:	f004 f8e7 	bl	800a804 <memset>
        lfs->lookahead.start = 0;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006642:	00da      	lsls	r2, r3, #3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006648:	0019      	movs	r1, r3
 800664a:	0010      	movs	r0, r2
 800664c:	f7f9 ff46 	bl	80004dc <lfs_min>
 8006650:	0002      	movs	r2, r0
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0018      	movs	r0, r3
 8006660:	f7fa ff53 	bl	800150a <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8006664:	250c      	movs	r5, #12
 8006666:	197a      	adds	r2, r7, r5
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	0011      	movs	r1, r2
 800666c:	0018      	movs	r0, r3
 800666e:	f7fc ff8b 	bl	8003588 <lfs_dir_alloc>
 8006672:	0003      	movs	r3, r0
 8006674:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (err) {
 8006676:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d15d      	bne.n	8006738 <lfs_format_+0x150>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	0018      	movs	r0, r3
 8006680:	f7fa ff1a 	bl	80014b8 <lfs_fs_disk_version>
 8006684:	0002      	movs	r2, r0
        lfs_superblock_t superblock = {
 8006686:	2164      	movs	r1, #100	@ 0x64
 8006688:	187b      	adds	r3, r7, r1
 800668a:	601a      	str	r2, [r3, #0]
            .block_size  = lfs->cfg->block_size,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006690:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
 8006692:	000c      	movs	r4, r1
 8006694:	193b      	adds	r3, r7, r4
 8006696:	605a      	str	r2, [r3, #4]
            .block_count = lfs->block_count,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 800669c:	193b      	adds	r3, r7, r4
 800669e:	609a      	str	r2, [r3, #8]
            .name_max    = lfs->name_max,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 80066a4:	193b      	adds	r3, r7, r4
 80066a6:	60da      	str	r2, [r3, #12]
            .file_max    = lfs->file_max,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 80066ac:	193b      	adds	r3, r7, r4
 80066ae:	611a      	str	r2, [r3, #16]
            .attr_max    = lfs->attr_max,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 80066b4:	193b      	adds	r3, r7, r4
 80066b6:	615a      	str	r2, [r3, #20]
        };

        lfs_superblock_tole32(&superblock);
 80066b8:	193b      	adds	r3, r7, r4
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7fa fe78 	bl	80013b0 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80066c0:	214c      	movs	r1, #76	@ 0x4c
 80066c2:	187b      	adds	r3, r7, r1
 80066c4:	4a27      	ldr	r2, [pc, #156]	@ (8006764 <lfs_format_+0x17c>)
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	187b      	adds	r3, r7, r1
 80066ca:	2200      	movs	r2, #0
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	187b      	adds	r3, r7, r1
 80066d0:	4a25      	ldr	r2, [pc, #148]	@ (8006768 <lfs_format_+0x180>)
 80066d2:	609a      	str	r2, [r3, #8]
 80066d4:	187b      	adds	r3, r7, r1
 80066d6:	4a25      	ldr	r2, [pc, #148]	@ (800676c <lfs_format_+0x184>)
 80066d8:	60da      	str	r2, [r3, #12]
 80066da:	187b      	adds	r3, r7, r1
 80066dc:	4a24      	ldr	r2, [pc, #144]	@ (8006770 <lfs_format_+0x188>)
 80066de:	611a      	str	r2, [r3, #16]
 80066e0:	187b      	adds	r3, r7, r1
 80066e2:	193a      	adds	r2, r7, r4
 80066e4:	615a      	str	r2, [r3, #20]
 80066e6:	187a      	adds	r2, r7, r1
 80066e8:	1979      	adds	r1, r7, r5
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	2303      	movs	r3, #3
 80066ee:	f7fe fa35 	bl	8004b5c <lfs_dir_commit>
 80066f2:	0003      	movs	r3, r0
 80066f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80066f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d11f      	bne.n	800673c <lfs_format_+0x154>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80066fc:	197b      	adds	r3, r7, r5
 80066fe:	2200      	movs	r2, #0
 8006700:	759a      	strb	r2, [r3, #22]
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8006702:	1979      	adds	r1, r7, r5
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	2300      	movs	r3, #0
 8006708:	2200      	movs	r2, #0
 800670a:	f7fe fa27 	bl	8004b5c <lfs_dir_commit>
 800670e:	0003      	movs	r3, r0
 8006710:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (err) {
 8006712:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d113      	bne.n	8006740 <lfs_format_+0x158>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8006718:	212c      	movs	r1, #44	@ 0x2c
 800671a:	187b      	adds	r3, r7, r1
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	187b      	adds	r3, r7, r1
 8006722:	2201      	movs	r2, #1
 8006724:	605a      	str	r2, [r3, #4]
 8006726:	187a      	adds	r2, r7, r1
 8006728:	1979      	adds	r1, r7, r5
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	0018      	movs	r0, r3
 800672e:	f7fc fb33 	bl	8002d98 <lfs_dir_fetch>
 8006732:	0003      	movs	r3, r0
 8006734:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006736:	e004      	b.n	8006742 <lfs_format_+0x15a>
            goto cleanup;
 8006738:	46c0      	nop			@ (mov r8, r8)
 800673a:	e002      	b.n	8006742 <lfs_format_+0x15a>
            goto cleanup;
 800673c:	46c0      	nop			@ (mov r8, r8)
 800673e:	e000      	b.n	8006742 <lfs_format_+0x15a>
            goto cleanup;
 8006740:	46c0      	nop			@ (mov r8, r8)
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	0018      	movs	r0, r3
 8006746:	f7ff ff27 	bl	8006598 <lfs_deinit>
    return err;
 800674a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 800674c:	0018      	movs	r0, r3
 800674e:	46bd      	mov	sp, r7
 8006750:	b020      	add	sp, #128	@ 0x80
 8006752:	bdb0      	pop	{r4, r5, r7, pc}
 8006754:	0800bd80 	.word	0x0800bd80
 8006758:	0800c38c 	.word	0x0800c38c
 800675c:	0000112a 	.word	0x0000112a
 8006760:	0800b478 	.word	0x0800b478
 8006764:	40100000 	.word	0x40100000
 8006768:	0ff00008 	.word	0x0ff00008
 800676c:	0800bd98 	.word	0x0800bd98
 8006770:	20100018 	.word	0x20100018

08006774 <lfs_tortoise_detectcycles>:
    lfs_size_t i;
    lfs_size_t period;
};

static int lfs_tortoise_detectcycles(
    const lfs_mdir_t *dir, struct lfs_tortoise_t *tortoise) {
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
    // detect cycles with Brent's algorithm
    if (lfs_pair_issync(dir->tail, tortoise->pair)) {
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3318      	adds	r3, #24
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	0011      	movs	r1, r2
 8006786:	0018      	movs	r0, r3
 8006788:	f7fa fbb0 	bl	8000eec <lfs_pair_issync>
 800678c:	1e03      	subs	r3, r0, #0
 800678e:	d008      	beq.n	80067a2 <lfs_tortoise_detectcycles+0x2e>
        LFS_WARN("Cycle detected in tail list");
 8006790:	4b14      	ldr	r3, [pc, #80]	@ (80067e4 <lfs_tortoise_detectcycles+0x70>)
 8006792:	4a15      	ldr	r2, [pc, #84]	@ (80067e8 <lfs_tortoise_detectcycles+0x74>)
 8006794:	4915      	ldr	r1, [pc, #84]	@ (80067ec <lfs_tortoise_detectcycles+0x78>)
 8006796:	4816      	ldr	r0, [pc, #88]	@ (80067f0 <lfs_tortoise_detectcycles+0x7c>)
 8006798:	f003 ffca 	bl	800a730 <iprintf>
        return LFS_ERR_CORRUPT;
 800679c:	2354      	movs	r3, #84	@ 0x54
 800679e:	425b      	negs	r3, r3
 80067a0:	e01b      	b.n	80067da <lfs_tortoise_detectcycles+0x66>
    }
    if (tortoise->i == tortoise->period) {
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d10f      	bne.n	80067ce <lfs_tortoise_detectcycles+0x5a>
        tortoise->pair[0] = dir->tail[0];
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	601a      	str	r2, [r3, #0]
        tortoise->pair[1] = dir->tail[1];
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69da      	ldr	r2, [r3, #28]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	605a      	str	r2, [r3, #4]
        tortoise->i = 0;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
        tortoise->period *= 2;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	005a      	lsls	r2, r3, #1
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	60da      	str	r2, [r3, #12]
    }
    tortoise->i += 1;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	609a      	str	r2, [r3, #8]

    return LFS_ERR_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	0018      	movs	r0, r3
 80067dc:	46bd      	mov	sp, r7
 80067de:	b002      	add	sp, #8
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	0800b588 	.word	0x0800b588
 80067e8:	0000116f 	.word	0x0000116f
 80067ec:	0800b478 	.word	0x0800b478
 80067f0:	0800bda4 	.word	0x0800bda4

080067f4 <lfs_mount_>:

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 80067f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f6:	b0a1      	sub	sp, #132	@ 0x84
 80067f8:	af04      	add	r7, sp, #16
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	0011      	movs	r1, r2
 8006804:	0018      	movs	r0, r3
 8006806:	f7ff fbc3 	bl	8005f90 <lfs_init>
 800680a:	0003      	movs	r3, r0
 800680c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (err) {
 800680e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <lfs_mount_+0x24>
        return err;
 8006814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006816:	e235      	b.n	8006c84 <lfs_mount_+0x490>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006818:	2440      	movs	r4, #64	@ 0x40
 800681a:	193b      	adds	r3, r7, r4
 800681c:	0018      	movs	r0, r3
 800681e:	2320      	movs	r3, #32
 8006820:	001a      	movs	r2, r3
 8006822:	2100      	movs	r1, #0
 8006824:	f003 ffee 	bl	800a804 <memset>
 8006828:	193b      	adds	r3, r7, r4
 800682a:	2201      	movs	r2, #1
 800682c:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 800682e:	2330      	movs	r3, #48	@ 0x30
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	4ac9      	ldr	r2, [pc, #804]	@ (8006b58 <lfs_mount_+0x364>)
 8006834:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006836:	c313      	stmia	r3!, {r0, r1, r4}
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	601a      	str	r2, [r3, #0]
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    while (!lfs_pair_isnull(dir.tail)) {
 800683c:	e1c6      	b.n	8006bcc <lfs_mount_+0x3d8>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 800683e:	2330      	movs	r3, #48	@ 0x30
 8006840:	18fa      	adds	r2, r7, r3
 8006842:	2640      	movs	r6, #64	@ 0x40
 8006844:	19bb      	adds	r3, r7, r6
 8006846:	0011      	movs	r1, r2
 8006848:	0018      	movs	r0, r3
 800684a:	f7ff ff93 	bl	8006774 <lfs_tortoise_detectcycles>
 800684e:	0003      	movs	r3, r0
 8006850:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if (err < 0) {
 8006852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006854:	2b00      	cmp	r3, #0
 8006856:	da00      	bge.n	800685a <lfs_mount_+0x66>
 8006858:	e20c      	b.n	8006c74 <lfs_mount_+0x480>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800685a:	2524      	movs	r5, #36	@ 0x24
 800685c:	197b      	adds	r3, r7, r5
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	197b      	adds	r3, r7, r5
 8006864:	4abd      	ldr	r2, [pc, #756]	@ (8006b5c <lfs_mount_+0x368>)
 8006866:	605a      	str	r2, [r3, #4]
 8006868:	197b      	adds	r3, r7, r5
 800686a:	2208      	movs	r2, #8
 800686c:	609a      	str	r2, [r3, #8]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800686e:	4cbc      	ldr	r4, [pc, #752]	@ (8006b60 <lfs_mount_+0x36c>)
 8006870:	19bb      	adds	r3, r7, r6
 8006872:	3318      	adds	r3, #24
 8006874:	001a      	movs	r2, r3
 8006876:	19b9      	adds	r1, r7, r6
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	197b      	adds	r3, r7, r5
 800687c:	9303      	str	r3, [sp, #12]
 800687e:	4bb9      	ldr	r3, [pc, #740]	@ (8006b64 <lfs_mount_+0x370>)
 8006880:	9302      	str	r3, [sp, #8]
 8006882:	2300      	movs	r3, #0
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	4bb8      	ldr	r3, [pc, #736]	@ (8006b68 <lfs_mount_+0x374>)
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	0023      	movs	r3, r4
 800688c:	f7fb fe86 	bl	800259c <lfs_dir_fetchmatch>
 8006890:	0003      	movs	r3, r0
 8006892:	667b      	str	r3, [r7, #100]	@ 0x64
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8006894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006896:	2b00      	cmp	r3, #0
 8006898:	da02      	bge.n	80068a0 <lfs_mount_+0xac>
            err = tag;
 800689a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800689c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 800689e:	e1ec      	b.n	8006c7a <lfs_mount_+0x486>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80068a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d100      	bne.n	80068a8 <lfs_mount_+0xb4>
 80068a6:	e183      	b.n	8006bb0 <lfs_mount_+0x3bc>
 80068a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068aa:	0018      	movs	r0, r3
 80068ac:	f7fa fb8a 	bl	8000fc4 <lfs_tag_isdelete>
 80068b0:	0003      	movs	r3, r0
 80068b2:	001a      	movs	r2, r3
 80068b4:	2301      	movs	r3, #1
 80068b6:	4053      	eors	r3, r2
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d100      	bne.n	80068c0 <lfs_mount_+0xcc>
 80068be:	e177      	b.n	8006bb0 <lfs_mount_+0x3bc>
            // update root
            lfs->root[0] = dir.pair[0];
 80068c0:	2140      	movs	r1, #64	@ 0x40
 80068c2:	187b      	adds	r3, r7, r1
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80068ca:	187b      	adds	r3, r7, r1
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80068d2:	4ca6      	ldr	r4, [pc, #664]	@ (8006b6c <lfs_mount_+0x378>)
 80068d4:	4aa2      	ldr	r2, [pc, #648]	@ (8006b60 <lfs_mount_+0x36c>)
 80068d6:	1879      	adds	r1, r7, r1
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	230c      	movs	r3, #12
 80068dc:	18fb      	adds	r3, r7, r3
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	0023      	movs	r3, r4
 80068e2:	f7fb f83b 	bl	800195c <lfs_dir_get>
 80068e6:	0003      	movs	r3, r0
 80068e8:	667b      	str	r3, [r7, #100]	@ 0x64
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80068ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	da02      	bge.n	80068f6 <lfs_mount_+0x102>
                err = tag;
 80068f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80068f4:	e1c1      	b.n	8006c7a <lfs_mount_+0x486>
            }
            lfs_superblock_fromle32(&superblock);
 80068f6:	240c      	movs	r4, #12
 80068f8:	193b      	adds	r3, r7, r4
 80068fa:	0018      	movs	r0, r3
 80068fc:	f7fa fd20 	bl	8001340 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8006900:	0021      	movs	r1, r4
 8006902:	187b      	adds	r3, r7, r1
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	0c1a      	lsrs	r2, r3, #16
 8006908:	2462      	movs	r4, #98	@ 0x62
 800690a:	193b      	adds	r3, r7, r4
 800690c:	801a      	strh	r2, [r3, #0]
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800690e:	187b      	adds	r3, r7, r1
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	2560      	movs	r5, #96	@ 0x60
 8006914:	197b      	adds	r3, r7, r5
 8006916:	801a      	strh	r2, [r3, #0]
            if (major_version != lfs_fs_disk_version_major(lfs)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	0018      	movs	r0, r3
 800691c:	f7fa fdd8 	bl	80014d0 <lfs_fs_disk_version_major>
 8006920:	0003      	movs	r3, r0
 8006922:	001a      	movs	r2, r3
 8006924:	193b      	adds	r3, r7, r4
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	4293      	cmp	r3, r2
 800692a:	d109      	bne.n	8006940 <lfs_mount_+0x14c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	0018      	movs	r0, r3
 8006930:	f7fa fddd 	bl	80014ee <lfs_fs_disk_version_minor>
 8006934:	0003      	movs	r3, r0
 8006936:	001a      	movs	r2, r3
 8006938:	197b      	adds	r3, r7, r5
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	4293      	cmp	r3, r2
 800693e:	d921      	bls.n	8006984 <lfs_mount_+0x190>
                LFS_ERROR("Invalid version "
 8006940:	2362      	movs	r3, #98	@ 0x62
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	881d      	ldrh	r5, [r3, #0]
 8006946:	2360      	movs	r3, #96	@ 0x60
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	881c      	ldrh	r4, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	0018      	movs	r0, r3
 8006950:	f7fa fdbe 	bl	80014d0 <lfs_fs_disk_version_major>
 8006954:	0003      	movs	r3, r0
 8006956:	001e      	movs	r6, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	0018      	movs	r0, r3
 800695c:	f7fa fdc7 	bl	80014ee <lfs_fs_disk_version_minor>
 8006960:	0003      	movs	r3, r0
 8006962:	469c      	mov	ip, r3
 8006964:	4a82      	ldr	r2, [pc, #520]	@ (8006b70 <lfs_mount_+0x37c>)
 8006966:	4983      	ldr	r1, [pc, #524]	@ (8006b74 <lfs_mount_+0x380>)
 8006968:	4883      	ldr	r0, [pc, #524]	@ (8006b78 <lfs_mount_+0x384>)
 800696a:	4b84      	ldr	r3, [pc, #528]	@ (8006b7c <lfs_mount_+0x388>)
 800696c:	9303      	str	r3, [sp, #12]
 800696e:	4663      	mov	r3, ip
 8006970:	9302      	str	r3, [sp, #8]
 8006972:	9601      	str	r6, [sp, #4]
 8006974:	9400      	str	r4, [sp, #0]
 8006976:	002b      	movs	r3, r5
 8006978:	f003 feda 	bl	800a730 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 800697c:	2316      	movs	r3, #22
 800697e:	425b      	negs	r3, r3
 8006980:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8006982:	e0e7      	b.n	8006b54 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 8006984:	236b      	movs	r3, #107	@ 0x6b
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	0018      	movs	r0, r3
 8006990:	f7fa fdad 	bl	80014ee <lfs_fs_disk_version_minor>
 8006994:	0003      	movs	r3, r0
 8006996:	001a      	movs	r2, r3
 8006998:	2160      	movs	r1, #96	@ 0x60
 800699a:	187b      	adds	r3, r7, r1
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	4293      	cmp	r3, r2
 80069a0:	d220      	bcs.n	80069e4 <lfs_mount_+0x1f0>
                LFS_DEBUG("Found older minor version "
 80069a2:	2262      	movs	r2, #98	@ 0x62
 80069a4:	18bb      	adds	r3, r7, r2
 80069a6:	881d      	ldrh	r5, [r3, #0]
 80069a8:	187b      	adds	r3, r7, r1
 80069aa:	881c      	ldrh	r4, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	0018      	movs	r0, r3
 80069b0:	f7fa fd8e 	bl	80014d0 <lfs_fs_disk_version_major>
 80069b4:	0003      	movs	r3, r0
 80069b6:	001e      	movs	r6, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	0018      	movs	r0, r3
 80069bc:	f7fa fd97 	bl	80014ee <lfs_fs_disk_version_minor>
 80069c0:	0003      	movs	r3, r0
 80069c2:	469c      	mov	ip, r3
 80069c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006b80 <lfs_mount_+0x38c>)
 80069c6:	496b      	ldr	r1, [pc, #428]	@ (8006b74 <lfs_mount_+0x380>)
 80069c8:	486e      	ldr	r0, [pc, #440]	@ (8006b84 <lfs_mount_+0x390>)
 80069ca:	4b6c      	ldr	r3, [pc, #432]	@ (8006b7c <lfs_mount_+0x388>)
 80069cc:	9303      	str	r3, [sp, #12]
 80069ce:	4663      	mov	r3, ip
 80069d0:	9302      	str	r3, [sp, #8]
 80069d2:	9601      	str	r6, [sp, #4]
 80069d4:	9400      	str	r4, [sp, #0]
 80069d6:	002b      	movs	r3, r5
 80069d8:	f003 feaa 	bl	800a730 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 80069dc:	236b      	movs	r3, #107	@ 0x6b
 80069de:	18fb      	adds	r3, r7, r3
 80069e0:	2201      	movs	r2, #1
 80069e2:	701a      	strb	r2, [r3, #0]
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 80069e4:	236b      	movs	r3, #107	@ 0x6b
 80069e6:	18fb      	adds	r3, r7, r3
 80069e8:	781a      	ldrb	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	0011      	movs	r1, r2
 80069ee:	0018      	movs	r0, r3
 80069f0:	f000 fba8 	bl	8007144 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 80069f4:	210c      	movs	r1, #12
 80069f6:	187b      	adds	r3, r7, r1
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01c      	beq.n	8006a38 <lfs_mount_+0x244>
                if (superblock.name_max > lfs->name_max) {
 80069fe:	187b      	adds	r3, r7, r1
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d911      	bls.n	8006a2e <lfs_mount_+0x23a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006a0a:	187b      	adds	r3, r7, r1
 8006a0c:	68dc      	ldr	r4, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a12:	4d5d      	ldr	r5, [pc, #372]	@ (8006b88 <lfs_mount_+0x394>)
 8006a14:	4957      	ldr	r1, [pc, #348]	@ (8006b74 <lfs_mount_+0x380>)
 8006a16:	485d      	ldr	r0, [pc, #372]	@ (8006b8c <lfs_mount_+0x398>)
 8006a18:	4a58      	ldr	r2, [pc, #352]	@ (8006b7c <lfs_mount_+0x388>)
 8006a1a:	9201      	str	r2, [sp, #4]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	0023      	movs	r3, r4
 8006a20:	002a      	movs	r2, r5
 8006a22:	f003 fe85 	bl	800a730 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8006a26:	2316      	movs	r3, #22
 8006a28:	425b      	negs	r3, r3
 8006a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8006a2c:	e092      	b.n	8006b54 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 8006a2e:	230c      	movs	r3, #12
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 8006a38:	210c      	movs	r1, #12
 8006a3a:	187b      	adds	r3, r7, r1
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d01c      	beq.n	8006a7c <lfs_mount_+0x288>
                if (superblock.file_max > lfs->file_max) {
 8006a42:	187b      	adds	r3, r7, r1
 8006a44:	691a      	ldr	r2, [r3, #16]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d911      	bls.n	8006a72 <lfs_mount_+0x27e>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8006a4e:	187b      	adds	r3, r7, r1
 8006a50:	691c      	ldr	r4, [r3, #16]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a56:	4d4e      	ldr	r5, [pc, #312]	@ (8006b90 <lfs_mount_+0x39c>)
 8006a58:	4946      	ldr	r1, [pc, #280]	@ (8006b74 <lfs_mount_+0x380>)
 8006a5a:	484e      	ldr	r0, [pc, #312]	@ (8006b94 <lfs_mount_+0x3a0>)
 8006a5c:	4a47      	ldr	r2, [pc, #284]	@ (8006b7c <lfs_mount_+0x388>)
 8006a5e:	9201      	str	r2, [sp, #4]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	0023      	movs	r3, r4
 8006a64:	002a      	movs	r2, r5
 8006a66:	f003 fe63 	bl	800a730 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8006a6a:	2316      	movs	r3, #22
 8006a6c:	425b      	negs	r3, r3
 8006a6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8006a70:	e070      	b.n	8006b54 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 8006a72:	230c      	movs	r3, #12
 8006a74:	18fb      	adds	r3, r7, r3
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 8006a7c:	210c      	movs	r1, #12
 8006a7e:	187b      	adds	r3, r7, r1
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d027      	beq.n	8006ad6 <lfs_mount_+0x2e2>
                if (superblock.attr_max > lfs->attr_max) {
 8006a86:	187b      	adds	r3, r7, r1
 8006a88:	695a      	ldr	r2, [r3, #20]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d911      	bls.n	8006ab6 <lfs_mount_+0x2c2>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8006a92:	187b      	adds	r3, r7, r1
 8006a94:	695c      	ldr	r4, [r3, #20]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a9a:	4d3f      	ldr	r5, [pc, #252]	@ (8006b98 <lfs_mount_+0x3a4>)
 8006a9c:	4935      	ldr	r1, [pc, #212]	@ (8006b74 <lfs_mount_+0x380>)
 8006a9e:	483f      	ldr	r0, [pc, #252]	@ (8006b9c <lfs_mount_+0x3a8>)
 8006aa0:	4a36      	ldr	r2, [pc, #216]	@ (8006b7c <lfs_mount_+0x388>)
 8006aa2:	9201      	str	r2, [sp, #4]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	0023      	movs	r3, r4
 8006aa8:	002a      	movs	r2, r5
 8006aaa:	f003 fe41 	bl	800a730 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8006aae:	2316      	movs	r3, #22
 8006ab0:	425b      	negs	r3, r3
 8006ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8006ab4:	e04e      	b.n	8006b54 <lfs_mount_+0x360>
                }

                lfs->attr_max = superblock.attr_max;
 8006ab6:	230c      	movs	r3, #12
 8006ab8:	18fb      	adds	r3, r7, r3
 8006aba:	695a      	ldr	r2, [r3, #20]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ac8:	0019      	movs	r1, r3
 8006aca:	0010      	movs	r0, r2
 8006acc:	f7f9 fd06 	bl	80004dc <lfs_min>
 8006ad0:	0002      	movs	r2, r0
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01a      	beq.n	8006b16 <lfs_mount_+0x322>
                    && superblock.block_count != lfs->cfg->block_count) {
 8006ae0:	210c      	movs	r1, #12
 8006ae2:	187b      	adds	r3, r7, r1
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d012      	beq.n	8006b16 <lfs_mount_+0x322>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8006af0:	187b      	adds	r3, r7, r1
 8006af2:	689c      	ldr	r4, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	4d29      	ldr	r5, [pc, #164]	@ (8006ba0 <lfs_mount_+0x3ac>)
 8006afc:	491d      	ldr	r1, [pc, #116]	@ (8006b74 <lfs_mount_+0x380>)
 8006afe:	4829      	ldr	r0, [pc, #164]	@ (8006ba4 <lfs_mount_+0x3b0>)
 8006b00:	4a1e      	ldr	r2, [pc, #120]	@ (8006b7c <lfs_mount_+0x388>)
 8006b02:	9201      	str	r2, [sp, #4]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	0023      	movs	r3, r4
 8006b08:	002a      	movs	r2, r5
 8006b0a:	f003 fe11 	bl	800a730 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8006b0e:	2316      	movs	r3, #22
 8006b10:	425b      	negs	r3, r3
 8006b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8006b14:	e01e      	b.n	8006b54 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 8006b16:	210c      	movs	r1, #12
 8006b18:	187b      	adds	r3, r7, r1
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8006b20:	187b      	adds	r3, r7, r1
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d040      	beq.n	8006bb0 <lfs_mount_+0x3bc>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8006b2e:	187b      	adds	r3, r7, r1
 8006b30:	685c      	ldr	r4, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	4d1b      	ldr	r5, [pc, #108]	@ (8006ba8 <lfs_mount_+0x3b4>)
 8006b3a:	490e      	ldr	r1, [pc, #56]	@ (8006b74 <lfs_mount_+0x380>)
 8006b3c:	481b      	ldr	r0, [pc, #108]	@ (8006bac <lfs_mount_+0x3b8>)
 8006b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8006b7c <lfs_mount_+0x388>)
 8006b40:	9201      	str	r2, [sp, #4]
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	0023      	movs	r3, r4
 8006b46:	002a      	movs	r2, r5
 8006b48:	f003 fdf2 	bl	800a730 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8006b4c:	2316      	movs	r3, #22
 8006b4e:	425b      	negs	r3, r3
 8006b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8006b52:	46c0      	nop			@ (mov r8, r8)
            goto cleanup;
 8006b54:	e08e      	b.n	8006c74 <lfs_mount_+0x480>
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	0800bf80 	.word	0x0800bf80
 8006b5c:	0800bd98 	.word	0x0800bd98
 8006b60:	7ffffc00 	.word	0x7ffffc00
 8006b64:	08002e35 	.word	0x08002e35
 8006b68:	0ff00008 	.word	0x0ff00008
 8006b6c:	20100018 	.word	0x20100018
 8006b70:	000011b2 	.word	0x000011b2
 8006b74:	0800b478 	.word	0x0800b478
 8006b78:	0800bdd0 	.word	0x0800bdd0
 8006b7c:	0800b588 	.word	0x0800b588
 8006b80:	000011c1 	.word	0x000011c1
 8006b84:	0800be08 	.word	0x0800be08
 8006b88:	000011d0 	.word	0x000011d0
 8006b8c:	0800be48 	.word	0x0800be48
 8006b90:	000011db 	.word	0x000011db
 8006b94:	0800be7c 	.word	0x0800be7c
 8006b98:	000011e6 	.word	0x000011e6
 8006b9c:	0800beb0 	.word	0x0800beb0
 8006ba0:	000011f5 	.word	0x000011f5
 8006ba4:	0800bee4 	.word	0x0800bee4
 8006ba8:	000011fe 	.word	0x000011fe
 8006bac:	0800bf18 	.word	0x0800bf18
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3330      	adds	r3, #48	@ 0x30
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	2340      	movs	r3, #64	@ 0x40
 8006bb8:	18f9      	adds	r1, r7, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f7fc f907 	bl	8002dd0 <lfs_dir_getgstate>
 8006bc2:	0003      	movs	r3, r0
 8006bc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if (err) {
 8006bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d155      	bne.n	8006c78 <lfs_mount_+0x484>
    while (!lfs_pair_isnull(dir.tail)) {
 8006bcc:	2340      	movs	r3, #64	@ 0x40
 8006bce:	18fb      	adds	r3, r7, r3
 8006bd0:	3318      	adds	r3, #24
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f7fa f94a 	bl	8000e6c <lfs_pair_isnull>
 8006bd8:	0003      	movs	r3, r0
 8006bda:	001a      	movs	r2, r3
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4053      	eors	r3, r2
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d000      	beq.n	8006be8 <lfs_mount_+0x3f4>
 8006be6:	e62a      	b.n	800683e <lfs_mount_+0x4a>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3330      	adds	r3, #48	@ 0x30
 8006bec:	0018      	movs	r0, r3
 8006bee:	f7fa fa89 	bl	8001104 <lfs_gstate_iszero>
 8006bf2:	0003      	movs	r3, r0
 8006bf4:	001a      	movs	r2, r3
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4053      	eors	r3, r2
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d011      	beq.n	8006c24 <lfs_mount_+0x430>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	4e1f      	ldr	r6, [pc, #124]	@ (8006c8c <lfs_mount_+0x498>)
 8006c0e:	4c20      	ldr	r4, [pc, #128]	@ (8006c90 <lfs_mount_+0x49c>)
 8006c10:	4820      	ldr	r0, [pc, #128]	@ (8006c94 <lfs_mount_+0x4a0>)
 8006c12:	4921      	ldr	r1, [pc, #132]	@ (8006c98 <lfs_mount_+0x4a4>)
 8006c14:	9102      	str	r1, [sp, #8]
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	9200      	str	r2, [sp, #0]
 8006c1a:	002b      	movs	r3, r5
 8006c1c:	0032      	movs	r2, r6
 8006c1e:	0021      	movs	r1, r4
 8006c20:	f003 fd86 	bl	800a730 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c28:	0018      	movs	r0, r3
 8006c2a:	f7fa f9bf 	bl	8000fac <lfs_tag_isvalid>
 8006c2e:	0003      	movs	r3, r0
 8006c30:	001a      	movs	r2, r3
 8006c32:	2301      	movs	r3, #1
 8006c34:	4053      	eors	r3, r2
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	001a      	movs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3e:	189a      	adds	r2, r3, r2
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	333c      	adds	r3, #60	@ 0x3c
 8006c4a:	3230      	adds	r2, #48	@ 0x30
 8006c4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c4e:	c313      	stmia	r3!, {r0, r1, r4}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c58:	0019      	movs	r1, r3
 8006c5a:	0010      	movs	r0, r2
 8006c5c:	f7f9 fae8 	bl	8000230 <__aeabi_uidivmod>
 8006c60:	000b      	movs	r3, r1
 8006c62:	001a      	movs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7fa fc59 	bl	8001522 <lfs_alloc_drop>

    return 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e007      	b.n	8006c84 <lfs_mount_+0x490>
            goto cleanup;
 8006c74:	46c0      	nop			@ (mov r8, r8)
 8006c76:	e000      	b.n	8006c7a <lfs_mount_+0x486>
            goto cleanup;
 8006c78:	46c0      	nop			@ (mov r8, r8)

cleanup:
    lfs_unmount_(lfs);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f000 f80d 	bl	8006c9c <lfs_unmount_>
    return err;
 8006c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8006c84:	0018      	movs	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b01d      	add	sp, #116	@ 0x74
 8006c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c8c:	0000120e 	.word	0x0000120e
 8006c90:	0800b478 	.word	0x0800b478
 8006c94:	0800bf48 	.word	0x0800bf48
 8006c98:	0800b588 	.word	0x0800b588

08006c9c <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f7ff fc76 	bl	8006598 <lfs_deinit>
 8006cac:	0003      	movs	r3, r0
}
 8006cae:	0018      	movs	r0, r3
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b002      	add	sp, #8
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8006cb8:	b5b0      	push	{r4, r5, r7, lr}
 8006cba:	b0a0      	sub	sp, #128	@ 0x80
 8006cbc:	af04      	add	r7, sp, #16
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	001a      	movs	r2, r3
 8006cc6:	1cfb      	adds	r3, r7, #3
 8006cc8:	701a      	strb	r2, [r3, #0]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006cca:	2428      	movs	r4, #40	@ 0x28
 8006ccc:	193b      	adds	r3, r7, r4
 8006cce:	0018      	movs	r0, r3
 8006cd0:	2320      	movs	r3, #32
 8006cd2:	001a      	movs	r2, r3
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	f003 fd95 	bl	800a804 <memset>
 8006cda:	193b      	adds	r3, r7, r4
 8006cdc:	2201      	movs	r2, #1
 8006cde:	61da      	str	r2, [r3, #28]
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    struct lfs_tortoise_t tortoise = {
 8006ce0:	2318      	movs	r3, #24
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	4a95      	ldr	r2, [pc, #596]	@ (8006f3c <lfs_fs_traverse_+0x284>)
 8006ce6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006ce8:	c313      	stmia	r3!, {r0, r1, r4}
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	601a      	str	r2, [r3, #0]
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8006cf2:	e0b7      	b.n	8006e64 <lfs_fs_traverse_+0x1ac>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 8006cf4:	2318      	movs	r3, #24
 8006cf6:	18fa      	adds	r2, r7, r3
 8006cf8:	2328      	movs	r3, #40	@ 0x28
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	0011      	movs	r1, r2
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f7ff fd38 	bl	8006774 <lfs_tortoise_detectcycles>
 8006d04:	0003      	movs	r3, r0
 8006d06:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err < 0) {
 8006d08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	da02      	bge.n	8006d14 <lfs_fs_traverse_+0x5c>
            return LFS_ERR_CORRUPT;
 8006d0e:	2354      	movs	r3, #84	@ 0x54
 8006d10:	425b      	negs	r3, r3
 8006d12:	e10f      	b.n	8006f34 <lfs_fs_traverse_+0x27c>
        }

        for (int i = 0; i < 2; i++) {
 8006d14:	2300      	movs	r3, #0
 8006d16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d18:	e013      	b.n	8006d42 <lfs_fs_traverse_+0x8a>
            int err = cb(data, dir.tail[i]);
 8006d1a:	2328      	movs	r3, #40	@ 0x28
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d20:	3206      	adds	r2, #6
 8006d22:	0092      	lsls	r2, r2, #2
 8006d24:	58d1      	ldr	r1, [r2, r3]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	0010      	movs	r0, r2
 8006d2c:	4798      	blx	r3
 8006d2e:	0003      	movs	r3, r0
 8006d30:	64bb      	str	r3, [r7, #72]	@ 0x48
            if (err) {
 8006d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <lfs_fs_traverse_+0x84>
                return err;
 8006d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d3a:	e0fb      	b.n	8006f34 <lfs_fs_traverse_+0x27c>
        for (int i = 0; i < 2; i++) {
 8006d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d3e:	3301      	adds	r3, #1
 8006d40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	dde8      	ble.n	8006d1a <lfs_fs_traverse_+0x62>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8006d48:	2128      	movs	r1, #40	@ 0x28
 8006d4a:	187b      	adds	r3, r7, r1
 8006d4c:	3318      	adds	r3, #24
 8006d4e:	001a      	movs	r2, r3
 8006d50:	1879      	adds	r1, r7, r1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	0018      	movs	r0, r3
 8006d56:	f7fc f81f 	bl	8002d98 <lfs_dir_fetch>
 8006d5a:	0003      	movs	r3, r0
 8006d5c:	653b      	str	r3, [r7, #80]	@ 0x50
        if (err) {
 8006d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <lfs_fs_traverse_+0xb0>
            return err;
 8006d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d66:	e0e5      	b.n	8006f34 <lfs_fs_traverse_+0x27c>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8006d68:	236a      	movs	r3, #106	@ 0x6a
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	801a      	strh	r2, [r3, #0]
 8006d70:	e070      	b.n	8006e54 <lfs_fs_traverse_+0x19c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006d72:	236a      	movs	r3, #106	@ 0x6a
 8006d74:	18fb      	adds	r3, r7, r3
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006d7a:	4a71      	ldr	r2, [pc, #452]	@ (8006f40 <lfs_fs_traverse_+0x288>)
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	4c71      	ldr	r4, [pc, #452]	@ (8006f44 <lfs_fs_traverse_+0x28c>)
 8006d80:	2328      	movs	r3, #40	@ 0x28
 8006d82:	18f9      	adds	r1, r7, r3
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	2310      	movs	r3, #16
 8006d88:	18fb      	adds	r3, r7, r3
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	0013      	movs	r3, r2
 8006d8e:	0022      	movs	r2, r4
 8006d90:	f7fa fde4 	bl	800195c <lfs_dir_get>
 8006d94:	0003      	movs	r3, r0
 8006d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if (tag < 0) {
 8006d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	da04      	bge.n	8006da8 <lfs_fs_traverse_+0xf0>
                if (tag == LFS_ERR_NOENT) {
 8006d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da0:	3302      	adds	r3, #2
 8006da2:	d050      	beq.n	8006e46 <lfs_fs_traverse_+0x18e>
                    continue;
                }
                return tag;
 8006da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da6:	e0c5      	b.n	8006f34 <lfs_fs_traverse_+0x27c>
            }
            lfs_ctz_fromle32(&ctz);
 8006da8:	2410      	movs	r4, #16
 8006daa:	193b      	adds	r3, r7, r4
 8006dac:	0018      	movs	r0, r3
 8006dae:	f7fa fa97 	bl	80012e0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8006db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006db4:	0018      	movs	r0, r3
 8006db6:	f7fa f932 	bl	800101e <lfs_tag_type3>
 8006dba:	0003      	movs	r3, r0
 8006dbc:	001a      	movs	r2, r3
 8006dbe:	4b62      	ldr	r3, [pc, #392]	@ (8006f48 <lfs_fs_traverse_+0x290>)
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d117      	bne.n	8006df4 <lfs_fs_traverse_+0x13c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8006dc4:	68f9      	ldr	r1, [r7, #12]
 8006dc6:	0022      	movs	r2, r4
 8006dc8:	18bb      	adds	r3, r7, r2
 8006dca:	681c      	ldr	r4, [r3, #0]
 8006dcc:	18bb      	adds	r3, r7, r2
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	9202      	str	r2, [sp, #8]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	9201      	str	r2, [sp, #4]
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	0023      	movs	r3, r4
 8006dde:	000a      	movs	r2, r1
 8006de0:	2100      	movs	r1, #0
 8006de2:	f7fe f8a9 	bl	8004f38 <lfs_ctz_traverse>
 8006de6:	0003      	movs	r3, r0
 8006de8:	653b      	str	r3, [r7, #80]	@ 0x50
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8006dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d02b      	beq.n	8006e48 <lfs_fs_traverse_+0x190>
                    return err;
 8006df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006df2:	e09f      	b.n	8006f34 <lfs_fs_traverse_+0x27c>
                }
            } else if (includeorphans &&
 8006df4:	1cfb      	adds	r3, r7, #3
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d025      	beq.n	8006e48 <lfs_fs_traverse_+0x190>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8006dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7fa f90d 	bl	800101e <lfs_tag_type3>
 8006e04:	0003      	movs	r3, r0
 8006e06:	001a      	movs	r2, r3
            } else if (includeorphans &&
 8006e08:	2380      	movs	r3, #128	@ 0x80
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d11b      	bne.n	8006e48 <lfs_fs_traverse_+0x190>
                for (int i = 0; i < 2; i++) {
 8006e10:	2300      	movs	r3, #0
 8006e12:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e14:	e013      	b.n	8006e3e <lfs_fs_traverse_+0x186>
                    err = cb(data, (&ctz.head)[i]);
 8006e16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	2210      	movs	r2, #16
 8006e1c:	18ba      	adds	r2, r7, r2
 8006e1e:	18d3      	adds	r3, r2, r3
 8006e20:	6819      	ldr	r1, [r3, #0]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	0010      	movs	r0, r2
 8006e28:	4798      	blx	r3
 8006e2a:	0003      	movs	r3, r0
 8006e2c:	653b      	str	r3, [r7, #80]	@ 0x50
                    if (err) {
 8006e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <lfs_fs_traverse_+0x180>
                        return err;
 8006e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e36:	e07d      	b.n	8006f34 <lfs_fs_traverse_+0x27c>
                for (int i = 0; i < 2; i++) {
 8006e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	dde8      	ble.n	8006e16 <lfs_fs_traverse_+0x15e>
 8006e44:	e000      	b.n	8006e48 <lfs_fs_traverse_+0x190>
                    continue;
 8006e46:	46c0      	nop			@ (mov r8, r8)
        for (uint16_t id = 0; id < dir.count; id++) {
 8006e48:	216a      	movs	r1, #106	@ 0x6a
 8006e4a:	187b      	adds	r3, r7, r1
 8006e4c:	881a      	ldrh	r2, [r3, #0]
 8006e4e:	187b      	adds	r3, r7, r1
 8006e50:	3201      	adds	r2, #1
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	2328      	movs	r3, #40	@ 0x28
 8006e56:	18fb      	adds	r3, r7, r3
 8006e58:	8a9b      	ldrh	r3, [r3, #20]
 8006e5a:	226a      	movs	r2, #106	@ 0x6a
 8006e5c:	18ba      	adds	r2, r7, r2
 8006e5e:	8812      	ldrh	r2, [r2, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d386      	bcc.n	8006d72 <lfs_fs_traverse_+0xba>
    while (!lfs_pair_isnull(dir.tail)) {
 8006e64:	2328      	movs	r3, #40	@ 0x28
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	3318      	adds	r3, #24
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f7f9 fffe 	bl	8000e6c <lfs_pair_isnull>
 8006e70:	0003      	movs	r3, r0
 8006e72:	001a      	movs	r2, r3
 8006e74:	2301      	movs	r3, #1
 8006e76:	4053      	eors	r3, r2
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d000      	beq.n	8006e80 <lfs_fs_traverse_+0x1c8>
 8006e7e:	e739      	b.n	8006cf4 <lfs_fs_traverse_+0x3c>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e86:	e051      	b.n	8006f2c <lfs_fs_traverse_+0x274>
        if (f->type != LFS_TYPE_REG) {
 8006e88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e8a:	799b      	ldrb	r3, [r3, #6]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d149      	bne.n	8006f24 <lfs_fs_traverse_+0x26c>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006e90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e94:	2380      	movs	r3, #128	@ 0x80
 8006e96:	025b      	lsls	r3, r3, #9
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d01e      	beq.n	8006eda <lfs_fs_traverse_+0x222>
 8006e9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ea0:	2380      	movs	r3, #128	@ 0x80
 8006ea2:	035b      	lsls	r3, r3, #13
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	d118      	bne.n	8006eda <lfs_fs_traverse_+0x222>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006ea8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eaa:	3340      	adds	r3, #64	@ 0x40
 8006eac:	0019      	movs	r1, r3
 8006eae:	68fc      	ldr	r4, [r7, #12]
 8006eb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eb2:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8006eb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	9202      	str	r2, [sp, #8]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	9201      	str	r2, [sp, #4]
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	002b      	movs	r3, r5
 8006ec6:	0022      	movs	r2, r4
 8006ec8:	f7fe f836 	bl	8004f38 <lfs_ctz_traverse>
 8006ecc:	0003      	movs	r3, r0
 8006ece:	65bb      	str	r3, [r7, #88]	@ 0x58
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006ed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <lfs_fs_traverse_+0x222>
                return err;
 8006ed6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ed8:	e02c      	b.n	8006f34 <lfs_fs_traverse_+0x27c>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006eda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ede:	2380      	movs	r3, #128	@ 0x80
 8006ee0:	029b      	lsls	r3, r3, #10
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d01f      	beq.n	8006f26 <lfs_fs_traverse_+0x26e>
 8006ee6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eea:	2380      	movs	r3, #128	@ 0x80
 8006eec:	035b      	lsls	r3, r3, #13
 8006eee:	4013      	ands	r3, r2
 8006ef0:	d119      	bne.n	8006f26 <lfs_fs_traverse_+0x26e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006ef2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ef4:	3340      	adds	r3, #64	@ 0x40
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	68fc      	ldr	r4, [r7, #12]
 8006efa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006efc:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8006efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	9202      	str	r2, [sp, #8]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	9201      	str	r2, [sp, #4]
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	002b      	movs	r3, r5
 8006f10:	0022      	movs	r2, r4
 8006f12:	f7fe f811 	bl	8004f38 <lfs_ctz_traverse>
 8006f16:	0003      	movs	r3, r0
 8006f18:	657b      	str	r3, [r7, #84]	@ 0x54
                    f->block, f->pos, cb, data);
            if (err) {
 8006f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <lfs_fs_traverse_+0x26e>
                return err;
 8006f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f22:	e007      	b.n	8006f34 <lfs_fs_traverse_+0x27c>
            continue;
 8006f24:	46c0      	nop			@ (mov r8, r8)
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1aa      	bne.n	8006e88 <lfs_fs_traverse_+0x1d0>
            }
        }
    }
#endif

    return 0;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	0018      	movs	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b01c      	add	sp, #112	@ 0x70
 8006f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006f3c:	0800bf80 	.word	0x0800bf80
 8006f40:	20000008 	.word	0x20000008
 8006f44:	700ffc00 	.word	0x700ffc00
 8006f48:	00000202 	.word	0x00000202

08006f4c <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006f4c:	b590      	push	{r4, r7, lr}
 8006f4e:	b08b      	sub	sp, #44	@ 0x2c
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8006f64:	2310      	movs	r3, #16
 8006f66:	18fb      	adds	r3, r7, r3
 8006f68:	4a21      	ldr	r2, [pc, #132]	@ (8006ff0 <lfs_fs_pred+0xa4>)
 8006f6a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006f6c:	c313      	stmia	r3!, {r0, r1, r4}
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	601a      	str	r2, [r3, #0]
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
    while (!lfs_pair_isnull(pdir->tail)) {
 8006f76:	e028      	b.n	8006fca <lfs_fs_pred+0x7e>
        err = lfs_tortoise_detectcycles(pdir, &tortoise);
 8006f78:	2310      	movs	r3, #16
 8006f7a:	18fa      	adds	r2, r7, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	0011      	movs	r1, r2
 8006f80:	0018      	movs	r0, r3
 8006f82:	f7ff fbf7 	bl	8006774 <lfs_tortoise_detectcycles>
 8006f86:	0003      	movs	r3, r0
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24
        if (err < 0) {
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	da02      	bge.n	8006f96 <lfs_fs_pred+0x4a>
            return LFS_ERR_CORRUPT;
 8006f90:	2354      	movs	r3, #84	@ 0x54
 8006f92:	425b      	negs	r3, r3
 8006f94:	e027      	b.n	8006fe6 <lfs_fs_pred+0x9a>
        }

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3318      	adds	r3, #24
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	0011      	movs	r1, r2
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f7f9 ff7c 	bl	8000e9c <lfs_pair_cmp>
 8006fa4:	1e03      	subs	r3, r0, #0
 8006fa6:	d101      	bne.n	8006fac <lfs_fs_pred+0x60>
            return 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e01c      	b.n	8006fe6 <lfs_fs_pred+0x9a>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3318      	adds	r3, #24
 8006fb0:	001a      	movs	r2, r3
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f7fb feee 	bl	8002d98 <lfs_dir_fetch>
 8006fbc:	0003      	movs	r3, r0
 8006fbe:	623b      	str	r3, [r7, #32]
        if (err) {
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <lfs_fs_pred+0x7e>
            return err;
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	e00d      	b.n	8006fe6 <lfs_fs_pred+0x9a>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3318      	adds	r3, #24
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f7f9 ff4c 	bl	8000e6c <lfs_pair_isnull>
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	001a      	movs	r2, r3
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4053      	eors	r3, r2
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1ca      	bne.n	8006f78 <lfs_fs_pred+0x2c>
        }
    }

    return LFS_ERR_NOENT;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	425b      	negs	r3, r3
}
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	b00b      	add	sp, #44	@ 0x2c
 8006fec:	bd90      	pop	{r4, r7, pc}
 8006fee:	46c0      	nop			@ (mov r8, r8)
 8006ff0:	0800bf80 	.word	0x0800bf80

08006ff4 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff6:	b08f      	sub	sp, #60	@ 0x3c
 8006ff8:	af04      	add	r7, sp, #16
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	3310      	adds	r3, #16
 8007012:	001c      	movs	r4, r3
    int err = lfs_bd_read(lfs,
 8007014:	6a3d      	ldr	r5, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800701a:	69de      	ldr	r6, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	685b      	ldr	r3, [r3, #4]
    int err = lfs_bd_read(lfs,
 8007024:	6a38      	ldr	r0, [r7, #32]
 8007026:	2108      	movs	r1, #8
 8007028:	9103      	str	r1, [sp, #12]
 800702a:	2110      	movs	r1, #16
 800702c:	1879      	adds	r1, r7, r1
 800702e:	9102      	str	r1, [sp, #8]
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	9200      	str	r2, [sp, #0]
 8007034:	0033      	movs	r3, r6
 8007036:	002a      	movs	r2, r5
 8007038:	0021      	movs	r1, r4
 800703a:	f7f9 fb21 	bl	8000680 <lfs_bd_read>
 800703e:	0003      	movs	r3, r0
 8007040:	61bb      	str	r3, [r7, #24]
    if (err) {
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <lfs_fs_parent_match+0x58>
        return err;
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	e00f      	b.n	800706c <lfs_fs_parent_match+0x78>
    }

    lfs_pair_fromle32(child);
 800704c:	2410      	movs	r4, #16
 800704e:	193b      	adds	r3, r7, r4
 8007050:	0018      	movs	r0, r3
 8007052:	f7f9 ff77 	bl	8000f44 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8007056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007058:	1d1a      	adds	r2, r3, #4
 800705a:	193b      	adds	r3, r7, r4
 800705c:	0011      	movs	r1, r2
 800705e:	0018      	movs	r0, r3
 8007060:	f7f9 ff1c 	bl	8000e9c <lfs_pair_cmp>
 8007064:	0003      	movs	r3, r0
 8007066:	1e5a      	subs	r2, r3, #1
 8007068:	4193      	sbcs	r3, r2
 800706a:	b2db      	uxtb	r3, r3
}
 800706c:	0018      	movs	r0, r3
 800706e:	46bd      	mov	sp, r7
 8007070:	b00b      	add	sp, #44	@ 0x2c
 8007072:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007074 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8007074:	b5b0      	push	{r4, r5, r7, lr}
 8007076:	b092      	sub	sp, #72	@ 0x48
 8007078:	af04      	add	r7, sp, #16
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 800708c:	2320      	movs	r3, #32
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	4a28      	ldr	r2, [pc, #160]	@ (8007134 <lfs_fs_parent+0xc0>)
 8007092:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007094:	c313      	stmia	r3!, {r0, r1, r4}
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	601a      	str	r2, [r3, #0]
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (!lfs_pair_isnull(parent->tail)) {
 800709e:	e037      	b.n	8007110 <lfs_fs_parent+0x9c>
        err = lfs_tortoise_detectcycles(parent, &tortoise);
 80070a0:	2320      	movs	r3, #32
 80070a2:	18fa      	adds	r2, r7, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	0011      	movs	r1, r2
 80070a8:	0018      	movs	r0, r3
 80070aa:	f7ff fb63 	bl	8006774 <lfs_tortoise_detectcycles>
 80070ae:	0003      	movs	r3, r0
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34
        if (err < 0) {
 80070b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	da01      	bge.n	80070bc <lfs_fs_parent+0x48>
            return err;
 80070b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ba:	e037      	b.n	800712c <lfs_fs_parent+0xb8>
        }

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3318      	adds	r3, #24
 80070c0:	001c      	movs	r4, r3
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80070c2:	2114      	movs	r1, #20
 80070c4:	187b      	adds	r3, r7, r1
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	601a      	str	r2, [r3, #0]
                    lfs, {pair[0], pair[1]}});
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	681a      	ldr	r2, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80070ce:	187b      	adds	r3, r7, r1
 80070d0:	605a      	str	r2, [r3, #4]
                    lfs, {pair[0], pair[1]}});
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	3304      	adds	r3, #4
 80070d6:	681a      	ldr	r2, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80070d8:	000d      	movs	r5, r1
 80070da:	187b      	adds	r3, r7, r1
 80070dc:	609a      	str	r2, [r3, #8]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80070de:	4a16      	ldr	r2, [pc, #88]	@ (8007138 <lfs_fs_parent+0xc4>)
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	197b      	adds	r3, r7, r5
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	4b14      	ldr	r3, [pc, #80]	@ (800713c <lfs_fs_parent+0xc8>)
 80070ea:	9302      	str	r3, [sp, #8]
 80070ec:	2300      	movs	r3, #0
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	4b13      	ldr	r3, [pc, #76]	@ (8007140 <lfs_fs_parent+0xcc>)
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	0013      	movs	r3, r2
 80070f6:	0022      	movs	r2, r4
 80070f8:	f7fb fa50 	bl	800259c <lfs_dir_fetchmatch>
 80070fc:	0003      	movs	r3, r0
 80070fe:	633b      	str	r3, [r7, #48]	@ 0x30
        if (tag && tag != LFS_ERR_NOENT) {
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <lfs_fs_parent+0x9c>
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	3302      	adds	r3, #2
 800710a:	d001      	beq.n	8007110 <lfs_fs_parent+0x9c>
            return tag;
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	e00d      	b.n	800712c <lfs_fs_parent+0xb8>
    while (!lfs_pair_isnull(parent->tail)) {
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3318      	adds	r3, #24
 8007114:	0018      	movs	r0, r3
 8007116:	f7f9 fea9 	bl	8000e6c <lfs_pair_isnull>
 800711a:	0003      	movs	r3, r0
 800711c:	001a      	movs	r2, r3
 800711e:	2301      	movs	r3, #1
 8007120:	4053      	eors	r3, r2
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1bb      	bne.n	80070a0 <lfs_fs_parent+0x2c>
        }
    }

    return LFS_ERR_NOENT;
 8007128:	2302      	movs	r3, #2
 800712a:	425b      	negs	r3, r3
}
 800712c:	0018      	movs	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	b00e      	add	sp, #56	@ 0x38
 8007132:	bdb0      	pop	{r4, r5, r7, pc}
 8007134:	0800bf80 	.word	0x0800bf80
 8007138:	7ff003ff 	.word	0x7ff003ff
 800713c:	08006ff5 	.word	0x08006ff5
 8007140:	20000008 	.word	0x20000008

08007144 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	000a      	movs	r2, r1
 800714e:	1cfb      	adds	r3, r7, #3
 8007150:	701a      	strb	r2, [r3, #0]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007156:	4a06      	ldr	r2, [pc, #24]	@ (8007170 <lfs_fs_prepsuperblock+0x2c>)
 8007158:	401a      	ands	r2, r3
            | (uint32_t)needssuperblock << 9;
 800715a:	1cfb      	adds	r3, r7, #3
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	025b      	lsls	r3, r3, #9
 8007160:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007166:	46c0      	nop			@ (mov r8, r8)
 8007168:	46bd      	mov	sp, r7
 800716a:	b002      	add	sp, #8
 800716c:	bd80      	pop	{r7, pc}
 800716e:	46c0      	nop			@ (mov r8, r8)
 8007170:	fffffdff 	.word	0xfffffdff

08007174 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8007174:	b590      	push	{r4, r7, lr}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	000a      	movs	r2, r1
 800717e:	1cfb      	adds	r3, r7, #3
 8007180:	701a      	strb	r2, [r3, #0]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007186:	0018      	movs	r0, r3
 8007188:	f7f9 ff7e 	bl	8001088 <lfs_tag_size>
 800718c:	1e03      	subs	r3, r0, #0
 800718e:	d109      	bne.n	80071a4 <lfs_fs_preporphans+0x30>
 8007190:	1cfb      	adds	r3, r7, #3
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b7f      	cmp	r3, #127	@ 0x7f
 8007196:	d905      	bls.n	80071a4 <lfs_fs_preporphans+0x30>
 8007198:	4b1b      	ldr	r3, [pc, #108]	@ (8007208 <lfs_fs_preporphans+0x94>)
 800719a:	4a1c      	ldr	r2, [pc, #112]	@ (800720c <lfs_fs_preporphans+0x98>)
 800719c:	491c      	ldr	r1, [pc, #112]	@ (8007210 <lfs_fs_preporphans+0x9c>)
 800719e:	481d      	ldr	r0, [pc, #116]	@ (8007214 <lfs_fs_preporphans+0xa0>)
 80071a0:	f003 f90e 	bl	800a3c0 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a8:	0018      	movs	r0, r3
 80071aa:	f7f9 ff6d 	bl	8001088 <lfs_tag_size>
 80071ae:	0002      	movs	r2, r0
 80071b0:	23ff      	movs	r3, #255	@ 0xff
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d90a      	bls.n	80071ce <lfs_fs_preporphans+0x5a>
 80071b8:	1cfb      	adds	r3, r7, #3
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	b25b      	sxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	dd05      	ble.n	80071ce <lfs_fs_preporphans+0x5a>
 80071c2:	4b15      	ldr	r3, [pc, #84]	@ (8007218 <lfs_fs_preporphans+0xa4>)
 80071c4:	4a11      	ldr	r2, [pc, #68]	@ (800720c <lfs_fs_preporphans+0x98>)
 80071c6:	4915      	ldr	r1, [pc, #84]	@ (800721c <lfs_fs_preporphans+0xa8>)
 80071c8:	4812      	ldr	r0, [pc, #72]	@ (8007214 <lfs_fs_preporphans+0xa0>)
 80071ca:	f003 f8f9 	bl	800a3c0 <__assert_func>
    lfs->gstate.tag += orphans;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071d2:	1cfb      	adds	r3, r7, #3
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	b25b      	sxtb	r3, r3
 80071d8:	18d2      	adds	r2, r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	085c      	lsrs	r4, r3, #1
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3330      	adds	r3, #48	@ 0x30
 80071ea:	0018      	movs	r0, r3
 80071ec:	f7f9 ffa5 	bl	800113a <lfs_gstate_hasorphans>
 80071f0:	0003      	movs	r3, r0
 80071f2:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80071f4:	0022      	movs	r2, r4
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	0018      	movs	r0, r3
 8007200:	46bd      	mov	sp, r7
 8007202:	b003      	add	sp, #12
 8007204:	bd90      	pop	{r4, r7, pc}
 8007206:	46c0      	nop			@ (mov r8, r8)
 8007208:	0800bf90 	.word	0x0800bf90
 800720c:	0800c398 	.word	0x0800c398
 8007210:	0000131a 	.word	0x0000131a
 8007214:	0800b478 	.word	0x0800b478
 8007218:	0800bfc8 	.word	0x0800bfc8
 800721c:	0000131b 	.word	0x0000131b

08007220 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	200a      	movs	r0, #10
 800722c:	183b      	adds	r3, r7, r0
 800722e:	1c0a      	adds	r2, r1, #0
 8007230:	801a      	strh	r2, [r3, #0]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007236:	4a17      	ldr	r2, [pc, #92]	@ (8007294 <lfs_fs_prepmove+0x74>)
 8007238:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800723a:	183b      	adds	r3, r7, r0
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	4916      	ldr	r1, [pc, #88]	@ (8007298 <lfs_fs_prepmove+0x78>)
 8007240:	428b      	cmp	r3, r1
 8007242:	d005      	beq.n	8007250 <lfs_fs_prepmove+0x30>
 8007244:	183b      	adds	r3, r7, r0
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	029b      	lsls	r3, r3, #10
 800724a:	4914      	ldr	r1, [pc, #80]	@ (800729c <lfs_fs_prepmove+0x7c>)
 800724c:	430b      	orrs	r3, r1
 800724e:	e000      	b.n	8007252 <lfs_fs_prepmove+0x32>
 8007250:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8007252:	431a      	orrs	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8007258:	230a      	movs	r3, #10
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	4a0e      	ldr	r2, [pc, #56]	@ (8007298 <lfs_fs_prepmove+0x78>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d002      	beq.n	800726a <lfs_fs_prepmove+0x4a>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	e000      	b.n	800726c <lfs_fs_prepmove+0x4c>
 800726a:	2200      	movs	r2, #0
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	635a      	str	r2, [r3, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8007270:	230a      	movs	r3, #10
 8007272:	18fb      	adds	r3, r7, r3
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	4a08      	ldr	r2, [pc, #32]	@ (8007298 <lfs_fs_prepmove+0x78>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d003      	beq.n	8007284 <lfs_fs_prepmove+0x64>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3304      	adds	r3, #4
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	e000      	b.n	8007286 <lfs_fs_prepmove+0x66>
 8007284:	2200      	movs	r2, #0
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800728a:	46c0      	nop			@ (mov r8, r8)
 800728c:	46bd      	mov	sp, r7
 800728e:	b004      	add	sp, #16
 8007290:	bd80      	pop	{r7, pc}
 8007292:	46c0      	nop			@ (mov r8, r8)
 8007294:	800003ff 	.word	0x800003ff
 8007298:	000003ff 	.word	0x000003ff
 800729c:	4ff00000 	.word	0x4ff00000

080072a0 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 80072a0:	b5b0      	push	{r4, r5, r7, lr}
 80072a2:	b098      	sub	sp, #96	@ 0x60
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3330      	adds	r3, #48	@ 0x30
 80072ac:	0018      	movs	r0, r3
 80072ae:	f7f9 ff75 	bl	800119c <lfs_gstate_needssuperblock>
 80072b2:	0003      	movs	r3, r0
 80072b4:	001a      	movs	r2, r3
 80072b6:	2301      	movs	r3, #1
 80072b8:	4053      	eors	r3, r2
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <lfs_fs_desuperblock+0x24>
        return 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	e05a      	b.n	800737a <lfs_fs_desuperblock+0xda>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1c      	ldr	r4, [r3, #32]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072cc:	4d2d      	ldr	r5, [pc, #180]	@ (8007384 <lfs_fs_desuperblock+0xe4>)
 80072ce:	492e      	ldr	r1, [pc, #184]	@ (8007388 <lfs_fs_desuperblock+0xe8>)
 80072d0:	482e      	ldr	r0, [pc, #184]	@ (800738c <lfs_fs_desuperblock+0xec>)
 80072d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007390 <lfs_fs_desuperblock+0xf0>)
 80072d4:	9201      	str	r2, [sp, #4]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	0023      	movs	r3, r4
 80072da:	002a      	movs	r2, r5
 80072dc:	f003 fa28 	bl	800a730 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3320      	adds	r3, #32
 80072e4:	001a      	movs	r2, r3
 80072e6:	2334      	movs	r3, #52	@ 0x34
 80072e8:	18f9      	adds	r1, r7, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	0018      	movs	r0, r3
 80072ee:	f7fb fd53 	bl	8002d98 <lfs_dir_fetch>
 80072f2:	0003      	movs	r3, r0
 80072f4:	657b      	str	r3, [r7, #84]	@ 0x54
    if (err) {
 80072f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <lfs_fs_desuperblock+0x60>
        return err;
 80072fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072fe:	e03c      	b.n	800737a <lfs_fs_desuperblock+0xda>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	0018      	movs	r0, r3
 8007304:	f7fa f8d8 	bl	80014b8 <lfs_fs_disk_version>
 8007308:	0002      	movs	r2, r0
    lfs_superblock_t superblock = {
 800730a:	211c      	movs	r1, #28
 800730c:	187b      	adds	r3, r7, r1
 800730e:	601a      	str	r2, [r3, #0]
        .block_size  = lfs->cfg->block_size,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007314:	69da      	ldr	r2, [r3, #28]
    lfs_superblock_t superblock = {
 8007316:	000c      	movs	r4, r1
 8007318:	193b      	adds	r3, r7, r4
 800731a:	605a      	str	r2, [r3, #4]
        .block_count = lfs->block_count,
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8007320:	193b      	adds	r3, r7, r4
 8007322:	609a      	str	r2, [r3, #8]
        .name_max    = lfs->name_max,
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8007328:	193b      	adds	r3, r7, r4
 800732a:	60da      	str	r2, [r3, #12]
        .file_max    = lfs->file_max,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8007330:	193b      	adds	r3, r7, r4
 8007332:	611a      	str	r2, [r3, #16]
        .attr_max    = lfs->attr_max,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8007338:	193b      	adds	r3, r7, r4
 800733a:	615a      	str	r2, [r3, #20]
    };

    lfs_superblock_tole32(&superblock);
 800733c:	193b      	adds	r3, r7, r4
 800733e:	0018      	movs	r0, r3
 8007340:	f7fa f836 	bl	80013b0 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007344:	2114      	movs	r1, #20
 8007346:	187b      	adds	r3, r7, r1
 8007348:	4a12      	ldr	r2, [pc, #72]	@ (8007394 <lfs_fs_desuperblock+0xf4>)
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	187b      	adds	r3, r7, r1
 800734e:	193a      	adds	r2, r7, r4
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	187a      	adds	r2, r7, r1
 8007354:	2334      	movs	r3, #52	@ 0x34
 8007356:	18f9      	adds	r1, r7, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	2301      	movs	r3, #1
 800735c:	f7fd fbfe 	bl	8004b5c <lfs_dir_commit>
 8007360:	0003      	movs	r3, r0
 8007362:	657b      	str	r3, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8007364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <lfs_fs_desuperblock+0xce>
        return err;
 800736a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800736c:	e005      	b.n	800737a <lfs_fs_desuperblock+0xda>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2100      	movs	r1, #0
 8007372:	0018      	movs	r0, r3
 8007374:	f7ff fee6 	bl	8007144 <lfs_fs_prepsuperblock>
    return 0;
 8007378:	2300      	movs	r3, #0
}
 800737a:	0018      	movs	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	b016      	add	sp, #88	@ 0x58
 8007380:	bdb0      	pop	{r4, r5, r7, pc}
 8007382:	46c0      	nop			@ (mov r8, r8)
 8007384:	00001334 	.word	0x00001334
 8007388:	0800b478 	.word	0x0800b478
 800738c:	0800c000 	.word	0x0800c000
 8007390:	0800b588 	.word	0x0800b588
 8007394:	20100018 	.word	0x20100018

08007398 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8007398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739a:	b095      	sub	sp, #84	@ 0x54
 800739c:	af04      	add	r7, sp, #16
 800739e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	333c      	adds	r3, #60	@ 0x3c
 80073a4:	0018      	movs	r0, r3
 80073a6:	f7f9 fee8 	bl	800117a <lfs_gstate_hasmove>
 80073aa:	0003      	movs	r3, r0
 80073ac:	001a      	movs	r2, r3
 80073ae:	2301      	movs	r3, #1
 80073b0:	4053      	eors	r3, r2
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <lfs_fs_demove+0x24>
        return 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	e05d      	b.n	8007478 <lfs_fs_demove+0xe0>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c8:	0018      	movs	r0, r3
 80073ca:	f7f9 fe4f 	bl	800106c <lfs_tag_id>
 80073ce:	0003      	movs	r3, r0
 80073d0:	001e      	movs	r6, r3
 80073d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007480 <lfs_fs_demove+0xe8>)
 80073d4:	492b      	ldr	r1, [pc, #172]	@ (8007484 <lfs_fs_demove+0xec>)
 80073d6:	482c      	ldr	r0, [pc, #176]	@ (8007488 <lfs_fs_demove+0xf0>)
 80073d8:	4b2c      	ldr	r3, [pc, #176]	@ (800748c <lfs_fs_demove+0xf4>)
 80073da:	9302      	str	r3, [sp, #8]
 80073dc:	9601      	str	r6, [sp, #4]
 80073de:	9400      	str	r4, [sp, #0]
 80073e0:	002b      	movs	r3, r5
 80073e2:	f003 f9a5 	bl	800a730 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ea:	0018      	movs	r0, r3
 80073ec:	f7f9 fe17 	bl	800101e <lfs_tag_type3>
 80073f0:	0003      	movs	r3, r0
 80073f2:	001a      	movs	r2, r3
 80073f4:	4b26      	ldr	r3, [pc, #152]	@ (8007490 <lfs_fs_demove+0xf8>)
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d005      	beq.n	8007406 <lfs_fs_demove+0x6e>
 80073fa:	4b26      	ldr	r3, [pc, #152]	@ (8007494 <lfs_fs_demove+0xfc>)
 80073fc:	4a26      	ldr	r2, [pc, #152]	@ (8007498 <lfs_fs_demove+0x100>)
 80073fe:	4927      	ldr	r1, [pc, #156]	@ (800749c <lfs_fs_demove+0x104>)
 8007400:	4820      	ldr	r0, [pc, #128]	@ (8007484 <lfs_fs_demove+0xec>)
 8007402:	f002 ffdd 	bl	800a3c0 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3340      	adds	r3, #64	@ 0x40
 800740a:	001a      	movs	r2, r3
 800740c:	2318      	movs	r3, #24
 800740e:	18f9      	adds	r1, r7, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	0018      	movs	r0, r3
 8007414:	f7fb fcc0 	bl	8002d98 <lfs_dir_fetch>
 8007418:	0003      	movs	r3, r0
 800741a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (err) {
 800741c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <lfs_fs_demove+0x8e>
        return err;
 8007422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007424:	e028      	b.n	8007478 <lfs_fs_demove+0xe0>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742a:	253a      	movs	r5, #58	@ 0x3a
 800742c:	197c      	adds	r4, r7, r5
 800742e:	0018      	movs	r0, r3
 8007430:	f7f9 fe1c 	bl	800106c <lfs_tag_id>
 8007434:	0003      	movs	r3, r0
 8007436:	8023      	strh	r3, [r4, #0]
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007438:	4919      	ldr	r1, [pc, #100]	@ (80074a0 <lfs_fs_demove+0x108>)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	0018      	movs	r0, r3
 8007440:	f7ff feee 	bl	8007220 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8007444:	197b      	adds	r3, r7, r5
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	029b      	lsls	r3, r3, #10
 800744a:	4a16      	ldr	r2, [pc, #88]	@ (80074a4 <lfs_fs_demove+0x10c>)
 800744c:	431a      	orrs	r2, r3
 800744e:	2110      	movs	r1, #16
 8007450:	187b      	adds	r3, r7, r1
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	187b      	adds	r3, r7, r1
 8007456:	2200      	movs	r2, #0
 8007458:	605a      	str	r2, [r3, #4]
 800745a:	187a      	adds	r2, r7, r1
 800745c:	2318      	movs	r3, #24
 800745e:	18f9      	adds	r1, r7, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	2301      	movs	r3, #1
 8007464:	f7fd fb7a 	bl	8004b5c <lfs_dir_commit>
 8007468:	0003      	movs	r3, r0
 800746a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800746c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <lfs_fs_demove+0xde>
        return err;
 8007472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007474:	e000      	b.n	8007478 <lfs_fs_demove+0xe0>
    }

    return 0;
 8007476:	2300      	movs	r3, #0
}
 8007478:	0018      	movs	r0, r3
 800747a:	46bd      	mov	sp, r7
 800747c:	b011      	add	sp, #68	@ 0x44
 800747e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007480:	0000135c 	.word	0x0000135c
 8007484:	0800b478 	.word	0x0800b478
 8007488:	0800c034 	.word	0x0800c034
 800748c:	0800b588 	.word	0x0800b588
 8007490:	000004ff 	.word	0x000004ff
 8007494:	0800c068 	.word	0x0800c068
 8007498:	0800c3ac 	.word	0x0800c3ac
 800749c:	00001363 	.word	0x00001363
 80074a0:	000003ff 	.word	0x000003ff
 80074a4:	4ff00000 	.word	0x4ff00000

080074a8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80074a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074aa:	b0b3      	sub	sp, #204	@ 0xcc
 80074ac:	af04      	add	r7, sp, #16
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	000a      	movs	r2, r1
 80074b2:	1cfb      	adds	r3, r7, #3
 80074b4:	701a      	strb	r2, [r3, #0]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3330      	adds	r3, #48	@ 0x30
 80074ba:	0018      	movs	r0, r3
 80074bc:	f7f9 fe3d 	bl	800113a <lfs_gstate_hasorphans>
 80074c0:	0003      	movs	r3, r0
 80074c2:	001a      	movs	r2, r3
 80074c4:	2301      	movs	r3, #1
 80074c6:	4053      	eors	r3, r2
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <lfs_fs_deorphan+0x2a>
        return 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	e1b8      	b.n	8007844 <lfs_fs_deorphan+0x39c>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	22b4      	movs	r2, #180	@ 0xb4
 80074d6:	18ba      	adds	r2, r7, r2
 80074d8:	6013      	str	r3, [r2, #0]
    while (pass < 2) {
 80074da:	e19e      	b.n	800781a <lfs_fs_deorphan+0x372>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80074dc:	2408      	movs	r4, #8
 80074de:	193b      	adds	r3, r7, r4
 80074e0:	0018      	movs	r0, r3
 80074e2:	2320      	movs	r3, #32
 80074e4:	001a      	movs	r2, r3
 80074e6:	2100      	movs	r1, #0
 80074e8:	f003 f98c 	bl	800a804 <memset>
 80074ec:	0021      	movs	r1, r4
 80074ee:	187b      	adds	r3, r7, r1
 80074f0:	2201      	movs	r2, #1
 80074f2:	75da      	strb	r2, [r3, #23]
 80074f4:	187b      	adds	r3, r7, r1
 80074f6:	2201      	movs	r2, #1
 80074f8:	61da      	str	r2, [r3, #28]
        lfs_mdir_t dir;
        bool moreorphans = false;
 80074fa:	23b3      	movs	r3, #179	@ 0xb3
 80074fc:	18fb      	adds	r3, r7, r3
 80074fe:	2200      	movs	r2, #0
 8007500:	701a      	strb	r2, [r3, #0]

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8007502:	e16e      	b.n	80077e2 <lfs_fs_deorphan+0x33a>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8007504:	2308      	movs	r3, #8
 8007506:	18fb      	adds	r3, r7, r3
 8007508:	3318      	adds	r3, #24
 800750a:	001a      	movs	r2, r3
 800750c:	2328      	movs	r3, #40	@ 0x28
 800750e:	18f9      	adds	r1, r7, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	0018      	movs	r0, r3
 8007514:	f7fb fc40 	bl	8002d98 <lfs_dir_fetch>
 8007518:	0003      	movs	r3, r0
 800751a:	22ac      	movs	r2, #172	@ 0xac
 800751c:	18b9      	adds	r1, r7, r2
 800751e:	600b      	str	r3, [r1, #0]
            if (err) {
 8007520:	18bb      	adds	r3, r7, r2
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <lfs_fs_deorphan+0x86>
                return err;
 8007528:	18bb      	adds	r3, r7, r2
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	e18a      	b.n	8007844 <lfs_fs_deorphan+0x39c>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800752e:	2108      	movs	r1, #8
 8007530:	187b      	adds	r3, r7, r1
 8007532:	7ddb      	ldrb	r3, [r3, #23]
 8007534:	2201      	movs	r2, #1
 8007536:	4053      	eors	r3, r2
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d100      	bne.n	8007540 <lfs_fs_deorphan+0x98>
 800753e:	e144      	b.n	80077ca <lfs_fs_deorphan+0x322>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8007540:	2348      	movs	r3, #72	@ 0x48
 8007542:	18fa      	adds	r2, r7, r3
 8007544:	187b      	adds	r3, r7, r1
 8007546:	3318      	adds	r3, #24
 8007548:	0019      	movs	r1, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	0018      	movs	r0, r3
 800754e:	f7ff fd91 	bl	8007074 <lfs_fs_parent>
 8007552:	0003      	movs	r3, r0
 8007554:	22a8      	movs	r2, #168	@ 0xa8
 8007556:	18b9      	adds	r1, r7, r2
 8007558:	600b      	str	r3, [r1, #0]
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800755a:	18bb      	adds	r3, r7, r2
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	da06      	bge.n	8007570 <lfs_fs_deorphan+0xc8>
 8007562:	18bb      	adds	r3, r7, r2
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3302      	adds	r3, #2
 8007568:	d002      	beq.n	8007570 <lfs_fs_deorphan+0xc8>
                    return tag;
 800756a:	18bb      	adds	r3, r7, r2
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	e169      	b.n	8007844 <lfs_fs_deorphan+0x39c>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8007570:	23b4      	movs	r3, #180	@ 0xb4
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d000      	beq.n	800757c <lfs_fs_deorphan+0xd4>
 800757a:	e0bb      	b.n	80076f4 <lfs_fs_deorphan+0x24c>
 800757c:	22a8      	movs	r2, #168	@ 0xa8
 800757e:	18bb      	adds	r3, r7, r2
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3302      	adds	r3, #2
 8007584:	d100      	bne.n	8007588 <lfs_fs_deorphan+0xe0>
 8007586:	e0b5      	b.n	80076f4 <lfs_fs_deorphan+0x24c>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8007588:	18bb      	adds	r3, r7, r2
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	4caf      	ldr	r4, [pc, #700]	@ (800784c <lfs_fs_deorphan+0x3a4>)
 800758e:	2348      	movs	r3, #72	@ 0x48
 8007590:	18f9      	adds	r1, r7, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	2398      	movs	r3, #152	@ 0x98
 8007596:	18fb      	adds	r3, r7, r3
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	0013      	movs	r3, r2
 800759c:	0022      	movs	r2, r4
 800759e:	f7fa f9dd 	bl	800195c <lfs_dir_get>
 80075a2:	0003      	movs	r3, r0
 80075a4:	22a4      	movs	r2, #164	@ 0xa4
 80075a6:	18b9      	adds	r1, r7, r2
 80075a8:	600b      	str	r3, [r1, #0]
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80075aa:	18bb      	adds	r3, r7, r2
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da02      	bge.n	80075b8 <lfs_fs_deorphan+0x110>
                        return state;
 80075b2:	18bb      	adds	r3, r7, r2
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	e107      	b.n	80077c8 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 80075b8:	2498      	movs	r4, #152	@ 0x98
 80075ba:	193b      	adds	r3, r7, r4
 80075bc:	0018      	movs	r0, r3
 80075be:	f7f9 fcc1 	bl	8000f44 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 80075c2:	2508      	movs	r5, #8
 80075c4:	197b      	adds	r3, r7, r5
 80075c6:	3318      	adds	r3, #24
 80075c8:	001a      	movs	r2, r3
 80075ca:	193b      	adds	r3, r7, r4
 80075cc:	0011      	movs	r1, r2
 80075ce:	0018      	movs	r0, r3
 80075d0:	f7f9 fc8c 	bl	8000eec <lfs_pair_issync>
 80075d4:	0003      	movs	r3, r0
 80075d6:	001a      	movs	r2, r3
 80075d8:	2301      	movs	r3, #1
 80075da:	4053      	eors	r3, r2
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d100      	bne.n	80075e4 <lfs_fs_deorphan+0x13c>
 80075e2:	e087      	b.n	80076f4 <lfs_fs_deorphan+0x24c>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80075e4:	197b      	adds	r3, r7, r5
 80075e6:	699e      	ldr	r6, [r3, #24]
 80075e8:	197b      	adds	r3, r7, r5
 80075ea:	69da      	ldr	r2, [r3, #28]
 80075ec:	193b      	adds	r3, r7, r4
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	193b      	adds	r3, r7, r4
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	4896      	ldr	r0, [pc, #600]	@ (8007850 <lfs_fs_deorphan+0x3a8>)
 80075f6:	4684      	mov	ip, r0
 80075f8:	4d96      	ldr	r5, [pc, #600]	@ (8007854 <lfs_fs_deorphan+0x3ac>)
 80075fa:	4c97      	ldr	r4, [pc, #604]	@ (8007858 <lfs_fs_deorphan+0x3b0>)
 80075fc:	4897      	ldr	r0, [pc, #604]	@ (800785c <lfs_fs_deorphan+0x3b4>)
 80075fe:	9003      	str	r0, [sp, #12]
 8007600:	9302      	str	r3, [sp, #8]
 8007602:	9101      	str	r1, [sp, #4]
 8007604:	9200      	str	r2, [sp, #0]
 8007606:	0033      	movs	r3, r6
 8007608:	4662      	mov	r2, ip
 800760a:	0029      	movs	r1, r5
 800760c:	0020      	movs	r0, r4
 800760e:	f003 f88f 	bl	800a730 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8007612:	24b0      	movs	r4, #176	@ 0xb0
 8007614:	193b      	adds	r3, r7, r4
 8007616:	4a92      	ldr	r2, [pc, #584]	@ (8007860 <lfs_fs_deorphan+0x3b8>)
 8007618:	801a      	strh	r2, [r3, #0]
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3330      	adds	r3, #48	@ 0x30
 800761e:	2508      	movs	r5, #8
 8007620:	197a      	adds	r2, r7, r5
 8007622:	0011      	movs	r1, r2
 8007624:	0018      	movs	r0, r3
 8007626:	f7f9 fdcb 	bl	80011c0 <lfs_gstate_hasmovehere>
 800762a:	1e03      	subs	r3, r0, #0
 800762c:	d021      	beq.n	8007672 <lfs_fs_deorphan+0x1ca>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007632:	0026      	movs	r6, r4
 8007634:	193c      	adds	r4, r7, r4
 8007636:	0018      	movs	r0, r3
 8007638:	f7f9 fd18 	bl	800106c <lfs_tag_id>
 800763c:	0003      	movs	r3, r0
 800763e:	8023      	strh	r3, [r4, #0]
                            LFS_DEBUG("Fixing move while fixing orphans "
 8007640:	002a      	movs	r2, r5
 8007642:	18bb      	adds	r3, r7, r2
 8007644:	681d      	ldr	r5, [r3, #0]
 8007646:	18bb      	adds	r3, r7, r2
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	19ba      	adds	r2, r7, r6
 800764c:	8812      	ldrh	r2, [r2, #0]
 800764e:	4e85      	ldr	r6, [pc, #532]	@ (8007864 <lfs_fs_deorphan+0x3bc>)
 8007650:	4c80      	ldr	r4, [pc, #512]	@ (8007854 <lfs_fs_deorphan+0x3ac>)
 8007652:	4885      	ldr	r0, [pc, #532]	@ (8007868 <lfs_fs_deorphan+0x3c0>)
 8007654:	4981      	ldr	r1, [pc, #516]	@ (800785c <lfs_fs_deorphan+0x3b4>)
 8007656:	9102      	str	r1, [sp, #8]
 8007658:	9201      	str	r2, [sp, #4]
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	002b      	movs	r3, r5
 800765e:	0032      	movs	r2, r6
 8007660:	0021      	movs	r1, r4
 8007662:	f003 f865 	bl	800a730 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007666:	497e      	ldr	r1, [pc, #504]	@ (8007860 <lfs_fs_deorphan+0x3b8>)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	0018      	movs	r0, r3
 800766e:	f7ff fdd7 	bl	8007220 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8007672:	2398      	movs	r3, #152	@ 0x98
 8007674:	18fb      	adds	r3, r7, r3
 8007676:	0018      	movs	r0, r3
 8007678:	f7f9 fc7e 	bl	8000f78 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800767c:	21b0      	movs	r1, #176	@ 0xb0
 800767e:	187b      	adds	r3, r7, r1
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	4a77      	ldr	r2, [pc, #476]	@ (8007860 <lfs_fs_deorphan+0x3b8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d005      	beq.n	8007694 <lfs_fs_deorphan+0x1ec>
 8007688:	187b      	adds	r3, r7, r1
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	029b      	lsls	r3, r3, #10
 800768e:	4a77      	ldr	r2, [pc, #476]	@ (800786c <lfs_fs_deorphan+0x3c4>)
 8007690:	431a      	orrs	r2, r3
 8007692:	e000      	b.n	8007696 <lfs_fs_deorphan+0x1ee>
 8007694:	2200      	movs	r2, #0
 8007696:	2188      	movs	r1, #136	@ 0x88
 8007698:	187b      	adds	r3, r7, r1
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	187b      	adds	r3, r7, r1
 800769e:	2200      	movs	r2, #0
 80076a0:	605a      	str	r2, [r3, #4]
 80076a2:	187b      	adds	r3, r7, r1
 80076a4:	4a72      	ldr	r2, [pc, #456]	@ (8007870 <lfs_fs_deorphan+0x3c8>)
 80076a6:	609a      	str	r2, [r3, #8]
 80076a8:	187b      	adds	r3, r7, r1
 80076aa:	2598      	movs	r5, #152	@ 0x98
 80076ac:	197a      	adds	r2, r7, r5
 80076ae:	60da      	str	r2, [r3, #12]
 80076b0:	187a      	adds	r2, r7, r1
 80076b2:	2308      	movs	r3, #8
 80076b4:	18f9      	adds	r1, r7, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	2302      	movs	r3, #2
 80076ba:	f7fc fef1 	bl	80044a0 <lfs_dir_orphaningcommit>
 80076be:	0003      	movs	r3, r0
 80076c0:	24a4      	movs	r4, #164	@ 0xa4
 80076c2:	193a      	adds	r2, r7, r4
 80076c4:	6013      	str	r3, [r2, #0]
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80076c6:	197b      	adds	r3, r7, r5
 80076c8:	0018      	movs	r0, r3
 80076ca:	f7f9 fc3b 	bl	8000f44 <lfs_pair_fromle32>
                        if (state < 0) {
 80076ce:	0022      	movs	r2, r4
 80076d0:	18bb      	adds	r3, r7, r2
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	da02      	bge.n	80076de <lfs_fs_deorphan+0x236>
                            return state;
 80076d8:	18bb      	adds	r3, r7, r2
 80076da:	681b      	ldr	r3, [r3, #0]
                        return state;
 80076dc:	e074      	b.n	80077c8 <lfs_fs_deorphan+0x320>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80076de:	23a4      	movs	r3, #164	@ 0xa4
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d000      	beq.n	80076ea <lfs_fs_deorphan+0x242>
 80076e8:	e07b      	b.n	80077e2 <lfs_fs_deorphan+0x33a>
                            moreorphans = true;
 80076ea:	23b3      	movs	r3, #179	@ 0xb3
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	2201      	movs	r2, #1
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e076      	b.n	80077e2 <lfs_fs_deorphan+0x33a>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80076f4:	23b4      	movs	r3, #180	@ 0xb4
 80076f6:	18fb      	adds	r3, r7, r3
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d165      	bne.n	80077ca <lfs_fs_deorphan+0x322>
 80076fe:	23a8      	movs	r3, #168	@ 0xa8
 8007700:	18fb      	adds	r3, r7, r3
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3302      	adds	r3, #2
 8007706:	d160      	bne.n	80077ca <lfs_fs_deorphan+0x322>
 8007708:	1cfb      	adds	r3, r7, #3
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d05c      	beq.n	80077ca <lfs_fs_deorphan+0x322>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8007710:	2208      	movs	r2, #8
 8007712:	18bb      	adds	r3, r7, r2
 8007714:	699c      	ldr	r4, [r3, #24]
 8007716:	18bb      	adds	r3, r7, r2
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	4d56      	ldr	r5, [pc, #344]	@ (8007874 <lfs_fs_deorphan+0x3cc>)
 800771c:	494d      	ldr	r1, [pc, #308]	@ (8007854 <lfs_fs_deorphan+0x3ac>)
 800771e:	4856      	ldr	r0, [pc, #344]	@ (8007878 <lfs_fs_deorphan+0x3d0>)
 8007720:	4a4e      	ldr	r2, [pc, #312]	@ (800785c <lfs_fs_deorphan+0x3b4>)
 8007722:	9201      	str	r2, [sp, #4]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	0023      	movs	r3, r4
 8007728:	002a      	movs	r2, r5
 800772a:	f003 f801 	bl	800a730 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3348      	adds	r3, #72	@ 0x48
 8007732:	001a      	movs	r2, r3
 8007734:	2328      	movs	r3, #40	@ 0x28
 8007736:	18f9      	adds	r1, r7, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	0018      	movs	r0, r3
 800773c:	f7fb fb48 	bl	8002dd0 <lfs_dir_getgstate>
 8007740:	0003      	movs	r3, r0
 8007742:	22ac      	movs	r2, #172	@ 0xac
 8007744:	18b9      	adds	r1, r7, r2
 8007746:	600b      	str	r3, [r1, #0]
                    if (err) {
 8007748:	18bb      	adds	r3, r7, r2
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <lfs_fs_deorphan+0x2ae>
                        return err;
 8007750:	18bb      	adds	r3, r7, r2
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	e038      	b.n	80077c8 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8007756:	2428      	movs	r4, #40	@ 0x28
 8007758:	193b      	adds	r3, r7, r4
 800775a:	3318      	adds	r3, #24
 800775c:	0018      	movs	r0, r3
 800775e:	f7f9 fc0b 	bl	8000f78 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8007762:	0021      	movs	r1, r4
 8007764:	187b      	adds	r3, r7, r1
 8007766:	7ddb      	ldrb	r3, [r3, #23]
 8007768:	22c0      	movs	r2, #192	@ 0xc0
 800776a:	00d2      	lsls	r2, r2, #3
 800776c:	4694      	mov	ip, r2
 800776e:	4463      	add	r3, ip
 8007770:	051b      	lsls	r3, r3, #20
 8007772:	4a42      	ldr	r2, [pc, #264]	@ (800787c <lfs_fs_deorphan+0x3d4>)
 8007774:	431a      	orrs	r2, r3
 8007776:	2070      	movs	r0, #112	@ 0x70
 8007778:	183b      	adds	r3, r7, r0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	183b      	adds	r3, r7, r0
 800777e:	000c      	movs	r4, r1
 8007780:	187a      	adds	r2, r7, r1
 8007782:	3218      	adds	r2, #24
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	183a      	adds	r2, r7, r0
 8007788:	2308      	movs	r3, #8
 800778a:	18f9      	adds	r1, r7, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	2301      	movs	r3, #1
 8007790:	f7fc fe86 	bl	80044a0 <lfs_dir_orphaningcommit>
 8007794:	0003      	movs	r3, r0
 8007796:	25a0      	movs	r5, #160	@ 0xa0
 8007798:	197a      	adds	r2, r7, r5
 800779a:	6013      	str	r3, [r2, #0]
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800779c:	193b      	adds	r3, r7, r4
 800779e:	3318      	adds	r3, #24
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7f9 fbcf 	bl	8000f44 <lfs_pair_fromle32>
                    if (state < 0) {
 80077a6:	197b      	adds	r3, r7, r5
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	da02      	bge.n	80077b4 <lfs_fs_deorphan+0x30c>
                        return state;
 80077ae:	197b      	adds	r3, r7, r5
 80077b0:	681b      	ldr	r3, [r3, #0]
                    return tag;
 80077b2:	e047      	b.n	8007844 <lfs_fs_deorphan+0x39c>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 80077b4:	23a0      	movs	r3, #160	@ 0xa0
 80077b6:	18fb      	adds	r3, r7, r3
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d110      	bne.n	80077e0 <lfs_fs_deorphan+0x338>
                        moreorphans = true;
 80077be:	23b3      	movs	r3, #179	@ 0xb3
 80077c0:	18fb      	adds	r3, r7, r3
 80077c2:	2201      	movs	r2, #1
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	e00c      	b.n	80077e2 <lfs_fs_deorphan+0x33a>
                return err;
 80077c8:	e03c      	b.n	8007844 <lfs_fs_deorphan+0x39c>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 80077ca:	2308      	movs	r3, #8
 80077cc:	18fa      	adds	r2, r7, r3
 80077ce:	2328      	movs	r3, #40	@ 0x28
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	0010      	movs	r0, r2
 80077d4:	0019      	movs	r1, r3
 80077d6:	2320      	movs	r3, #32
 80077d8:	001a      	movs	r2, r3
 80077da:	f003 f8ca 	bl	800a972 <memcpy>
 80077de:	e000      	b.n	80077e2 <lfs_fs_deorphan+0x33a>
                    continue;
 80077e0:	46c0      	nop			@ (mov r8, r8)
        while (!lfs_pair_isnull(pdir.tail)) {
 80077e2:	2308      	movs	r3, #8
 80077e4:	18fb      	adds	r3, r7, r3
 80077e6:	3318      	adds	r3, #24
 80077e8:	0018      	movs	r0, r3
 80077ea:	f7f9 fb3f 	bl	8000e6c <lfs_pair_isnull>
 80077ee:	0003      	movs	r3, r0
 80077f0:	001a      	movs	r2, r3
 80077f2:	2301      	movs	r3, #1
 80077f4:	4053      	eors	r3, r2
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d000      	beq.n	80077fe <lfs_fs_deorphan+0x356>
 80077fc:	e682      	b.n	8007504 <lfs_fs_deorphan+0x5c>
        }

        pass = moreorphans ? 0 : pass+1;
 80077fe:	23b3      	movs	r3, #179	@ 0xb3
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <lfs_fs_deorphan+0x364>
 8007808:	2300      	movs	r3, #0
 800780a:	e003      	b.n	8007814 <lfs_fs_deorphan+0x36c>
 800780c:	23b4      	movs	r3, #180	@ 0xb4
 800780e:	18fb      	adds	r3, r7, r3
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3301      	adds	r3, #1
 8007814:	22b4      	movs	r2, #180	@ 0xb4
 8007816:	18ba      	adds	r2, r7, r2
 8007818:	6013      	str	r3, [r2, #0]
    while (pass < 2) {
 800781a:	23b4      	movs	r3, #180	@ 0xb4
 800781c:	18fb      	adds	r3, r7, r3
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b01      	cmp	r3, #1
 8007822:	dc00      	bgt.n	8007826 <lfs_fs_deorphan+0x37e>
 8007824:	e65a      	b.n	80074dc <lfs_fs_deorphan+0x34>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3330      	adds	r3, #48	@ 0x30
 800782a:	0018      	movs	r0, r3
 800782c:	f7f9 fc96 	bl	800115c <lfs_gstate_getorphans>
 8007830:	0003      	movs	r3, r0
 8007832:	425b      	negs	r3, r3
 8007834:	b2db      	uxtb	r3, r3
 8007836:	b25a      	sxtb	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	0011      	movs	r1, r2
 800783c:	0018      	movs	r0, r3
 800783e:	f7ff fc99 	bl	8007174 <lfs_fs_preporphans>
 8007842:	0003      	movs	r3, r0
}
 8007844:	0018      	movs	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	b02f      	add	sp, #188	@ 0xbc
 800784a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800784c:	7ffffc00 	.word	0x7ffffc00
 8007850:	000013a9 	.word	0x000013a9
 8007854:	0800b478 	.word	0x0800b478
 8007858:	0800c09c 	.word	0x0800c09c
 800785c:	0800b588 	.word	0x0800b588
 8007860:	000003ff 	.word	0x000003ff
 8007864:	000013b4 	.word	0x000013b4
 8007868:	0800c0e0 	.word	0x0800c0e0
 800786c:	4ff00000 	.word	0x4ff00000
 8007870:	600ffc08 	.word	0x600ffc08
 8007874:	000013d4 	.word	0x000013d4
 8007878:	0800c128 	.word	0x0800c128
 800787c:	000ffc08 	.word	0x000ffc08

08007880 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	0018      	movs	r0, r3
 800788c:	f7ff fd08 	bl	80072a0 <lfs_fs_desuperblock>
 8007890:	0003      	movs	r3, r0
 8007892:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <lfs_fs_forceconsistency+0x1e>
        return err;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	e017      	b.n	80078ce <lfs_fs_forceconsistency+0x4e>
    }

    err = lfs_fs_demove(lfs);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f7ff fd79 	bl	8007398 <lfs_fs_demove>
 80078a6:	0003      	movs	r3, r0
 80078a8:	60fb      	str	r3, [r7, #12]
    if (err) {
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <lfs_fs_forceconsistency+0x34>
        return err;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	e00c      	b.n	80078ce <lfs_fs_forceconsistency+0x4e>
    }

    err = lfs_fs_deorphan(lfs, true);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2101      	movs	r1, #1
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7ff fdf5 	bl	80074a8 <lfs_fs_deorphan>
 80078be:	0003      	movs	r3, r0
 80078c0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <lfs_fs_forceconsistency+0x4c>
        return err;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	e000      	b.n	80078ce <lfs_fs_forceconsistency+0x4e>
    }

    return 0;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	0018      	movs	r0, r3
 80078d0:	46bd      	mov	sp, r7
 80078d2:	b004      	add	sp, #16
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	601a      	str	r2, [r3, #0]
    return 0;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	0018      	movs	r0, r3
 80078f2:	46bd      	mov	sp, r7
 80078f4:	b004      	add	sp, #16
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8007904:	2308      	movs	r3, #8
 8007906:	18fa      	adds	r2, r7, r3
 8007908:	4908      	ldr	r1, [pc, #32]	@ (800792c <lfs_fs_size_+0x34>)
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	2300      	movs	r3, #0
 800790e:	f7ff f9d3 	bl	8006cb8 <lfs_fs_traverse_>
 8007912:	0003      	movs	r3, r0
 8007914:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <lfs_fs_size_+0x28>
        return err;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	e000      	b.n	8007922 <lfs_fs_size_+0x2a>
    }

    return size;
 8007920:	68bb      	ldr	r3, [r7, #8]
}
 8007922:	0018      	movs	r0, r3
 8007924:	46bd      	mov	sp, r7
 8007926:	b004      	add	sp, #16
 8007928:	bd80      	pop	{r7, pc}
 800792a:	46c0      	nop			@ (mov r8, r8)
 800792c:	080078d7 	.word	0x080078d7

08007930 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <lfs_format+0x18>
        return err;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	e008      	b.n	800795a <lfs_format+0x2a>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	0011      	movs	r1, r2
 800794e:	0018      	movs	r0, r3
 8007950:	f7fe fe4a 	bl	80065e8 <lfs_format_>
 8007954:	0003      	movs	r3, r0
 8007956:	60fb      	str	r3, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007958:	68fb      	ldr	r3, [r7, #12]
}
 800795a:	0018      	movs	r0, r3
 800795c:	46bd      	mov	sp, r7
 800795e:	b004      	add	sp, #16
 8007960:	bd80      	pop	{r7, pc}

08007962 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <lfs_mount+0x18>
        return err;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	e008      	b.n	800798c <lfs_mount+0x2a>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	0011      	movs	r1, r2
 8007980:	0018      	movs	r0, r3
 8007982:	f7fe ff37 	bl	80067f4 <lfs_mount_>
 8007986:	0003      	movs	r3, r0
 8007988:	60fb      	str	r3, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800798a:	68fb      	ldr	r3, [r7, #12]
}
 800798c:	0018      	movs	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	b004      	add	sp, #16
 8007992:	bd80      	pop	{r7, pc}

08007994 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]
    if (err) {
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <lfs_unmount+0x16>
        return err;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	e006      	b.n	80079b8 <lfs_unmount+0x24>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_unmount_(lfs);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	0018      	movs	r0, r3
 80079ae:	f7ff f975 	bl	8006c9c <lfs_unmount_>
 80079b2:	0003      	movs	r3, r0
 80079b4:	60fb      	str	r3, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80079b6:	68fb      	ldr	r3, [r7, #12]
}
 80079b8:	0018      	movs	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	b004      	add	sp, #16
 80079be:	bd80      	pop	{r7, pc}

080079c0 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]
    if (err) {
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <lfs_file_open+0x1c>
        return err;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	e01c      	b.n	8007a16 <lfs_file_open+0x56>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, (unsigned)flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	0011      	movs	r1, r2
 80079e4:	0018      	movs	r0, r3
 80079e6:	f7f9 fd1b 	bl	8001420 <lfs_mlist_isopen>
 80079ea:	0003      	movs	r3, r0
 80079ec:	001a      	movs	r2, r3
 80079ee:	2301      	movs	r3, #1
 80079f0:	4053      	eors	r3, r2
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d105      	bne.n	8007a04 <lfs_file_open+0x44>
 80079f8:	4b09      	ldr	r3, [pc, #36]	@ (8007a20 <lfs_file_open+0x60>)
 80079fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007a24 <lfs_file_open+0x64>)
 80079fc:	490a      	ldr	r1, [pc, #40]	@ (8007a28 <lfs_file_open+0x68>)
 80079fe:	480b      	ldr	r0, [pc, #44]	@ (8007a2c <lfs_file_open+0x6c>)
 8007a00:	f002 fcde 	bl	800a3c0 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f7fd fd0e 	bl	800542c <lfs_file_open_>
 8007a10:	0003      	movs	r3, r0
 8007a12:	617b      	str	r3, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007a14:	697b      	ldr	r3, [r7, #20]
}
 8007a16:	0018      	movs	r0, r3
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	b006      	add	sp, #24
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	46c0      	nop			@ (mov r8, r8)
 8007a20:	0800c178 	.word	0x0800c178
 8007a24:	0800c3bc 	.word	0x0800c3bc
 8007a28:	000017e5 	.word	0x000017e5
 8007a2c:	0800b478 	.word	0x0800b478

08007a30 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <lfs_file_close+0x18>
        return err;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	e017      	b.n	8007a78 <lfs_file_close+0x48>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	0011      	movs	r1, r2
 8007a50:	0018      	movs	r0, r3
 8007a52:	f7f9 fce5 	bl	8001420 <lfs_mlist_isopen>
 8007a56:	1e03      	subs	r3, r0, #0
 8007a58:	d105      	bne.n	8007a66 <lfs_file_close+0x36>
 8007a5a:	4b09      	ldr	r3, [pc, #36]	@ (8007a80 <lfs_file_close+0x50>)
 8007a5c:	4a09      	ldr	r2, [pc, #36]	@ (8007a84 <lfs_file_close+0x54>)
 8007a5e:	490a      	ldr	r1, [pc, #40]	@ (8007a88 <lfs_file_close+0x58>)
 8007a60:	480a      	ldr	r0, [pc, #40]	@ (8007a8c <lfs_file_close+0x5c>)
 8007a62:	f002 fcad 	bl	800a3c0 <__assert_func>

    err = lfs_file_close_(lfs, file);
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	0011      	movs	r1, r2
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	f7fd fcf7 	bl	8005460 <lfs_file_close_>
 8007a72:	0003      	movs	r3, r0
 8007a74:	60fb      	str	r3, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007a76:	68fb      	ldr	r3, [r7, #12]
}
 8007a78:	0018      	movs	r0, r3
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	b004      	add	sp, #16
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	0800c1b0 	.word	0x0800c1b0
 8007a84:	0800c3cc 	.word	0x0800c3cc
 8007a88:	00001809 	.word	0x00001809
 8007a8c:	0800b478 	.word	0x0800b478

08007a90 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]
    if (err) {
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <lfs_file_read+0x1c>
        return err;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	e017      	b.n	8007adc <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	0011      	movs	r1, r2
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f7f9 fcb3 	bl	8001420 <lfs_mlist_isopen>
 8007aba:	1e03      	subs	r3, r0, #0
 8007abc:	d105      	bne.n	8007aca <lfs_file_read+0x3a>
 8007abe:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <lfs_file_read+0x54>)
 8007ac0:	4a09      	ldr	r2, [pc, #36]	@ (8007ae8 <lfs_file_read+0x58>)
 8007ac2:	490a      	ldr	r1, [pc, #40]	@ (8007aec <lfs_file_read+0x5c>)
 8007ac4:	480a      	ldr	r0, [pc, #40]	@ (8007af0 <lfs_file_read+0x60>)
 8007ac6:	f002 fc7b 	bl	800a3c0 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f7fe f873 	bl	8005bbc <lfs_file_read_>
 8007ad6:	0003      	movs	r3, r0
 8007ad8:	613b      	str	r3, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007ada:	693b      	ldr	r3, [r7, #16]
}
 8007adc:	0018      	movs	r0, r3
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	b006      	add	sp, #24
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	0800c1b0 	.word	0x0800c1b0
 8007ae8:	0800c3dc 	.word	0x0800c3dc
 8007aec:	0000182b 	.word	0x0000182b
 8007af0:	0800b478 	.word	0x0800b478

08007af4 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]
    if (err) {
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <lfs_file_write+0x1c>
        return err;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	e017      	b.n	8007b40 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	0011      	movs	r1, r2
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f7f9 fc81 	bl	8001420 <lfs_mlist_isopen>
 8007b1e:	1e03      	subs	r3, r0, #0
 8007b20:	d105      	bne.n	8007b2e <lfs_file_write+0x3a>
 8007b22:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <lfs_file_write+0x54>)
 8007b24:	4a09      	ldr	r2, [pc, #36]	@ (8007b4c <lfs_file_write+0x58>)
 8007b26:	490a      	ldr	r1, [pc, #40]	@ (8007b50 <lfs_file_write+0x5c>)
 8007b28:	480a      	ldr	r0, [pc, #40]	@ (8007b54 <lfs_file_write+0x60>)
 8007b2a:	f002 fc49 	bl	800a3c0 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7fe f99f 	bl	8005e78 <lfs_file_write_>
 8007b3a:	0003      	movs	r3, r0
 8007b3c:	613b      	str	r3, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007b3e:	693b      	ldr	r3, [r7, #16]
}
 8007b40:	0018      	movs	r0, r3
 8007b42:	46bd      	mov	sp, r7
 8007b44:	b006      	add	sp, #24
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	0800c1b0 	.word	0x0800c1b0
 8007b4c:	0800c3ec 	.word	0x0800c3ec
 8007b50:	0000183d 	.word	0x0000183d
 8007b54:	0800b478 	.word	0x0800b478

08007b58 <user_lfs_read>:
#define FLASH_PAGE_SIZE  2048U

extern lfs_t lfs;
extern struct lfs_config cfg;

int user_lfs_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
    uint32_t address = LFS_BASE_ADDR + block * c->block_size + off;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	435a      	muls	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	18d3      	adds	r3, r2, r3
 8007b72:	4a07      	ldr	r2, [pc, #28]	@ (8007b90 <user_lfs_read+0x38>)
 8007b74:	4694      	mov	ip, r2
 8007b76:	4463      	add	r3, ip
 8007b78:	617b      	str	r3, [r7, #20]
    memcpy(buffer, (const void *)address, size);
 8007b7a:	6979      	ldr	r1, [r7, #20]
 8007b7c:	6a3a      	ldr	r2, [r7, #32]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	0018      	movs	r0, r3
 8007b82:	f002 fef6 	bl	800a972 <memcpy>
    return 0;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	0018      	movs	r0, r3
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	b006      	add	sp, #24
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	0801c000 	.word	0x0801c000

08007b94 <user_lfs_prog>:

int user_lfs_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8007ba2:	f000 fd2b 	bl	80085fc <HAL_FLASH_Unlock>
    uint32_t address = LFS_BASE_ADDR + block * c->block_size + off;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	435a      	muls	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	18d3      	adds	r3, r2, r3
 8007bb2:	4a15      	ldr	r2, [pc, #84]	@ (8007c08 <user_lfs_prog+0x74>)
 8007bb4:	4694      	mov	ip, r2
 8007bb6:	4463      	add	r3, ip
 8007bb8:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = 0; i < size; i += 8) {
 8007bba:	2300      	movs	r3, #0
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	e018      	b.n	8007bf2 <user_lfs_prog+0x5e>
        uint64_t data64 = *(uint64_t *)((uint8_t *)buffer + i);
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	18d3      	adds	r3, r2, r3
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	613a      	str	r2, [r7, #16]
 8007bcc:	617b      	str	r3, [r7, #20]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data64) != HAL_OK) {
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	18d1      	adds	r1, r2, r3
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2001      	movs	r0, #1
 8007bda:	f000 fcc1 	bl	8008560 <HAL_FLASH_Program>
 8007bde:	1e03      	subs	r3, r0, #0
 8007be0:	d004      	beq.n	8007bec <user_lfs_prog+0x58>
            HAL_FLASH_Lock();
 8007be2:	f000 fd2f 	bl	8008644 <HAL_FLASH_Lock>
            return -1;
 8007be6:	2301      	movs	r3, #1
 8007be8:	425b      	negs	r3, r3
 8007bea:	e009      	b.n	8007c00 <user_lfs_prog+0x6c>
    for (uint32_t i = 0; i < size; i += 8) {
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	3308      	adds	r3, #8
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d3e2      	bcc.n	8007bc0 <user_lfs_prog+0x2c>
        }
    }
    HAL_FLASH_Lock();
 8007bfa:	f000 fd23 	bl	8008644 <HAL_FLASH_Lock>
    return 0;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	0018      	movs	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b008      	add	sp, #32
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	0801c000 	.word	0x0801c000

08007c0c <user_lfs_erase>:

int user_lfs_erase(const struct lfs_config *c, lfs_block_t block) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 8007c16:	f000 fcf1 	bl	80085fc <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef erase;
    uint32_t page_error = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8007c1e:	2110      	movs	r1, #16
 8007c20:	187b      	adds	r3, r7, r1
 8007c22:	2202      	movs	r2, #2
 8007c24:	601a      	str	r2, [r3, #0]
    erase.Page = (LFS_BASE_ADDR + block * c->block_size - FLASH_BASE) / FLASH_PAGE_SIZE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	4353      	muls	r3, r2
 8007c2e:	22e0      	movs	r2, #224	@ 0xe0
 8007c30:	0252      	lsls	r2, r2, #9
 8007c32:	4694      	mov	ip, r2
 8007c34:	4463      	add	r3, ip
 8007c36:	0ada      	lsrs	r2, r3, #11
 8007c38:	187b      	adds	r3, r7, r1
 8007c3a:	609a      	str	r2, [r3, #8]
    erase.NbPages = 1;
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	2201      	movs	r2, #1
 8007c40:	60da      	str	r2, [r3, #12]
    if (HAL_FLASHEx_Erase(&erase, &page_error) != HAL_OK) {
 8007c42:	230c      	movs	r3, #12
 8007c44:	18fa      	adds	r2, r7, r3
 8007c46:	187b      	adds	r3, r7, r1
 8007c48:	0011      	movs	r1, r2
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	f000 fd8a 	bl	8008764 <HAL_FLASHEx_Erase>
 8007c50:	1e03      	subs	r3, r0, #0
 8007c52:	d004      	beq.n	8007c5e <user_lfs_erase+0x52>
        HAL_FLASH_Lock();
 8007c54:	f000 fcf6 	bl	8008644 <HAL_FLASH_Lock>
        return -1;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	425b      	negs	r3, r3
 8007c5c:	e002      	b.n	8007c64 <user_lfs_erase+0x58>
    }
    HAL_FLASH_Lock();
 8007c5e:	f000 fcf1 	bl	8008644 <HAL_FLASH_Lock>
    return 0;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b008      	add	sp, #32
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <user_lfs_sync>:

int user_lfs_sync(const struct lfs_config *c) {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
    return 0;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	0018      	movs	r0, r3
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	b002      	add	sp, #8
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8007c90:	2300      	movs	r3, #0
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	e024      	b.n	8007ce0 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	091a      	lsrs	r2, r3, #4
 8007c9a:	6939      	ldr	r1, [r7, #16]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	18cb      	adds	r3, r1, r3
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	0019      	movs	r1, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	404b      	eors	r3, r1
 8007ca8:	210f      	movs	r1, #15
 8007caa:	4019      	ands	r1, r3
 8007cac:	4b11      	ldr	r3, [pc, #68]	@ (8007cf4 <lfs_crc+0x74>)
 8007cae:	0089      	lsls	r1, r1, #2
 8007cb0:	58cb      	ldr	r3, [r1, r3]
 8007cb2:	4053      	eors	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	091a      	lsrs	r2, r3, #4
 8007cba:	6939      	ldr	r1, [r7, #16]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	18cb      	adds	r3, r1, r3
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	0019      	movs	r1, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	404b      	eors	r3, r1
 8007ccc:	210f      	movs	r1, #15
 8007cce:	4019      	ands	r1, r3
 8007cd0:	4b08      	ldr	r3, [pc, #32]	@ (8007cf4 <lfs_crc+0x74>)
 8007cd2:	0089      	lsls	r1, r1, #2
 8007cd4:	58cb      	ldr	r3, [r1, r3]
 8007cd6:	4053      	eors	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	617b      	str	r3, [r7, #20]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d3d6      	bcc.n	8007c96 <lfs_crc+0x16>
    }

    return crc;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
}
 8007cea:	0018      	movs	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	b006      	add	sp, #24
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	46c0      	nop			@ (mov r8, r8)
 8007cf4:	0800c3fc 	.word	0x0800c3fc

08007cf8 <uart_print>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void uart_print(const char *msg) {
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	0018      	movs	r0, r3
 8007d04:	f7f8 f9fc 	bl	8000100 <strlen>
 8007d08:	0003      	movs	r3, r0
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	425b      	negs	r3, r3
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	4803      	ldr	r0, [pc, #12]	@ (8007d20 <uart_print+0x28>)
 8007d14:	f001 fdbe 	bl	8009894 <HAL_UART_Transmit>
}
 8007d18:	46c0      	nop			@ (mov r8, r8)
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b002      	add	sp, #8
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	200001e0 	.word	0x200001e0

08007d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d24:	b5b0      	push	{r4, r5, r7, lr}
 8007d26:	b0a8      	sub	sp, #160	@ 0xa0
 8007d28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d2a:	f000 fadf 	bl	80082ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d2e:	f000 f89f 	bl	8007e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d32:	f000 f933 	bl	8007f9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8007d36:	f000 f8e3 	bl	8007f00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_print("Mounting LittleFS...\r\n");
 8007d3a:	4b43      	ldr	r3, [pc, #268]	@ (8007e48 <main+0x124>)
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f7ff ffdb 	bl	8007cf8 <uart_print>

  int err = lfs_mount(&lfs, &cfg);
 8007d42:	4a42      	ldr	r2, [pc, #264]	@ (8007e4c <main+0x128>)
 8007d44:	4b42      	ldr	r3, [pc, #264]	@ (8007e50 <main+0x12c>)
 8007d46:	0011      	movs	r1, r2
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f7ff fe0a 	bl	8007962 <lfs_mount>
 8007d4e:	0003      	movs	r3, r0
 8007d50:	229c      	movs	r2, #156	@ 0x9c
 8007d52:	18b9      	adds	r1, r7, r2
 8007d54:	600b      	str	r3, [r1, #0]
  if (err) {
 8007d56:	18bb      	adds	r3, r7, r2
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00f      	beq.n	8007d7e <main+0x5a>
      uart_print("Formatting flash...\r\n");
 8007d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8007e54 <main+0x130>)
 8007d60:	0018      	movs	r0, r3
 8007d62:	f7ff ffc9 	bl	8007cf8 <uart_print>
      lfs_format(&lfs, &cfg);
 8007d66:	4a39      	ldr	r2, [pc, #228]	@ (8007e4c <main+0x128>)
 8007d68:	4b39      	ldr	r3, [pc, #228]	@ (8007e50 <main+0x12c>)
 8007d6a:	0011      	movs	r1, r2
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	f7ff fddf 	bl	8007930 <lfs_format>
      lfs_mount(&lfs, &cfg);
 8007d72:	4a36      	ldr	r2, [pc, #216]	@ (8007e4c <main+0x128>)
 8007d74:	4b36      	ldr	r3, [pc, #216]	@ (8007e50 <main+0x12c>)
 8007d76:	0011      	movs	r1, r2
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f7ff fdf2 	bl	8007962 <lfs_mount>
  }

  lfs_file_t file;
  if (lfs_file_open(&lfs, &file, "hello.txt", LFS_O_RDWR | LFS_O_CREAT) == 0) {
 8007d7e:	2304      	movs	r3, #4
 8007d80:	33ff      	adds	r3, #255	@ 0xff
 8007d82:	4a35      	ldr	r2, [pc, #212]	@ (8007e58 <main+0x134>)
 8007d84:	2440      	movs	r4, #64	@ 0x40
 8007d86:	1939      	adds	r1, r7, r4
 8007d88:	4831      	ldr	r0, [pc, #196]	@ (8007e50 <main+0x12c>)
 8007d8a:	f7ff fe19 	bl	80079c0 <lfs_file_open>
 8007d8e:	1e03      	subs	r3, r0, #0
 8007d90:	d119      	bne.n	8007dc6 <main+0xa2>
      const char *text = "HELLO, World\r\n";
 8007d92:	4b32      	ldr	r3, [pc, #200]	@ (8007e5c <main+0x138>)
 8007d94:	2598      	movs	r5, #152	@ 0x98
 8007d96:	197a      	adds	r2, r7, r5
 8007d98:	6013      	str	r3, [r2, #0]
      lfs_file_write(&lfs, &file, text, strlen(text));
 8007d9a:	197b      	adds	r3, r7, r5
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	0018      	movs	r0, r3
 8007da0:	f7f8 f9ae 	bl	8000100 <strlen>
 8007da4:	0003      	movs	r3, r0
 8007da6:	197a      	adds	r2, r7, r5
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	1939      	adds	r1, r7, r4
 8007dac:	4828      	ldr	r0, [pc, #160]	@ (8007e50 <main+0x12c>)
 8007dae:	f7ff fea1 	bl	8007af4 <lfs_file_write>
      lfs_file_close(&lfs, &file);
 8007db2:	193a      	adds	r2, r7, r4
 8007db4:	4b26      	ldr	r3, [pc, #152]	@ (8007e50 <main+0x12c>)
 8007db6:	0011      	movs	r1, r2
 8007db8:	0018      	movs	r0, r3
 8007dba:	f7ff fe39 	bl	8007a30 <lfs_file_close>
      uart_print("File created and written!\r\n");
 8007dbe:	4b28      	ldr	r3, [pc, #160]	@ (8007e60 <main+0x13c>)
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	f7ff ff99 	bl	8007cf8 <uart_print>
  }
  char buffer[64];
   memset(buffer, 0, sizeof(buffer));  // Clear buffer (optional but safe)
 8007dc6:	003b      	movs	r3, r7
 8007dc8:	2240      	movs	r2, #64	@ 0x40
 8007dca:	2100      	movs	r1, #0
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f002 fd19 	bl	800a804 <memset>
   if (lfs_file_open(&lfs, &file, "hello.txt", LFS_O_RDONLY) == 0) {
 8007dd2:	4a21      	ldr	r2, [pc, #132]	@ (8007e58 <main+0x134>)
 8007dd4:	2440      	movs	r4, #64	@ 0x40
 8007dd6:	1939      	adds	r1, r7, r4
 8007dd8:	481d      	ldr	r0, [pc, #116]	@ (8007e50 <main+0x12c>)
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f7ff fdf0 	bl	80079c0 <lfs_file_open>
 8007de0:	1e03      	subs	r3, r0, #0
 8007de2:	d126      	bne.n	8007e32 <main+0x10e>
       int size = lfs_file_read(&lfs, &file, buffer, sizeof(buffer) - 1); // returns bytes read
 8007de4:	003a      	movs	r2, r7
 8007de6:	1939      	adds	r1, r7, r4
 8007de8:	4819      	ldr	r0, [pc, #100]	@ (8007e50 <main+0x12c>)
 8007dea:	233f      	movs	r3, #63	@ 0x3f
 8007dec:	f7ff fe50 	bl	8007a90 <lfs_file_read>
 8007df0:	0003      	movs	r3, r0
 8007df2:	2194      	movs	r1, #148	@ 0x94
 8007df4:	187a      	adds	r2, r7, r1
 8007df6:	6013      	str	r3, [r2, #0]
       if (size > 0) {
 8007df8:	187b      	adds	r3, r7, r1
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dd11      	ble.n	8007e24 <main+0x100>
           buffer[size] = '\0'; // Null-terminate right after actual data
 8007e00:	003a      	movs	r2, r7
 8007e02:	187b      	adds	r3, r7, r1
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	18d3      	adds	r3, r2, r3
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
           uart_print("Read from file: ");
 8007e0c:	4b15      	ldr	r3, [pc, #84]	@ (8007e64 <main+0x140>)
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f7ff ff72 	bl	8007cf8 <uart_print>
           uart_print(buffer);
 8007e14:	003b      	movs	r3, r7
 8007e16:	0018      	movs	r0, r3
 8007e18:	f7ff ff6e 	bl	8007cf8 <uart_print>
           uart_print("\r\n");
 8007e1c:	4b12      	ldr	r3, [pc, #72]	@ (8007e68 <main+0x144>)
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f7ff ff6a 	bl	8007cf8 <uart_print>
       }
       lfs_file_close(&lfs, &file);
 8007e24:	2340      	movs	r3, #64	@ 0x40
 8007e26:	18fa      	adds	r2, r7, r3
 8007e28:	4b09      	ldr	r3, [pc, #36]	@ (8007e50 <main+0x12c>)
 8007e2a:	0011      	movs	r1, r2
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	f7ff fdff 	bl	8007a30 <lfs_file_close>
   }
  lfs_unmount(&lfs);
 8007e32:	4b07      	ldr	r3, [pc, #28]	@ (8007e50 <main+0x12c>)
 8007e34:	0018      	movs	r0, r3
 8007e36:	f7ff fdad 	bl	8007994 <lfs_unmount>
  uart_print("Unmounted filesystem.\r\n");
 8007e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e6c <main+0x148>)
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f7ff ff5b 	bl	8007cf8 <uart_print>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007e42:	46c0      	nop			@ (mov r8, r8)
 8007e44:	e7fd      	b.n	8007e42 <main+0x11e>
 8007e46:	46c0      	nop			@ (mov r8, r8)
 8007e48:	0800c220 	.word	0x0800c220
 8007e4c:	20000000 	.word	0x20000000
 8007e50:	20000160 	.word	0x20000160
 8007e54:	0800c238 	.word	0x0800c238
 8007e58:	0800c250 	.word	0x0800c250
 8007e5c:	0800c25c 	.word	0x0800c25c
 8007e60:	0800c26c 	.word	0x0800c26c
 8007e64:	0800c288 	.word	0x0800c288
 8007e68:	0800c29c 	.word	0x0800c29c
 8007e6c:	0800c2a0 	.word	0x0800c2a0

08007e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e70:	b590      	push	{r4, r7, lr}
 8007e72:	b093      	sub	sp, #76	@ 0x4c
 8007e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e76:	2414      	movs	r4, #20
 8007e78:	193b      	adds	r3, r7, r4
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	2334      	movs	r3, #52	@ 0x34
 8007e7e:	001a      	movs	r2, r3
 8007e80:	2100      	movs	r1, #0
 8007e82:	f002 fcbf 	bl	800a804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e86:	1d3b      	adds	r3, r7, #4
 8007e88:	0018      	movs	r0, r3
 8007e8a:	2310      	movs	r3, #16
 8007e8c:	001a      	movs	r2, r3
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f002 fcb8 	bl	800a804 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e94:	2380      	movs	r3, #128	@ 0x80
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	0018      	movs	r0, r3
 8007e9a:	f000 fe6b 	bl	8008b74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007e9e:	193b      	adds	r3, r7, r4
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007ea4:	193b      	adds	r3, r7, r4
 8007ea6:	2280      	movs	r2, #128	@ 0x80
 8007ea8:	0052      	lsls	r2, r2, #1
 8007eaa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8007eac:	193b      	adds	r3, r7, r4
 8007eae:	2200      	movs	r2, #0
 8007eb0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007eb2:	193b      	adds	r3, r7, r4
 8007eb4:	2240      	movs	r2, #64	@ 0x40
 8007eb6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007eb8:	193b      	adds	r3, r7, r4
 8007eba:	2200      	movs	r2, #0
 8007ebc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ebe:	193b      	adds	r3, r7, r4
 8007ec0:	0018      	movs	r0, r3
 8007ec2:	f000 fea3 	bl	8008c0c <HAL_RCC_OscConfig>
 8007ec6:	1e03      	subs	r3, r0, #0
 8007ec8:	d001      	beq.n	8007ece <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8007eca:	f000 f87d 	bl	8007fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	2207      	movs	r2, #7
 8007ed2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007ed4:	1d3b      	adds	r3, r7, #4
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007eda:	1d3b      	adds	r3, r7, #4
 8007edc:	2200      	movs	r2, #0
 8007ede:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007ee0:	1d3b      	adds	r3, r7, #4
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007ee6:	1d3b      	adds	r3, r7, #4
 8007ee8:	2100      	movs	r1, #0
 8007eea:	0018      	movs	r0, r3
 8007eec:	f001 f99e 	bl	800922c <HAL_RCC_ClockConfig>
 8007ef0:	1e03      	subs	r3, r0, #0
 8007ef2:	d001      	beq.n	8007ef8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007ef4:	f000 f868 	bl	8007fc8 <Error_Handler>
  }
}
 8007ef8:	46c0      	nop			@ (mov r8, r8)
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b013      	add	sp, #76	@ 0x4c
 8007efe:	bd90      	pop	{r4, r7, pc}

08007f00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007f04:	4b23      	ldr	r3, [pc, #140]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f06:	4a24      	ldr	r2, [pc, #144]	@ (8007f98 <MX_USART2_UART_Init+0x98>)
 8007f08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007f0a:	4b22      	ldr	r3, [pc, #136]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f0c:	22e1      	movs	r2, #225	@ 0xe1
 8007f0e:	0252      	lsls	r2, r2, #9
 8007f10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007f12:	4b20      	ldr	r3, [pc, #128]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007f18:	4b1e      	ldr	r3, [pc, #120]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007f24:	4b1b      	ldr	r3, [pc, #108]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f26:	220c      	movs	r2, #12
 8007f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f30:	4b18      	ldr	r3, [pc, #96]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f36:	4b17      	ldr	r3, [pc, #92]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007f3c:	4b15      	ldr	r3, [pc, #84]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f42:	4b14      	ldr	r3, [pc, #80]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007f48:	4b12      	ldr	r3, [pc, #72]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	f001 fc4c 	bl	80097e8 <HAL_UART_Init>
 8007f50:	1e03      	subs	r3, r0, #0
 8007f52:	d001      	beq.n	8007f58 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8007f54:	f000 f838 	bl	8007fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f58:	4b0e      	ldr	r3, [pc, #56]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f002 f94f 	bl	800a200 <HAL_UARTEx_SetTxFifoThreshold>
 8007f62:	1e03      	subs	r3, r0, #0
 8007f64:	d001      	beq.n	8007f6a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8007f66:	f000 f82f 	bl	8007fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f002 f986 	bl	800a280 <HAL_UARTEx_SetRxFifoThreshold>
 8007f74:	1e03      	subs	r3, r0, #0
 8007f76:	d001      	beq.n	8007f7c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8007f78:	f000 f826 	bl	8007fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007f7c:	4b05      	ldr	r3, [pc, #20]	@ (8007f94 <MX_USART2_UART_Init+0x94>)
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f002 f904 	bl	800a18c <HAL_UARTEx_DisableFifoMode>
 8007f84:	1e03      	subs	r3, r0, #0
 8007f86:	d001      	beq.n	8007f8c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8007f88:	f000 f81e 	bl	8007fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007f8c:	46c0      	nop			@ (mov r8, r8)
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	46c0      	nop			@ (mov r8, r8)
 8007f94:	200001e0 	.word	0x200001e0
 8007f98:	40004400 	.word	0x40004400

08007f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fa2:	4b08      	ldr	r3, [pc, #32]	@ (8007fc4 <MX_GPIO_Init+0x28>)
 8007fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fa6:	4b07      	ldr	r3, [pc, #28]	@ (8007fc4 <MX_GPIO_Init+0x28>)
 8007fa8:	2101      	movs	r1, #1
 8007faa:	430a      	orrs	r2, r1
 8007fac:	635a      	str	r2, [r3, #52]	@ 0x34
 8007fae:	4b05      	ldr	r3, [pc, #20]	@ (8007fc4 <MX_GPIO_Init+0x28>)
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	607b      	str	r3, [r7, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007fba:	46c0      	nop			@ (mov r8, r8)
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	b002      	add	sp, #8
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	46c0      	nop			@ (mov r8, r8)
 8007fc4:	40021000 	.word	0x40021000

08007fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007fcc:	b672      	cpsid	i
}
 8007fce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007fd0:	46c0      	nop			@ (mov r8, r8)
 8007fd2:	e7fd      	b.n	8007fd0 <Error_Handler+0x8>

08007fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fda:	4b0f      	ldr	r3, [pc, #60]	@ (8008018 <HAL_MspInit+0x44>)
 8007fdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fde:	4b0e      	ldr	r3, [pc, #56]	@ (8008018 <HAL_MspInit+0x44>)
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	641a      	str	r2, [r3, #64]	@ 0x40
 8007fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8008018 <HAL_MspInit+0x44>)
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fea:	2201      	movs	r2, #1
 8007fec:	4013      	ands	r3, r2
 8007fee:	607b      	str	r3, [r7, #4]
 8007ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ff2:	4b09      	ldr	r3, [pc, #36]	@ (8008018 <HAL_MspInit+0x44>)
 8007ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ff6:	4b08      	ldr	r3, [pc, #32]	@ (8008018 <HAL_MspInit+0x44>)
 8007ff8:	2180      	movs	r1, #128	@ 0x80
 8007ffa:	0549      	lsls	r1, r1, #21
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008000:	4b05      	ldr	r3, [pc, #20]	@ (8008018 <HAL_MspInit+0x44>)
 8008002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008004:	2380      	movs	r3, #128	@ 0x80
 8008006:	055b      	lsls	r3, r3, #21
 8008008:	4013      	ands	r3, r2
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800800e:	46c0      	nop			@ (mov r8, r8)
 8008010:	46bd      	mov	sp, r7
 8008012:	b002      	add	sp, #8
 8008014:	bd80      	pop	{r7, pc}
 8008016:	46c0      	nop			@ (mov r8, r8)
 8008018:	40021000 	.word	0x40021000

0800801c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800801c:	b590      	push	{r4, r7, lr}
 800801e:	b091      	sub	sp, #68	@ 0x44
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008024:	232c      	movs	r3, #44	@ 0x2c
 8008026:	18fb      	adds	r3, r7, r3
 8008028:	0018      	movs	r0, r3
 800802a:	2314      	movs	r3, #20
 800802c:	001a      	movs	r2, r3
 800802e:	2100      	movs	r1, #0
 8008030:	f002 fbe8 	bl	800a804 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008034:	2410      	movs	r4, #16
 8008036:	193b      	adds	r3, r7, r4
 8008038:	0018      	movs	r0, r3
 800803a:	231c      	movs	r3, #28
 800803c:	001a      	movs	r2, r3
 800803e:	2100      	movs	r1, #0
 8008040:	f002 fbe0 	bl	800a804 <memset>
  if(huart->Instance==USART2)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a22      	ldr	r2, [pc, #136]	@ (80080d4 <HAL_UART_MspInit+0xb8>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d13e      	bne.n	80080cc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800804e:	193b      	adds	r3, r7, r4
 8008050:	2202      	movs	r2, #2
 8008052:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008054:	193b      	adds	r3, r7, r4
 8008056:	2200      	movs	r2, #0
 8008058:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800805a:	193b      	adds	r3, r7, r4
 800805c:	0018      	movs	r0, r3
 800805e:	f001 fa8f 	bl	8009580 <HAL_RCCEx_PeriphCLKConfig>
 8008062:	1e03      	subs	r3, r0, #0
 8008064:	d001      	beq.n	800806a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008066:	f7ff ffaf 	bl	8007fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800806a:	4b1b      	ldr	r3, [pc, #108]	@ (80080d8 <HAL_UART_MspInit+0xbc>)
 800806c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800806e:	4b1a      	ldr	r3, [pc, #104]	@ (80080d8 <HAL_UART_MspInit+0xbc>)
 8008070:	2180      	movs	r1, #128	@ 0x80
 8008072:	0289      	lsls	r1, r1, #10
 8008074:	430a      	orrs	r2, r1
 8008076:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008078:	4b17      	ldr	r3, [pc, #92]	@ (80080d8 <HAL_UART_MspInit+0xbc>)
 800807a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800807c:	2380      	movs	r3, #128	@ 0x80
 800807e:	029b      	lsls	r3, r3, #10
 8008080:	4013      	ands	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008086:	4b14      	ldr	r3, [pc, #80]	@ (80080d8 <HAL_UART_MspInit+0xbc>)
 8008088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800808a:	4b13      	ldr	r3, [pc, #76]	@ (80080d8 <HAL_UART_MspInit+0xbc>)
 800808c:	2101      	movs	r1, #1
 800808e:	430a      	orrs	r2, r1
 8008090:	635a      	str	r2, [r3, #52]	@ 0x34
 8008092:	4b11      	ldr	r3, [pc, #68]	@ (80080d8 <HAL_UART_MspInit+0xbc>)
 8008094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008096:	2201      	movs	r2, #1
 8008098:	4013      	ands	r3, r2
 800809a:	60bb      	str	r3, [r7, #8]
 800809c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800809e:	212c      	movs	r1, #44	@ 0x2c
 80080a0:	187b      	adds	r3, r7, r1
 80080a2:	220c      	movs	r2, #12
 80080a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080a6:	187b      	adds	r3, r7, r1
 80080a8:	2202      	movs	r2, #2
 80080aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ac:	187b      	adds	r3, r7, r1
 80080ae:	2200      	movs	r2, #0
 80080b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080b2:	187b      	adds	r3, r7, r1
 80080b4:	2200      	movs	r2, #0
 80080b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	2201      	movs	r2, #1
 80080bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080be:	187a      	adds	r2, r7, r1
 80080c0:	23a0      	movs	r3, #160	@ 0xa0
 80080c2:	05db      	lsls	r3, r3, #23
 80080c4:	0011      	movs	r1, r2
 80080c6:	0018      	movs	r0, r3
 80080c8:	f000 fbf0 	bl	80088ac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80080cc:	46c0      	nop			@ (mov r8, r8)
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b011      	add	sp, #68	@ 0x44
 80080d2:	bd90      	pop	{r4, r7, pc}
 80080d4:	40004400 	.word	0x40004400
 80080d8:	40021000 	.word	0x40021000

080080dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80080e0:	46c0      	nop			@ (mov r8, r8)
 80080e2:	e7fd      	b.n	80080e0 <NMI_Handler+0x4>

080080e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080e8:	46c0      	nop			@ (mov r8, r8)
 80080ea:	e7fd      	b.n	80080e8 <HardFault_Handler+0x4>

080080ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80080f0:	46c0      	nop			@ (mov r8, r8)
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80080fa:	46c0      	nop			@ (mov r8, r8)
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008104:	f000 f95c 	bl	80083c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008108:	46c0      	nop			@ (mov r8, r8)
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	af00      	add	r7, sp, #0
  return 1;
 8008112:	2301      	movs	r3, #1
}
 8008114:	0018      	movs	r0, r3
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <_kill>:

int _kill(int pid, int sig)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008124:	f002 fbf8 	bl	800a918 <__errno>
 8008128:	0003      	movs	r3, r0
 800812a:	2216      	movs	r2, #22
 800812c:	601a      	str	r2, [r3, #0]
  return -1;
 800812e:	2301      	movs	r3, #1
 8008130:	425b      	negs	r3, r3
}
 8008132:	0018      	movs	r0, r3
 8008134:	46bd      	mov	sp, r7
 8008136:	b002      	add	sp, #8
 8008138:	bd80      	pop	{r7, pc}

0800813a <_exit>:

void _exit (int status)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008142:	2301      	movs	r3, #1
 8008144:	425a      	negs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	0011      	movs	r1, r2
 800814a:	0018      	movs	r0, r3
 800814c:	f7ff ffe5 	bl	800811a <_kill>
  while (1) {}    /* Make sure we hang here */
 8008150:	46c0      	nop			@ (mov r8, r8)
 8008152:	e7fd      	b.n	8008150 <_exit+0x16>

08008154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]
 8008164:	e00a      	b.n	800817c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008166:	e000      	b.n	800816a <_read+0x16>
 8008168:	bf00      	nop
 800816a:	0001      	movs	r1, r0
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	60ba      	str	r2, [r7, #8]
 8008172:	b2ca      	uxtb	r2, r1
 8008174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	3301      	adds	r3, #1
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	dbf0      	blt.n	8008166 <_read+0x12>
  }

  return len;
 8008184:	687b      	ldr	r3, [r7, #4]
}
 8008186:	0018      	movs	r0, r3
 8008188:	46bd      	mov	sp, r7
 800818a:	b006      	add	sp, #24
 800818c:	bd80      	pop	{r7, pc}

0800818e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b086      	sub	sp, #24
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800819a:	2300      	movs	r3, #0
 800819c:	617b      	str	r3, [r7, #20]
 800819e:	e009      	b.n	80081b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	60ba      	str	r2, [r7, #8]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	0018      	movs	r0, r3
 80081aa:	e000      	b.n	80081ae <_write+0x20>
 80081ac:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	3301      	adds	r3, #1
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	dbf1      	blt.n	80081a0 <_write+0x12>
  }
  return len;
 80081bc:	687b      	ldr	r3, [r7, #4]
}
 80081be:	0018      	movs	r0, r3
 80081c0:	46bd      	mov	sp, r7
 80081c2:	b006      	add	sp, #24
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <_close>:

int _close(int file)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80081ce:	2301      	movs	r3, #1
 80081d0:	425b      	negs	r3, r3
}
 80081d2:	0018      	movs	r0, r3
 80081d4:	46bd      	mov	sp, r7
 80081d6:	b002      	add	sp, #8
 80081d8:	bd80      	pop	{r7, pc}

080081da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2280      	movs	r2, #128	@ 0x80
 80081e8:	0192      	lsls	r2, r2, #6
 80081ea:	605a      	str	r2, [r3, #4]
  return 0;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	0018      	movs	r0, r3
 80081f0:	46bd      	mov	sp, r7
 80081f2:	b002      	add	sp, #8
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <_isatty>:

int _isatty(int file)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80081fe:	2301      	movs	r3, #1
}
 8008200:	0018      	movs	r0, r3
 8008202:	46bd      	mov	sp, r7
 8008204:	b002      	add	sp, #8
 8008206:	bd80      	pop	{r7, pc}

08008208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008214:	2300      	movs	r3, #0
}
 8008216:	0018      	movs	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	b004      	add	sp, #16
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008228:	4a14      	ldr	r2, [pc, #80]	@ (800827c <_sbrk+0x5c>)
 800822a:	4b15      	ldr	r3, [pc, #84]	@ (8008280 <_sbrk+0x60>)
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008234:	4b13      	ldr	r3, [pc, #76]	@ (8008284 <_sbrk+0x64>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800823c:	4b11      	ldr	r3, [pc, #68]	@ (8008284 <_sbrk+0x64>)
 800823e:	4a12      	ldr	r2, [pc, #72]	@ (8008288 <_sbrk+0x68>)
 8008240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008242:	4b10      	ldr	r3, [pc, #64]	@ (8008284 <_sbrk+0x64>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	18d3      	adds	r3, r2, r3
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	429a      	cmp	r2, r3
 800824e:	d207      	bcs.n	8008260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008250:	f002 fb62 	bl	800a918 <__errno>
 8008254:	0003      	movs	r3, r0
 8008256:	220c      	movs	r2, #12
 8008258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800825a:	2301      	movs	r3, #1
 800825c:	425b      	negs	r3, r3
 800825e:	e009      	b.n	8008274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008260:	4b08      	ldr	r3, [pc, #32]	@ (8008284 <_sbrk+0x64>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008266:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <_sbrk+0x64>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	18d2      	adds	r2, r2, r3
 800826e:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <_sbrk+0x64>)
 8008270:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008272:	68fb      	ldr	r3, [r7, #12]
}
 8008274:	0018      	movs	r0, r3
 8008276:	46bd      	mov	sp, r7
 8008278:	b006      	add	sp, #24
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20009000 	.word	0x20009000
 8008280:	00000400 	.word	0x00000400
 8008284:	20000274 	.word	0x20000274
 8008288:	200003e8 	.word	0x200003e8

0800828c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008290:	46c0      	nop			@ (mov r8, r8)
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008298:	480d      	ldr	r0, [pc, #52]	@ (80082d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800829a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800829c:	f7ff fff6 	bl	800828c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80082a0:	480c      	ldr	r0, [pc, #48]	@ (80082d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80082a2:	490d      	ldr	r1, [pc, #52]	@ (80082d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80082a4:	4a0d      	ldr	r2, [pc, #52]	@ (80082dc <LoopForever+0xe>)
  movs r3, #0
 80082a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80082a8:	e002      	b.n	80082b0 <LoopCopyDataInit>

080082aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80082aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80082ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80082ae:	3304      	adds	r3, #4

080082b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80082b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80082b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80082b4:	d3f9      	bcc.n	80082aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80082b6:	4a0a      	ldr	r2, [pc, #40]	@ (80082e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80082b8:	4c0a      	ldr	r4, [pc, #40]	@ (80082e4 <LoopForever+0x16>)
  movs r3, #0
 80082ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80082bc:	e001      	b.n	80082c2 <LoopFillZerobss>

080082be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80082be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80082c0:	3204      	adds	r2, #4

080082c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80082c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80082c4:	d3fb      	bcc.n	80082be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80082c6:	f002 fb2d 	bl	800a924 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80082ca:	f7ff fd2b 	bl	8007d24 <main>

080082ce <LoopForever>:

LoopForever:
  b LoopForever
 80082ce:	e7fe      	b.n	80082ce <LoopForever>
  ldr   r0, =_estack
 80082d0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80082d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80082d8:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 80082dc:	0800c53c 	.word	0x0800c53c
  ldr r2, =_sbss
 80082e0:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 80082e4:	200003e4 	.word	0x200003e4

080082e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80082e8:	e7fe      	b.n	80082e8 <ADC1_IRQHandler>
	...

080082ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80082f2:	1dfb      	adds	r3, r7, #7
 80082f4:	2200      	movs	r2, #0
 80082f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80082f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008328 <HAL_Init+0x3c>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008328 <HAL_Init+0x3c>)
 80082fe:	2180      	movs	r1, #128	@ 0x80
 8008300:	0049      	lsls	r1, r1, #1
 8008302:	430a      	orrs	r2, r1
 8008304:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008306:	2003      	movs	r0, #3
 8008308:	f000 f810 	bl	800832c <HAL_InitTick>
 800830c:	1e03      	subs	r3, r0, #0
 800830e:	d003      	beq.n	8008318 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008310:	1dfb      	adds	r3, r7, #7
 8008312:	2201      	movs	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	e001      	b.n	800831c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008318:	f7ff fe5c 	bl	8007fd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800831c:	1dfb      	adds	r3, r7, #7
 800831e:	781b      	ldrb	r3, [r3, #0]
}
 8008320:	0018      	movs	r0, r3
 8008322:	46bd      	mov	sp, r7
 8008324:	b002      	add	sp, #8
 8008326:	bd80      	pop	{r7, pc}
 8008328:	40022000 	.word	0x40022000

0800832c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008334:	230f      	movs	r3, #15
 8008336:	18fb      	adds	r3, r7, r3
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800833c:	4b1d      	ldr	r3, [pc, #116]	@ (80083b4 <HAL_InitTick+0x88>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d02b      	beq.n	800839c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8008344:	4b1c      	ldr	r3, [pc, #112]	@ (80083b8 <HAL_InitTick+0x8c>)
 8008346:	681c      	ldr	r4, [r3, #0]
 8008348:	4b1a      	ldr	r3, [pc, #104]	@ (80083b4 <HAL_InitTick+0x88>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	0019      	movs	r1, r3
 800834e:	23fa      	movs	r3, #250	@ 0xfa
 8008350:	0098      	lsls	r0, r3, #2
 8008352:	f7f7 fee7 	bl	8000124 <__udivsi3>
 8008356:	0003      	movs	r3, r0
 8008358:	0019      	movs	r1, r3
 800835a:	0020      	movs	r0, r4
 800835c:	f7f7 fee2 	bl	8000124 <__udivsi3>
 8008360:	0003      	movs	r3, r0
 8008362:	0018      	movs	r0, r3
 8008364:	f000 f8ef 	bl	8008546 <HAL_SYSTICK_Config>
 8008368:	1e03      	subs	r3, r0, #0
 800836a:	d112      	bne.n	8008392 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d80a      	bhi.n	8008388 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	2301      	movs	r3, #1
 8008376:	425b      	negs	r3, r3
 8008378:	2200      	movs	r2, #0
 800837a:	0018      	movs	r0, r3
 800837c:	f000 f8ce 	bl	800851c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008380:	4b0e      	ldr	r3, [pc, #56]	@ (80083bc <HAL_InitTick+0x90>)
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	e00d      	b.n	80083a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008388:	230f      	movs	r3, #15
 800838a:	18fb      	adds	r3, r7, r3
 800838c:	2201      	movs	r2, #1
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	e008      	b.n	80083a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008392:	230f      	movs	r3, #15
 8008394:	18fb      	adds	r3, r7, r3
 8008396:	2201      	movs	r2, #1
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	e003      	b.n	80083a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800839c:	230f      	movs	r3, #15
 800839e:	18fb      	adds	r3, r7, r3
 80083a0:	2201      	movs	r2, #1
 80083a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80083a4:	230f      	movs	r3, #15
 80083a6:	18fb      	adds	r3, r7, r3
 80083a8:	781b      	ldrb	r3, [r3, #0]
}
 80083aa:	0018      	movs	r0, r3
 80083ac:	46bd      	mov	sp, r7
 80083ae:	b005      	add	sp, #20
 80083b0:	bd90      	pop	{r4, r7, pc}
 80083b2:	46c0      	nop			@ (mov r8, r8)
 80083b4:	2000005c 	.word	0x2000005c
 80083b8:	20000054 	.word	0x20000054
 80083bc:	20000058 	.word	0x20000058

080083c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80083c4:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <HAL_IncTick+0x1c>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	001a      	movs	r2, r3
 80083ca:	4b05      	ldr	r3, [pc, #20]	@ (80083e0 <HAL_IncTick+0x20>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	18d2      	adds	r2, r2, r3
 80083d0:	4b03      	ldr	r3, [pc, #12]	@ (80083e0 <HAL_IncTick+0x20>)
 80083d2:	601a      	str	r2, [r3, #0]
}
 80083d4:	46c0      	nop			@ (mov r8, r8)
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	46c0      	nop			@ (mov r8, r8)
 80083dc:	2000005c 	.word	0x2000005c
 80083e0:	20000278 	.word	0x20000278

080083e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  return uwTick;
 80083e8:	4b02      	ldr	r3, [pc, #8]	@ (80083f4 <HAL_GetTick+0x10>)
 80083ea:	681b      	ldr	r3, [r3, #0]
}
 80083ec:	0018      	movs	r0, r3
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	46c0      	nop			@ (mov r8, r8)
 80083f4:	20000278 	.word	0x20000278

080083f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80083f8:	b590      	push	{r4, r7, lr}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	0002      	movs	r2, r0
 8008400:	6039      	str	r1, [r7, #0]
 8008402:	1dfb      	adds	r3, r7, #7
 8008404:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008406:	1dfb      	adds	r3, r7, #7
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b7f      	cmp	r3, #127	@ 0x7f
 800840c:	d828      	bhi.n	8008460 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800840e:	4a2f      	ldr	r2, [pc, #188]	@ (80084cc <__NVIC_SetPriority+0xd4>)
 8008410:	1dfb      	adds	r3, r7, #7
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	b25b      	sxtb	r3, r3
 8008416:	089b      	lsrs	r3, r3, #2
 8008418:	33c0      	adds	r3, #192	@ 0xc0
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	589b      	ldr	r3, [r3, r2]
 800841e:	1dfa      	adds	r2, r7, #7
 8008420:	7812      	ldrb	r2, [r2, #0]
 8008422:	0011      	movs	r1, r2
 8008424:	2203      	movs	r2, #3
 8008426:	400a      	ands	r2, r1
 8008428:	00d2      	lsls	r2, r2, #3
 800842a:	21ff      	movs	r1, #255	@ 0xff
 800842c:	4091      	lsls	r1, r2
 800842e:	000a      	movs	r2, r1
 8008430:	43d2      	mvns	r2, r2
 8008432:	401a      	ands	r2, r3
 8008434:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	019b      	lsls	r3, r3, #6
 800843a:	22ff      	movs	r2, #255	@ 0xff
 800843c:	401a      	ands	r2, r3
 800843e:	1dfb      	adds	r3, r7, #7
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	0018      	movs	r0, r3
 8008444:	2303      	movs	r3, #3
 8008446:	4003      	ands	r3, r0
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800844c:	481f      	ldr	r0, [pc, #124]	@ (80084cc <__NVIC_SetPriority+0xd4>)
 800844e:	1dfb      	adds	r3, r7, #7
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	b25b      	sxtb	r3, r3
 8008454:	089b      	lsrs	r3, r3, #2
 8008456:	430a      	orrs	r2, r1
 8008458:	33c0      	adds	r3, #192	@ 0xc0
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800845e:	e031      	b.n	80084c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008460:	4a1b      	ldr	r2, [pc, #108]	@ (80084d0 <__NVIC_SetPriority+0xd8>)
 8008462:	1dfb      	adds	r3, r7, #7
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	0019      	movs	r1, r3
 8008468:	230f      	movs	r3, #15
 800846a:	400b      	ands	r3, r1
 800846c:	3b08      	subs	r3, #8
 800846e:	089b      	lsrs	r3, r3, #2
 8008470:	3306      	adds	r3, #6
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	18d3      	adds	r3, r2, r3
 8008476:	3304      	adds	r3, #4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	1dfa      	adds	r2, r7, #7
 800847c:	7812      	ldrb	r2, [r2, #0]
 800847e:	0011      	movs	r1, r2
 8008480:	2203      	movs	r2, #3
 8008482:	400a      	ands	r2, r1
 8008484:	00d2      	lsls	r2, r2, #3
 8008486:	21ff      	movs	r1, #255	@ 0xff
 8008488:	4091      	lsls	r1, r2
 800848a:	000a      	movs	r2, r1
 800848c:	43d2      	mvns	r2, r2
 800848e:	401a      	ands	r2, r3
 8008490:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	019b      	lsls	r3, r3, #6
 8008496:	22ff      	movs	r2, #255	@ 0xff
 8008498:	401a      	ands	r2, r3
 800849a:	1dfb      	adds	r3, r7, #7
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	0018      	movs	r0, r3
 80084a0:	2303      	movs	r3, #3
 80084a2:	4003      	ands	r3, r0
 80084a4:	00db      	lsls	r3, r3, #3
 80084a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80084a8:	4809      	ldr	r0, [pc, #36]	@ (80084d0 <__NVIC_SetPriority+0xd8>)
 80084aa:	1dfb      	adds	r3, r7, #7
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	001c      	movs	r4, r3
 80084b0:	230f      	movs	r3, #15
 80084b2:	4023      	ands	r3, r4
 80084b4:	3b08      	subs	r3, #8
 80084b6:	089b      	lsrs	r3, r3, #2
 80084b8:	430a      	orrs	r2, r1
 80084ba:	3306      	adds	r3, #6
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	18c3      	adds	r3, r0, r3
 80084c0:	3304      	adds	r3, #4
 80084c2:	601a      	str	r2, [r3, #0]
}
 80084c4:	46c0      	nop			@ (mov r8, r8)
 80084c6:	46bd      	mov	sp, r7
 80084c8:	b003      	add	sp, #12
 80084ca:	bd90      	pop	{r4, r7, pc}
 80084cc:	e000e100 	.word	0xe000e100
 80084d0:	e000ed00 	.word	0xe000ed00

080084d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	1e5a      	subs	r2, r3, #1
 80084e0:	2380      	movs	r3, #128	@ 0x80
 80084e2:	045b      	lsls	r3, r3, #17
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d301      	bcc.n	80084ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084e8:	2301      	movs	r3, #1
 80084ea:	e010      	b.n	800850e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008518 <SysTick_Config+0x44>)
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	3a01      	subs	r2, #1
 80084f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084f4:	2301      	movs	r3, #1
 80084f6:	425b      	negs	r3, r3
 80084f8:	2103      	movs	r1, #3
 80084fa:	0018      	movs	r0, r3
 80084fc:	f7ff ff7c 	bl	80083f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008500:	4b05      	ldr	r3, [pc, #20]	@ (8008518 <SysTick_Config+0x44>)
 8008502:	2200      	movs	r2, #0
 8008504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008506:	4b04      	ldr	r3, [pc, #16]	@ (8008518 <SysTick_Config+0x44>)
 8008508:	2207      	movs	r2, #7
 800850a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800850c:	2300      	movs	r3, #0
}
 800850e:	0018      	movs	r0, r3
 8008510:	46bd      	mov	sp, r7
 8008512:	b002      	add	sp, #8
 8008514:	bd80      	pop	{r7, pc}
 8008516:	46c0      	nop			@ (mov r8, r8)
 8008518:	e000e010 	.word	0xe000e010

0800851c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
 8008526:	210f      	movs	r1, #15
 8008528:	187b      	adds	r3, r7, r1
 800852a:	1c02      	adds	r2, r0, #0
 800852c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	187b      	adds	r3, r7, r1
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	b25b      	sxtb	r3, r3
 8008536:	0011      	movs	r1, r2
 8008538:	0018      	movs	r0, r3
 800853a:	f7ff ff5d 	bl	80083f8 <__NVIC_SetPriority>
}
 800853e:	46c0      	nop			@ (mov r8, r8)
 8008540:	46bd      	mov	sp, r7
 8008542:	b004      	add	sp, #16
 8008544:	bd80      	pop	{r7, pc}

08008546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	0018      	movs	r0, r3
 8008552:	f7ff ffbf 	bl	80084d4 <SysTick_Config>
 8008556:	0003      	movs	r3, r0
}
 8008558:	0018      	movs	r0, r3
 800855a:	46bd      	mov	sp, r7
 800855c:	b002      	add	sp, #8
 800855e:	bd80      	pop	{r7, pc}

08008560 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008560:	b5b0      	push	{r4, r5, r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	603a      	str	r2, [r7, #0]
 800856c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800856e:	4b21      	ldr	r3, [pc, #132]	@ (80085f4 <HAL_FLASH_Program+0x94>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_FLASH_Program+0x1a>
 8008576:	2302      	movs	r3, #2
 8008578:	e038      	b.n	80085ec <HAL_FLASH_Program+0x8c>
 800857a:	4b1e      	ldr	r3, [pc, #120]	@ (80085f4 <HAL_FLASH_Program+0x94>)
 800857c:	2201      	movs	r2, #1
 800857e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008580:	4b1c      	ldr	r3, [pc, #112]	@ (80085f4 <HAL_FLASH_Program+0x94>)
 8008582:	2200      	movs	r2, #0
 8008584:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008586:	2517      	movs	r5, #23
 8008588:	197c      	adds	r4, r7, r5
 800858a:	23fa      	movs	r3, #250	@ 0xfa
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	0018      	movs	r0, r3
 8008590:	f000 f87a 	bl	8008688 <FLASH_WaitForLastOperation>
 8008594:	0003      	movs	r3, r0
 8008596:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008598:	197b      	adds	r3, r7, r5
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d11f      	bne.n	80085e0 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d106      	bne.n	80085b4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	0008      	movs	r0, r1
 80085ae:	f000 f8b9 	bl	8008724 <FLASH_Program_DoubleWord>
 80085b2:	e005      	b.n	80085c0 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	0011      	movs	r1, r2
 80085ba:	0018      	movs	r0, r3
 80085bc:	f002 ff3c 	bl	800b438 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80085c0:	2317      	movs	r3, #23
 80085c2:	18fc      	adds	r4, r7, r3
 80085c4:	23fa      	movs	r3, #250	@ 0xfa
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	0018      	movs	r0, r3
 80085ca:	f000 f85d 	bl	8008688 <FLASH_WaitForLastOperation>
 80085ce:	0003      	movs	r3, r0
 80085d0:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80085d2:	4b09      	ldr	r3, [pc, #36]	@ (80085f8 <HAL_FLASH_Program+0x98>)
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	43d9      	mvns	r1, r3
 80085da:	4b07      	ldr	r3, [pc, #28]	@ (80085f8 <HAL_FLASH_Program+0x98>)
 80085dc:	400a      	ands	r2, r1
 80085de:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80085e0:	4b04      	ldr	r3, [pc, #16]	@ (80085f4 <HAL_FLASH_Program+0x94>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80085e6:	2317      	movs	r3, #23
 80085e8:	18fb      	adds	r3, r7, r3
 80085ea:	781b      	ldrb	r3, [r3, #0]
}
 80085ec:	0018      	movs	r0, r3
 80085ee:	46bd      	mov	sp, r7
 80085f0:	b006      	add	sp, #24
 80085f2:	bdb0      	pop	{r4, r5, r7, pc}
 80085f4:	2000027c 	.word	0x2000027c
 80085f8:	40022000 	.word	0x40022000

080085fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008602:	1dfb      	adds	r3, r7, #7
 8008604:	2200      	movs	r2, #0
 8008606:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008608:	4b0b      	ldr	r3, [pc, #44]	@ (8008638 <HAL_FLASH_Unlock+0x3c>)
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	da0c      	bge.n	800862a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008610:	4b09      	ldr	r3, [pc, #36]	@ (8008638 <HAL_FLASH_Unlock+0x3c>)
 8008612:	4a0a      	ldr	r2, [pc, #40]	@ (800863c <HAL_FLASH_Unlock+0x40>)
 8008614:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008616:	4b08      	ldr	r3, [pc, #32]	@ (8008638 <HAL_FLASH_Unlock+0x3c>)
 8008618:	4a09      	ldr	r2, [pc, #36]	@ (8008640 <HAL_FLASH_Unlock+0x44>)
 800861a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800861c:	4b06      	ldr	r3, [pc, #24]	@ (8008638 <HAL_FLASH_Unlock+0x3c>)
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	da02      	bge.n	800862a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8008624:	1dfb      	adds	r3, r7, #7
 8008626:	2201      	movs	r2, #1
 8008628:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800862a:	1dfb      	adds	r3, r7, #7
 800862c:	781b      	ldrb	r3, [r3, #0]
}
 800862e:	0018      	movs	r0, r3
 8008630:	46bd      	mov	sp, r7
 8008632:	b002      	add	sp, #8
 8008634:	bd80      	pop	{r7, pc}
 8008636:	46c0      	nop			@ (mov r8, r8)
 8008638:	40022000 	.word	0x40022000
 800863c:	45670123 	.word	0x45670123
 8008640:	cdef89ab 	.word	0xcdef89ab

08008644 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800864a:	1dfb      	adds	r3, r7, #7
 800864c:	2201      	movs	r2, #1
 800864e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008650:	23fa      	movs	r3, #250	@ 0xfa
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	0018      	movs	r0, r3
 8008656:	f000 f817 	bl	8008688 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800865a:	4b0a      	ldr	r3, [pc, #40]	@ (8008684 <HAL_FLASH_Lock+0x40>)
 800865c:	695a      	ldr	r2, [r3, #20]
 800865e:	4b09      	ldr	r3, [pc, #36]	@ (8008684 <HAL_FLASH_Lock+0x40>)
 8008660:	2180      	movs	r1, #128	@ 0x80
 8008662:	0609      	lsls	r1, r1, #24
 8008664:	430a      	orrs	r2, r1
 8008666:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8008668:	4b06      	ldr	r3, [pc, #24]	@ (8008684 <HAL_FLASH_Lock+0x40>)
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	2b00      	cmp	r3, #0
 800866e:	da02      	bge.n	8008676 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8008670:	1dfb      	adds	r3, r7, #7
 8008672:	2200      	movs	r2, #0
 8008674:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008676:	1dfb      	adds	r3, r7, #7
 8008678:	781b      	ldrb	r3, [r3, #0]
}
 800867a:	0018      	movs	r0, r3
 800867c:	46bd      	mov	sp, r7
 800867e:	b002      	add	sp, #8
 8008680:	bd80      	pop	{r7, pc}
 8008682:	46c0      	nop			@ (mov r8, r8)
 8008684:	40022000 	.word	0x40022000

08008688 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8008690:	f7ff fea8 	bl	80083e4 <HAL_GetTick>
 8008694:	0003      	movs	r3, r0
 8008696:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8008698:	2380      	movs	r3, #128	@ 0x80
 800869a:	025b      	lsls	r3, r3, #9
 800869c:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800869e:	e00c      	b.n	80086ba <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3301      	adds	r3, #1
 80086a4:	d009      	beq.n	80086ba <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80086a6:	f7ff fe9d 	bl	80083e4 <HAL_GetTick>
 80086aa:	0002      	movs	r2, r0
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d801      	bhi.n	80086ba <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e028      	b.n	800870c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 80086ba:	4b16      	ldr	r3, [pc, #88]	@ (8008714 <FLASH_WaitForLastOperation+0x8c>)
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	4013      	ands	r3, r2
 80086c2:	d1ed      	bne.n	80086a0 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80086c4:	4b13      	ldr	r3, [pc, #76]	@ (8008714 <FLASH_WaitForLastOperation+0x8c>)
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	4a13      	ldr	r2, [pc, #76]	@ (8008718 <FLASH_WaitForLastOperation+0x90>)
 80086ca:	4013      	ands	r3, r2
 80086cc:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80086ce:	4b11      	ldr	r3, [pc, #68]	@ (8008714 <FLASH_WaitForLastOperation+0x8c>)
 80086d0:	4a12      	ldr	r2, [pc, #72]	@ (800871c <FLASH_WaitForLastOperation+0x94>)
 80086d2:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d011      	beq.n	80086fe <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80086da:	4b11      	ldr	r3, [pc, #68]	@ (8008720 <FLASH_WaitForLastOperation+0x98>)
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e013      	b.n	800870c <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3301      	adds	r3, #1
 80086e8:	d009      	beq.n	80086fe <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80086ea:	f7ff fe7b 	bl	80083e4 <HAL_GetTick>
 80086ee:	0002      	movs	r2, r0
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d801      	bhi.n	80086fe <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e006      	b.n	800870c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80086fe:	4b05      	ldr	r3, [pc, #20]	@ (8008714 <FLASH_WaitForLastOperation+0x8c>)
 8008700:	691a      	ldr	r2, [r3, #16]
 8008702:	2380      	movs	r3, #128	@ 0x80
 8008704:	02db      	lsls	r3, r3, #11
 8008706:	4013      	ands	r3, r2
 8008708:	d1ec      	bne.n	80086e4 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	0018      	movs	r0, r3
 800870e:	46bd      	mov	sp, r7
 8008710:	b004      	add	sp, #16
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40022000 	.word	0x40022000
 8008718:	000083fa 	.word	0x000083fa
 800871c:	000083fb 	.word	0x000083fb
 8008720:	2000027c 	.word	0x2000027c

08008724 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008724:	b5b0      	push	{r4, r5, r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	603a      	str	r2, [r7, #0]
 800872e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008730:	4b0b      	ldr	r3, [pc, #44]	@ (8008760 <FLASH_Program_DoubleWord+0x3c>)
 8008732:	695a      	ldr	r2, [r3, #20]
 8008734:	4b0a      	ldr	r3, [pc, #40]	@ (8008760 <FLASH_Program_DoubleWord+0x3c>)
 8008736:	2101      	movs	r1, #1
 8008738:	430a      	orrs	r2, r1
 800873a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8008742:	f3bf 8f6f 	isb	sy
}
 8008746:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	001c      	movs	r4, r3
 800874c:	2300      	movs	r3, #0
 800874e:	001d      	movs	r5, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3304      	adds	r3, #4
 8008754:	0022      	movs	r2, r4
 8008756:	601a      	str	r2, [r3, #0]
}
 8008758:	46c0      	nop			@ (mov r8, r8)
 800875a:	46bd      	mov	sp, r7
 800875c:	b004      	add	sp, #16
 800875e:	bdb0      	pop	{r4, r5, r7, pc}
 8008760:	40022000 	.word	0x40022000

08008764 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008764:	b5b0      	push	{r4, r5, r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800876e:	4b35      	ldr	r3, [pc, #212]	@ (8008844 <HAL_FLASHEx_Erase+0xe0>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d101      	bne.n	800877a <HAL_FLASHEx_Erase+0x16>
 8008776:	2302      	movs	r3, #2
 8008778:	e05f      	b.n	800883a <HAL_FLASHEx_Erase+0xd6>
 800877a:	4b32      	ldr	r3, [pc, #200]	@ (8008844 <HAL_FLASHEx_Erase+0xe0>)
 800877c:	2201      	movs	r2, #1
 800877e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008780:	4b30      	ldr	r3, [pc, #192]	@ (8008844 <HAL_FLASHEx_Erase+0xe0>)
 8008782:	2200      	movs	r2, #0
 8008784:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008786:	250f      	movs	r5, #15
 8008788:	197c      	adds	r4, r7, r5
 800878a:	23fa      	movs	r3, #250	@ 0xfa
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	0018      	movs	r0, r3
 8008790:	f7ff ff7a 	bl	8008688 <FLASH_WaitForLastOperation>
 8008794:	0003      	movs	r3, r0
 8008796:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008798:	002c      	movs	r4, r5
 800879a:	193b      	adds	r3, r7, r4
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d145      	bne.n	800882e <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2204      	movs	r2, #4
 80087a6:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	d10d      	bne.n	80087cc <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	0018      	movs	r0, r3
 80087b6:	f000 f849 	bl	800884c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80087ba:	193c      	adds	r4, r7, r4
 80087bc:	23fa      	movs	r3, #250	@ 0xfa
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	0018      	movs	r0, r3
 80087c2:	f7ff ff61 	bl	8008688 <FLASH_WaitForLastOperation>
 80087c6:	0003      	movs	r3, r0
 80087c8:	7023      	strb	r3, [r4, #0]
 80087ca:	e030      	b.n	800882e <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2201      	movs	r2, #1
 80087d0:	4252      	negs	r2, r2
 80087d2:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	60bb      	str	r3, [r7, #8]
 80087da:	e01a      	b.n	8008812 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	0011      	movs	r1, r2
 80087e4:	0018      	movs	r0, r3
 80087e6:	f000 f845 	bl	8008874 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80087ea:	250f      	movs	r5, #15
 80087ec:	197c      	adds	r4, r7, r5
 80087ee:	23fa      	movs	r3, #250	@ 0xfa
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	0018      	movs	r0, r3
 80087f4:	f7ff ff48 	bl	8008688 <FLASH_WaitForLastOperation>
 80087f8:	0003      	movs	r3, r0
 80087fa:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80087fc:	197b      	adds	r3, r7, r5
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	601a      	str	r2, [r3, #0]
          break;
 800880a:	e00a      	b.n	8008822 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	3301      	adds	r3, #1
 8008810:	60bb      	str	r3, [r7, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	18d3      	adds	r3, r2, r3
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	429a      	cmp	r2, r3
 8008820:	d3dc      	bcc.n	80087dc <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008822:	4b09      	ldr	r3, [pc, #36]	@ (8008848 <HAL_FLASHEx_Erase+0xe4>)
 8008824:	695a      	ldr	r2, [r3, #20]
 8008826:	4b08      	ldr	r3, [pc, #32]	@ (8008848 <HAL_FLASHEx_Erase+0xe4>)
 8008828:	2102      	movs	r1, #2
 800882a:	438a      	bics	r2, r1
 800882c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800882e:	4b05      	ldr	r3, [pc, #20]	@ (8008844 <HAL_FLASHEx_Erase+0xe0>)
 8008830:	2200      	movs	r2, #0
 8008832:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008834:	230f      	movs	r3, #15
 8008836:	18fb      	adds	r3, r7, r3
 8008838:	781b      	ldrb	r3, [r3, #0]
}
 800883a:	0018      	movs	r0, r3
 800883c:	46bd      	mov	sp, r7
 800883e:	b004      	add	sp, #16
 8008840:	bdb0      	pop	{r4, r5, r7, pc}
 8008842:	46c0      	nop			@ (mov r8, r8)
 8008844:	2000027c 	.word	0x2000027c
 8008848:	40022000 	.word	0x40022000

0800884c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8008854:	4b06      	ldr	r3, [pc, #24]	@ (8008870 <FLASH_MassErase+0x24>)
 8008856:	695a      	ldr	r2, [r3, #20]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	431a      	orrs	r2, r3
 800885c:	4b04      	ldr	r3, [pc, #16]	@ (8008870 <FLASH_MassErase+0x24>)
 800885e:	2180      	movs	r1, #128	@ 0x80
 8008860:	0249      	lsls	r1, r1, #9
 8008862:	430a      	orrs	r2, r1
 8008864:	615a      	str	r2, [r3, #20]
}
 8008866:	46c0      	nop			@ (mov r8, r8)
 8008868:	46bd      	mov	sp, r7
 800886a:	b002      	add	sp, #8
 800886c:	bd80      	pop	{r7, pc}
 800886e:	46c0      	nop			@ (mov r8, r8)
 8008870:	40022000 	.word	0x40022000

08008874 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800887e:	4b08      	ldr	r3, [pc, #32]	@ (80088a0 <FLASH_PageErase+0x2c>)
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	4a08      	ldr	r2, [pc, #32]	@ (80088a4 <FLASH_PageErase+0x30>)
 8008884:	4013      	ands	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	00da      	lsls	r2, r3, #3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	431a      	orrs	r2, r3
 8008890:	4b03      	ldr	r3, [pc, #12]	@ (80088a0 <FLASH_PageErase+0x2c>)
 8008892:	4905      	ldr	r1, [pc, #20]	@ (80088a8 <FLASH_PageErase+0x34>)
 8008894:	430a      	orrs	r2, r1
 8008896:	615a      	str	r2, [r3, #20]
}
 8008898:	46c0      	nop			@ (mov r8, r8)
 800889a:	46bd      	mov	sp, r7
 800889c:	b004      	add	sp, #16
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	40022000 	.word	0x40022000
 80088a4:	ffffe007 	.word	0xffffe007
 80088a8:	00010002 	.word	0x00010002

080088ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80088b6:	2300      	movs	r3, #0
 80088b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088ba:	e147      	b.n	8008b4c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2101      	movs	r1, #1
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	4091      	lsls	r1, r2
 80088c6:	000a      	movs	r2, r1
 80088c8:	4013      	ands	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d100      	bne.n	80088d4 <HAL_GPIO_Init+0x28>
 80088d2:	e138      	b.n	8008b46 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2203      	movs	r2, #3
 80088da:	4013      	ands	r3, r2
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d005      	beq.n	80088ec <HAL_GPIO_Init+0x40>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	2203      	movs	r2, #3
 80088e6:	4013      	ands	r3, r2
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d130      	bne.n	800894e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	2203      	movs	r2, #3
 80088f8:	409a      	lsls	r2, r3
 80088fa:	0013      	movs	r3, r2
 80088fc:	43da      	mvns	r2, r3
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	4013      	ands	r3, r2
 8008902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	409a      	lsls	r2, r3
 800890e:	0013      	movs	r3, r2
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4313      	orrs	r3, r2
 8008914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008922:	2201      	movs	r2, #1
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	409a      	lsls	r2, r3
 8008928:	0013      	movs	r3, r2
 800892a:	43da      	mvns	r2, r3
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	4013      	ands	r3, r2
 8008930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	091b      	lsrs	r3, r3, #4
 8008938:	2201      	movs	r2, #1
 800893a:	401a      	ands	r2, r3
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	409a      	lsls	r2, r3
 8008940:	0013      	movs	r3, r2
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2203      	movs	r2, #3
 8008954:	4013      	ands	r3, r2
 8008956:	2b03      	cmp	r3, #3
 8008958:	d017      	beq.n	800898a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	2203      	movs	r2, #3
 8008966:	409a      	lsls	r2, r3
 8008968:	0013      	movs	r3, r2
 800896a:	43da      	mvns	r2, r3
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	4013      	ands	r3, r2
 8008970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	409a      	lsls	r2, r3
 800897c:	0013      	movs	r3, r2
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	4313      	orrs	r3, r2
 8008982:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2203      	movs	r2, #3
 8008990:	4013      	ands	r3, r2
 8008992:	2b02      	cmp	r3, #2
 8008994:	d123      	bne.n	80089de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	08da      	lsrs	r2, r3, #3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	3208      	adds	r2, #8
 800899e:	0092      	lsls	r2, r2, #2
 80089a0:	58d3      	ldr	r3, [r2, r3]
 80089a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	2207      	movs	r2, #7
 80089a8:	4013      	ands	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	220f      	movs	r2, #15
 80089ae:	409a      	lsls	r2, r3
 80089b0:	0013      	movs	r3, r2
 80089b2:	43da      	mvns	r2, r3
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	4013      	ands	r3, r2
 80089b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	691a      	ldr	r2, [r3, #16]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2107      	movs	r1, #7
 80089c2:	400b      	ands	r3, r1
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	409a      	lsls	r2, r3
 80089c8:	0013      	movs	r3, r2
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	08da      	lsrs	r2, r3, #3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3208      	adds	r2, #8
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	6939      	ldr	r1, [r7, #16]
 80089dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	2203      	movs	r2, #3
 80089ea:	409a      	lsls	r2, r3
 80089ec:	0013      	movs	r3, r2
 80089ee:	43da      	mvns	r2, r3
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	4013      	ands	r3, r2
 80089f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2203      	movs	r2, #3
 80089fc:	401a      	ands	r2, r3
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	409a      	lsls	r2, r3
 8008a04:	0013      	movs	r3, r2
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	23c0      	movs	r3, #192	@ 0xc0
 8008a18:	029b      	lsls	r3, r3, #10
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	d100      	bne.n	8008a20 <HAL_GPIO_Init+0x174>
 8008a1e:	e092      	b.n	8008b46 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008a20:	4a50      	ldr	r2, [pc, #320]	@ (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	089b      	lsrs	r3, r3, #2
 8008a26:	3318      	adds	r3, #24
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	589b      	ldr	r3, [r3, r2]
 8008a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2203      	movs	r2, #3
 8008a32:	4013      	ands	r3, r2
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	220f      	movs	r2, #15
 8008a38:	409a      	lsls	r2, r3
 8008a3a:	0013      	movs	r3, r2
 8008a3c:	43da      	mvns	r2, r3
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	4013      	ands	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	23a0      	movs	r3, #160	@ 0xa0
 8008a48:	05db      	lsls	r3, r3, #23
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d013      	beq.n	8008a76 <HAL_GPIO_Init+0x1ca>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a45      	ldr	r2, [pc, #276]	@ (8008b68 <HAL_GPIO_Init+0x2bc>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d00d      	beq.n	8008a72 <HAL_GPIO_Init+0x1c6>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a44      	ldr	r2, [pc, #272]	@ (8008b6c <HAL_GPIO_Init+0x2c0>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d007      	beq.n	8008a6e <HAL_GPIO_Init+0x1c2>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a43      	ldr	r2, [pc, #268]	@ (8008b70 <HAL_GPIO_Init+0x2c4>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d101      	bne.n	8008a6a <HAL_GPIO_Init+0x1be>
 8008a66:	2303      	movs	r3, #3
 8008a68:	e006      	b.n	8008a78 <HAL_GPIO_Init+0x1cc>
 8008a6a:	2305      	movs	r3, #5
 8008a6c:	e004      	b.n	8008a78 <HAL_GPIO_Init+0x1cc>
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e002      	b.n	8008a78 <HAL_GPIO_Init+0x1cc>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e000      	b.n	8008a78 <HAL_GPIO_Init+0x1cc>
 8008a76:	2300      	movs	r3, #0
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	2103      	movs	r1, #3
 8008a7c:	400a      	ands	r2, r1
 8008a7e:	00d2      	lsls	r2, r2, #3
 8008a80:	4093      	lsls	r3, r2
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008a88:	4936      	ldr	r1, [pc, #216]	@ (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	089b      	lsrs	r3, r3, #2
 8008a8e:	3318      	adds	r3, #24
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008a96:	4b33      	ldr	r3, [pc, #204]	@ (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	43da      	mvns	r2, r3
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	2380      	movs	r3, #128	@ 0x80
 8008aac:	035b      	lsls	r3, r3, #13
 8008aae:	4013      	ands	r3, r2
 8008ab0:	d003      	beq.n	8008aba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008aba:	4b2a      	ldr	r3, [pc, #168]	@ (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008ac0:	4b28      	ldr	r3, [pc, #160]	@ (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	43da      	mvns	r2, r3
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	4013      	ands	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	2380      	movs	r3, #128	@ 0x80
 8008ad6:	039b      	lsls	r3, r3, #14
 8008ad8:	4013      	ands	r3, r2
 8008ada:	d003      	beq.n	8008ae4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008aea:	4a1e      	ldr	r2, [pc, #120]	@ (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008aec:	2384      	movs	r3, #132	@ 0x84
 8008aee:	58d3      	ldr	r3, [r2, r3]
 8008af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	43da      	mvns	r2, r3
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	4013      	ands	r3, r2
 8008afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	2380      	movs	r3, #128	@ 0x80
 8008b02:	029b      	lsls	r3, r3, #10
 8008b04:	4013      	ands	r3, r2
 8008b06:	d003      	beq.n	8008b10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008b10:	4914      	ldr	r1, [pc, #80]	@ (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008b12:	2284      	movs	r2, #132	@ 0x84
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008b18:	4a12      	ldr	r2, [pc, #72]	@ (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008b1a:	2380      	movs	r3, #128	@ 0x80
 8008b1c:	58d3      	ldr	r3, [r2, r3]
 8008b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	43da      	mvns	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4013      	ands	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	2380      	movs	r3, #128	@ 0x80
 8008b30:	025b      	lsls	r3, r3, #9
 8008b32:	4013      	ands	r3, r2
 8008b34:	d003      	beq.n	8008b3e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008b3e:	4909      	ldr	r1, [pc, #36]	@ (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008b40:	2280      	movs	r2, #128	@ 0x80
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	40da      	lsrs	r2, r3
 8008b54:	1e13      	subs	r3, r2, #0
 8008b56:	d000      	beq.n	8008b5a <HAL_GPIO_Init+0x2ae>
 8008b58:	e6b0      	b.n	80088bc <HAL_GPIO_Init+0x10>
  }
}
 8008b5a:	46c0      	nop			@ (mov r8, r8)
 8008b5c:	46c0      	nop			@ (mov r8, r8)
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	b006      	add	sp, #24
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	40021800 	.word	0x40021800
 8008b68:	50000400 	.word	0x50000400
 8008b6c:	50000800 	.word	0x50000800
 8008b70:	50000c00 	.word	0x50000c00

08008b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008b7c:	4b19      	ldr	r3, [pc, #100]	@ (8008be4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a19      	ldr	r2, [pc, #100]	@ (8008be8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	0019      	movs	r1, r3
 8008b86:	4b17      	ldr	r3, [pc, #92]	@ (8008be4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	2380      	movs	r3, #128	@ 0x80
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d11f      	bne.n	8008bd8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008b98:	4b14      	ldr	r3, [pc, #80]	@ (8008bec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	0013      	movs	r3, r2
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	189b      	adds	r3, r3, r2
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	4912      	ldr	r1, [pc, #72]	@ (8008bf0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f7f7 fabc 	bl	8000124 <__udivsi3>
 8008bac:	0003      	movs	r3, r0
 8008bae:	3301      	adds	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008bb2:	e008      	b.n	8008bc6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	e001      	b.n	8008bc6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e009      	b.n	8008bda <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008bc6:	4b07      	ldr	r3, [pc, #28]	@ (8008be4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008bc8:	695a      	ldr	r2, [r3, #20]
 8008bca:	2380      	movs	r3, #128	@ 0x80
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	401a      	ands	r2, r3
 8008bd0:	2380      	movs	r3, #128	@ 0x80
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d0ed      	beq.n	8008bb4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	0018      	movs	r0, r3
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	b004      	add	sp, #16
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	46c0      	nop			@ (mov r8, r8)
 8008be4:	40007000 	.word	0x40007000
 8008be8:	fffff9ff 	.word	0xfffff9ff
 8008bec:	20000054 	.word	0x20000054
 8008bf0:	000f4240 	.word	0x000f4240

08008bf4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008bf8:	4b03      	ldr	r3, [pc, #12]	@ (8008c08 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	23e0      	movs	r3, #224	@ 0xe0
 8008bfe:	01db      	lsls	r3, r3, #7
 8008c00:	4013      	ands	r3, r2
}
 8008c02:	0018      	movs	r0, r3
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	40021000 	.word	0x40021000

08008c0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e2f3      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2201      	movs	r2, #1
 8008c24:	4013      	ands	r3, r2
 8008c26:	d100      	bne.n	8008c2a <HAL_RCC_OscConfig+0x1e>
 8008c28:	e07c      	b.n	8008d24 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c2a:	4bc3      	ldr	r3, [pc, #780]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2238      	movs	r2, #56	@ 0x38
 8008c30:	4013      	ands	r3, r2
 8008c32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c34:	4bc0      	ldr	r3, [pc, #768]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	2b10      	cmp	r3, #16
 8008c42:	d102      	bne.n	8008c4a <HAL_RCC_OscConfig+0x3e>
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d002      	beq.n	8008c50 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d10b      	bne.n	8008c68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c50:	4bb9      	ldr	r3, [pc, #740]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	2380      	movs	r3, #128	@ 0x80
 8008c56:	029b      	lsls	r3, r3, #10
 8008c58:	4013      	ands	r3, r2
 8008c5a:	d062      	beq.n	8008d22 <HAL_RCC_OscConfig+0x116>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d15e      	bne.n	8008d22 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e2ce      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	2380      	movs	r3, #128	@ 0x80
 8008c6e:	025b      	lsls	r3, r3, #9
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d107      	bne.n	8008c84 <HAL_RCC_OscConfig+0x78>
 8008c74:	4bb0      	ldr	r3, [pc, #704]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	4baf      	ldr	r3, [pc, #700]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008c7a:	2180      	movs	r1, #128	@ 0x80
 8008c7c:	0249      	lsls	r1, r1, #9
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	e020      	b.n	8008cc6 <HAL_RCC_OscConfig+0xba>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	23a0      	movs	r3, #160	@ 0xa0
 8008c8a:	02db      	lsls	r3, r3, #11
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d10e      	bne.n	8008cae <HAL_RCC_OscConfig+0xa2>
 8008c90:	4ba9      	ldr	r3, [pc, #676]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	4ba8      	ldr	r3, [pc, #672]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008c96:	2180      	movs	r1, #128	@ 0x80
 8008c98:	02c9      	lsls	r1, r1, #11
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	4ba6      	ldr	r3, [pc, #664]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	4ba5      	ldr	r3, [pc, #660]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008ca4:	2180      	movs	r1, #128	@ 0x80
 8008ca6:	0249      	lsls	r1, r1, #9
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	e00b      	b.n	8008cc6 <HAL_RCC_OscConfig+0xba>
 8008cae:	4ba2      	ldr	r3, [pc, #648]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4ba1      	ldr	r3, [pc, #644]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008cb4:	49a1      	ldr	r1, [pc, #644]	@ (8008f3c <HAL_RCC_OscConfig+0x330>)
 8008cb6:	400a      	ands	r2, r1
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	4b9f      	ldr	r3, [pc, #636]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	4b9e      	ldr	r3, [pc, #632]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008cc0:	499f      	ldr	r1, [pc, #636]	@ (8008f40 <HAL_RCC_OscConfig+0x334>)
 8008cc2:	400a      	ands	r2, r1
 8008cc4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d014      	beq.n	8008cf8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cce:	f7ff fb89 	bl	80083e4 <HAL_GetTick>
 8008cd2:	0003      	movs	r3, r0
 8008cd4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008cd6:	e008      	b.n	8008cea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cd8:	f7ff fb84 	bl	80083e4 <HAL_GetTick>
 8008cdc:	0002      	movs	r2, r0
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b64      	cmp	r3, #100	@ 0x64
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e28d      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008cea:	4b93      	ldr	r3, [pc, #588]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	2380      	movs	r3, #128	@ 0x80
 8008cf0:	029b      	lsls	r3, r3, #10
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	d0f0      	beq.n	8008cd8 <HAL_RCC_OscConfig+0xcc>
 8008cf6:	e015      	b.n	8008d24 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf8:	f7ff fb74 	bl	80083e4 <HAL_GetTick>
 8008cfc:	0003      	movs	r3, r0
 8008cfe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d00:	e008      	b.n	8008d14 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d02:	f7ff fb6f 	bl	80083e4 <HAL_GetTick>
 8008d06:	0002      	movs	r2, r0
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	2b64      	cmp	r3, #100	@ 0x64
 8008d0e:	d901      	bls.n	8008d14 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e278      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d14:	4b88      	ldr	r3, [pc, #544]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	2380      	movs	r3, #128	@ 0x80
 8008d1a:	029b      	lsls	r3, r3, #10
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	d1f0      	bne.n	8008d02 <HAL_RCC_OscConfig+0xf6>
 8008d20:	e000      	b.n	8008d24 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d22:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2202      	movs	r2, #2
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	d100      	bne.n	8008d30 <HAL_RCC_OscConfig+0x124>
 8008d2e:	e099      	b.n	8008e64 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d30:	4b81      	ldr	r3, [pc, #516]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	2238      	movs	r2, #56	@ 0x38
 8008d36:	4013      	ands	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	2203      	movs	r2, #3
 8008d40:	4013      	ands	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2b10      	cmp	r3, #16
 8008d48:	d102      	bne.n	8008d50 <HAL_RCC_OscConfig+0x144>
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d002      	beq.n	8008d56 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d135      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d56:	4b78      	ldr	r3, [pc, #480]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	2380      	movs	r3, #128	@ 0x80
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	4013      	ands	r3, r2
 8008d60:	d005      	beq.n	8008d6e <HAL_RCC_OscConfig+0x162>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e24b      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d6e:	4b72      	ldr	r3, [pc, #456]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	4a74      	ldr	r2, [pc, #464]	@ (8008f44 <HAL_RCC_OscConfig+0x338>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	0019      	movs	r1, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	021a      	lsls	r2, r3, #8
 8008d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008d80:	430a      	orrs	r2, r1
 8008d82:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d112      	bne.n	8008db0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008d8a:	4b6b      	ldr	r3, [pc, #428]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a6e      	ldr	r2, [pc, #440]	@ (8008f48 <HAL_RCC_OscConfig+0x33c>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	0019      	movs	r1, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691a      	ldr	r2, [r3, #16]
 8008d98:	4b67      	ldr	r3, [pc, #412]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008d9e:	4b66      	ldr	r3, [pc, #408]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	0adb      	lsrs	r3, r3, #11
 8008da4:	2207      	movs	r2, #7
 8008da6:	4013      	ands	r3, r2
 8008da8:	4a68      	ldr	r2, [pc, #416]	@ (8008f4c <HAL_RCC_OscConfig+0x340>)
 8008daa:	40da      	lsrs	r2, r3
 8008dac:	4b68      	ldr	r3, [pc, #416]	@ (8008f50 <HAL_RCC_OscConfig+0x344>)
 8008dae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008db0:	4b68      	ldr	r3, [pc, #416]	@ (8008f54 <HAL_RCC_OscConfig+0x348>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	0018      	movs	r0, r3
 8008db6:	f7ff fab9 	bl	800832c <HAL_InitTick>
 8008dba:	1e03      	subs	r3, r0, #0
 8008dbc:	d051      	beq.n	8008e62 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e221      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d030      	beq.n	8008e2c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008dca:	4b5b      	ldr	r3, [pc, #364]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a5e      	ldr	r2, [pc, #376]	@ (8008f48 <HAL_RCC_OscConfig+0x33c>)
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	0019      	movs	r1, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	691a      	ldr	r2, [r3, #16]
 8008dd8:	4b57      	ldr	r3, [pc, #348]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008dde:	4b56      	ldr	r3, [pc, #344]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b55      	ldr	r3, [pc, #340]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008de4:	2180      	movs	r1, #128	@ 0x80
 8008de6:	0049      	lsls	r1, r1, #1
 8008de8:	430a      	orrs	r2, r1
 8008dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dec:	f7ff fafa 	bl	80083e4 <HAL_GetTick>
 8008df0:	0003      	movs	r3, r0
 8008df2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008df4:	e008      	b.n	8008e08 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008df6:	f7ff faf5 	bl	80083e4 <HAL_GetTick>
 8008dfa:	0002      	movs	r2, r0
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d901      	bls.n	8008e08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e1fe      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e08:	4b4b      	ldr	r3, [pc, #300]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	2380      	movs	r3, #128	@ 0x80
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	4013      	ands	r3, r2
 8008e12:	d0f0      	beq.n	8008df6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e14:	4b48      	ldr	r3, [pc, #288]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4a4a      	ldr	r2, [pc, #296]	@ (8008f44 <HAL_RCC_OscConfig+0x338>)
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	0019      	movs	r1, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	021a      	lsls	r2, r3, #8
 8008e24:	4b44      	ldr	r3, [pc, #272]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008e26:	430a      	orrs	r2, r1
 8008e28:	605a      	str	r2, [r3, #4]
 8008e2a:	e01b      	b.n	8008e64 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008e2c:	4b42      	ldr	r3, [pc, #264]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	4b41      	ldr	r3, [pc, #260]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008e32:	4949      	ldr	r1, [pc, #292]	@ (8008f58 <HAL_RCC_OscConfig+0x34c>)
 8008e34:	400a      	ands	r2, r1
 8008e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e38:	f7ff fad4 	bl	80083e4 <HAL_GetTick>
 8008e3c:	0003      	movs	r3, r0
 8008e3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e40:	e008      	b.n	8008e54 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e42:	f7ff facf 	bl	80083e4 <HAL_GetTick>
 8008e46:	0002      	movs	r2, r0
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d901      	bls.n	8008e54 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e1d8      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e54:	4b38      	ldr	r3, [pc, #224]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	2380      	movs	r3, #128	@ 0x80
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	d1f0      	bne.n	8008e42 <HAL_RCC_OscConfig+0x236>
 8008e60:	e000      	b.n	8008e64 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e62:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2208      	movs	r2, #8
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	d047      	beq.n	8008efe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008e6e:	4b32      	ldr	r3, [pc, #200]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	2238      	movs	r2, #56	@ 0x38
 8008e74:	4013      	ands	r3, r2
 8008e76:	2b18      	cmp	r3, #24
 8008e78:	d10a      	bne.n	8008e90 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e7e:	2202      	movs	r2, #2
 8008e80:	4013      	ands	r3, r2
 8008e82:	d03c      	beq.n	8008efe <HAL_RCC_OscConfig+0x2f2>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d138      	bne.n	8008efe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e1ba      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d019      	beq.n	8008ecc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008e98:	4b27      	ldr	r3, [pc, #156]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008e9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008e9c:	4b26      	ldr	r3, [pc, #152]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea4:	f7ff fa9e 	bl	80083e4 <HAL_GetTick>
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008eac:	e008      	b.n	8008ec0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008eae:	f7ff fa99 	bl	80083e4 <HAL_GetTick>
 8008eb2:	0002      	movs	r2, r0
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d901      	bls.n	8008ec0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e1a2      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	d0f1      	beq.n	8008eae <HAL_RCC_OscConfig+0x2a2>
 8008eca:	e018      	b.n	8008efe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008ece:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008ed0:	4b19      	ldr	r3, [pc, #100]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	438a      	bics	r2, r1
 8008ed6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed8:	f7ff fa84 	bl	80083e4 <HAL_GetTick>
 8008edc:	0003      	movs	r3, r0
 8008ede:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ee0:	e008      	b.n	8008ef4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ee2:	f7ff fa7f 	bl	80083e4 <HAL_GetTick>
 8008ee6:	0002      	movs	r2, r0
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d901      	bls.n	8008ef4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e188      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ef4:	4b10      	ldr	r3, [pc, #64]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ef8:	2202      	movs	r2, #2
 8008efa:	4013      	ands	r3, r2
 8008efc:	d1f1      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2204      	movs	r2, #4
 8008f04:	4013      	ands	r3, r2
 8008f06:	d100      	bne.n	8008f0a <HAL_RCC_OscConfig+0x2fe>
 8008f08:	e0c6      	b.n	8009098 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f0a:	231f      	movs	r3, #31
 8008f0c:	18fb      	adds	r3, r7, r3
 8008f0e:	2200      	movs	r2, #0
 8008f10:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008f12:	4b09      	ldr	r3, [pc, #36]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	2238      	movs	r2, #56	@ 0x38
 8008f18:	4013      	ands	r3, r2
 8008f1a:	2b20      	cmp	r3, #32
 8008f1c:	d11e      	bne.n	8008f5c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008f1e:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <HAL_RCC_OscConfig+0x32c>)
 8008f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f22:	2202      	movs	r2, #2
 8008f24:	4013      	ands	r3, r2
 8008f26:	d100      	bne.n	8008f2a <HAL_RCC_OscConfig+0x31e>
 8008f28:	e0b6      	b.n	8009098 <HAL_RCC_OscConfig+0x48c>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d000      	beq.n	8008f34 <HAL_RCC_OscConfig+0x328>
 8008f32:	e0b1      	b.n	8009098 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e166      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
 8008f38:	40021000 	.word	0x40021000
 8008f3c:	fffeffff 	.word	0xfffeffff
 8008f40:	fffbffff 	.word	0xfffbffff
 8008f44:	ffff80ff 	.word	0xffff80ff
 8008f48:	ffffc7ff 	.word	0xffffc7ff
 8008f4c:	00f42400 	.word	0x00f42400
 8008f50:	20000054 	.word	0x20000054
 8008f54:	20000058 	.word	0x20000058
 8008f58:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008f5c:	4bac      	ldr	r3, [pc, #688]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8008f5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f60:	2380      	movs	r3, #128	@ 0x80
 8008f62:	055b      	lsls	r3, r3, #21
 8008f64:	4013      	ands	r3, r2
 8008f66:	d101      	bne.n	8008f6c <HAL_RCC_OscConfig+0x360>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <HAL_RCC_OscConfig+0x362>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d011      	beq.n	8008f96 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008f72:	4ba7      	ldr	r3, [pc, #668]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8008f74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f76:	4ba6      	ldr	r3, [pc, #664]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8008f78:	2180      	movs	r1, #128	@ 0x80
 8008f7a:	0549      	lsls	r1, r1, #21
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008f80:	4ba3      	ldr	r3, [pc, #652]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8008f82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f84:	2380      	movs	r3, #128	@ 0x80
 8008f86:	055b      	lsls	r3, r3, #21
 8008f88:	4013      	ands	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008f8e:	231f      	movs	r3, #31
 8008f90:	18fb      	adds	r3, r7, r3
 8008f92:	2201      	movs	r2, #1
 8008f94:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f96:	4b9f      	ldr	r3, [pc, #636]	@ (8009214 <HAL_RCC_OscConfig+0x608>)
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	2380      	movs	r3, #128	@ 0x80
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	d11a      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fa2:	4b9c      	ldr	r3, [pc, #624]	@ (8009214 <HAL_RCC_OscConfig+0x608>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	4b9b      	ldr	r3, [pc, #620]	@ (8009214 <HAL_RCC_OscConfig+0x608>)
 8008fa8:	2180      	movs	r1, #128	@ 0x80
 8008faa:	0049      	lsls	r1, r1, #1
 8008fac:	430a      	orrs	r2, r1
 8008fae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008fb0:	f7ff fa18 	bl	80083e4 <HAL_GetTick>
 8008fb4:	0003      	movs	r3, r0
 8008fb6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fb8:	e008      	b.n	8008fcc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fba:	f7ff fa13 	bl	80083e4 <HAL_GetTick>
 8008fbe:	0002      	movs	r2, r0
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d901      	bls.n	8008fcc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e11c      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fcc:	4b91      	ldr	r3, [pc, #580]	@ (8009214 <HAL_RCC_OscConfig+0x608>)
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	2380      	movs	r3, #128	@ 0x80
 8008fd2:	005b      	lsls	r3, r3, #1
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	d0f0      	beq.n	8008fba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d106      	bne.n	8008fee <HAL_RCC_OscConfig+0x3e2>
 8008fe0:	4b8b      	ldr	r3, [pc, #556]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8008fe2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fe4:	4b8a      	ldr	r3, [pc, #552]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008fec:	e01c      	b.n	8009028 <HAL_RCC_OscConfig+0x41c>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	2b05      	cmp	r3, #5
 8008ff4:	d10c      	bne.n	8009010 <HAL_RCC_OscConfig+0x404>
 8008ff6:	4b86      	ldr	r3, [pc, #536]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8008ff8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ffa:	4b85      	ldr	r3, [pc, #532]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8008ffc:	2104      	movs	r1, #4
 8008ffe:	430a      	orrs	r2, r1
 8009000:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009002:	4b83      	ldr	r3, [pc, #524]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009004:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009006:	4b82      	ldr	r3, [pc, #520]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009008:	2101      	movs	r1, #1
 800900a:	430a      	orrs	r2, r1
 800900c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800900e:	e00b      	b.n	8009028 <HAL_RCC_OscConfig+0x41c>
 8009010:	4b7f      	ldr	r3, [pc, #508]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009012:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009014:	4b7e      	ldr	r3, [pc, #504]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009016:	2101      	movs	r1, #1
 8009018:	438a      	bics	r2, r1
 800901a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800901c:	4b7c      	ldr	r3, [pc, #496]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 800901e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009020:	4b7b      	ldr	r3, [pc, #492]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009022:	2104      	movs	r1, #4
 8009024:	438a      	bics	r2, r1
 8009026:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d014      	beq.n	800905a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009030:	f7ff f9d8 	bl	80083e4 <HAL_GetTick>
 8009034:	0003      	movs	r3, r0
 8009036:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009038:	e009      	b.n	800904e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800903a:	f7ff f9d3 	bl	80083e4 <HAL_GetTick>
 800903e:	0002      	movs	r2, r0
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	4a74      	ldr	r2, [pc, #464]	@ (8009218 <HAL_RCC_OscConfig+0x60c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e0db      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800904e:	4b70      	ldr	r3, [pc, #448]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009052:	2202      	movs	r2, #2
 8009054:	4013      	ands	r3, r2
 8009056:	d0f0      	beq.n	800903a <HAL_RCC_OscConfig+0x42e>
 8009058:	e013      	b.n	8009082 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800905a:	f7ff f9c3 	bl	80083e4 <HAL_GetTick>
 800905e:	0003      	movs	r3, r0
 8009060:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009062:	e009      	b.n	8009078 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009064:	f7ff f9be 	bl	80083e4 <HAL_GetTick>
 8009068:	0002      	movs	r2, r0
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	4a6a      	ldr	r2, [pc, #424]	@ (8009218 <HAL_RCC_OscConfig+0x60c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e0c6      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009078:	4b65      	ldr	r3, [pc, #404]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 800907a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800907c:	2202      	movs	r2, #2
 800907e:	4013      	ands	r3, r2
 8009080:	d1f0      	bne.n	8009064 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009082:	231f      	movs	r3, #31
 8009084:	18fb      	adds	r3, r7, r3
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d105      	bne.n	8009098 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800908c:	4b60      	ldr	r3, [pc, #384]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 800908e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009090:	4b5f      	ldr	r3, [pc, #380]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009092:	4962      	ldr	r1, [pc, #392]	@ (800921c <HAL_RCC_OscConfig+0x610>)
 8009094:	400a      	ands	r2, r1
 8009096:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d100      	bne.n	80090a2 <HAL_RCC_OscConfig+0x496>
 80090a0:	e0b0      	b.n	8009204 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090a2:	4b5b      	ldr	r3, [pc, #364]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	2238      	movs	r2, #56	@ 0x38
 80090a8:	4013      	ands	r3, r2
 80090aa:	2b10      	cmp	r3, #16
 80090ac:	d100      	bne.n	80090b0 <HAL_RCC_OscConfig+0x4a4>
 80090ae:	e078      	b.n	80091a2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d153      	bne.n	8009160 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090b8:	4b55      	ldr	r3, [pc, #340]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	4b54      	ldr	r3, [pc, #336]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 80090be:	4958      	ldr	r1, [pc, #352]	@ (8009220 <HAL_RCC_OscConfig+0x614>)
 80090c0:	400a      	ands	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c4:	f7ff f98e 	bl	80083e4 <HAL_GetTick>
 80090c8:	0003      	movs	r3, r0
 80090ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090cc:	e008      	b.n	80090e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090ce:	f7ff f989 	bl	80083e4 <HAL_GetTick>
 80090d2:	0002      	movs	r2, r0
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d901      	bls.n	80090e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e092      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090e0:	4b4b      	ldr	r3, [pc, #300]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	2380      	movs	r3, #128	@ 0x80
 80090e6:	049b      	lsls	r3, r3, #18
 80090e8:	4013      	ands	r3, r2
 80090ea:	d1f0      	bne.n	80090ce <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090ec:	4b48      	ldr	r3, [pc, #288]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	4a4c      	ldr	r2, [pc, #304]	@ (8009224 <HAL_RCC_OscConfig+0x618>)
 80090f2:	4013      	ands	r3, r2
 80090f4:	0019      	movs	r1, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1a      	ldr	r2, [r3, #32]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fe:	431a      	orrs	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009104:	021b      	lsls	r3, r3, #8
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009112:	431a      	orrs	r2, r3
 8009114:	4b3e      	ldr	r3, [pc, #248]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009116:	430a      	orrs	r2, r1
 8009118:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800911a:	4b3d      	ldr	r3, [pc, #244]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	4b3c      	ldr	r3, [pc, #240]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009120:	2180      	movs	r1, #128	@ 0x80
 8009122:	0449      	lsls	r1, r1, #17
 8009124:	430a      	orrs	r2, r1
 8009126:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009128:	4b39      	ldr	r3, [pc, #228]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 800912a:	68da      	ldr	r2, [r3, #12]
 800912c:	4b38      	ldr	r3, [pc, #224]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 800912e:	2180      	movs	r1, #128	@ 0x80
 8009130:	0549      	lsls	r1, r1, #21
 8009132:	430a      	orrs	r2, r1
 8009134:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009136:	f7ff f955 	bl	80083e4 <HAL_GetTick>
 800913a:	0003      	movs	r3, r0
 800913c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800913e:	e008      	b.n	8009152 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009140:	f7ff f950 	bl	80083e4 <HAL_GetTick>
 8009144:	0002      	movs	r2, r0
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	2b02      	cmp	r3, #2
 800914c:	d901      	bls.n	8009152 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e059      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009152:	4b2f      	ldr	r3, [pc, #188]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	2380      	movs	r3, #128	@ 0x80
 8009158:	049b      	lsls	r3, r3, #18
 800915a:	4013      	ands	r3, r2
 800915c:	d0f0      	beq.n	8009140 <HAL_RCC_OscConfig+0x534>
 800915e:	e051      	b.n	8009204 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009160:	4b2b      	ldr	r3, [pc, #172]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	4b2a      	ldr	r3, [pc, #168]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009166:	492e      	ldr	r1, [pc, #184]	@ (8009220 <HAL_RCC_OscConfig+0x614>)
 8009168:	400a      	ands	r2, r1
 800916a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800916c:	f7ff f93a 	bl	80083e4 <HAL_GetTick>
 8009170:	0003      	movs	r3, r0
 8009172:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009174:	e008      	b.n	8009188 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009176:	f7ff f935 	bl	80083e4 <HAL_GetTick>
 800917a:	0002      	movs	r2, r0
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d901      	bls.n	8009188 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e03e      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009188:	4b21      	ldr	r3, [pc, #132]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	2380      	movs	r3, #128	@ 0x80
 800918e:	049b      	lsls	r3, r3, #18
 8009190:	4013      	ands	r3, r2
 8009192:	d1f0      	bne.n	8009176 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8009194:	4b1e      	ldr	r3, [pc, #120]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 8009196:	68da      	ldr	r2, [r3, #12]
 8009198:	4b1d      	ldr	r3, [pc, #116]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 800919a:	4923      	ldr	r1, [pc, #140]	@ (8009228 <HAL_RCC_OscConfig+0x61c>)
 800919c:	400a      	ands	r2, r1
 800919e:	60da      	str	r2, [r3, #12]
 80091a0:	e030      	b.n	8009204 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d101      	bne.n	80091ae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e02b      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80091ae:	4b18      	ldr	r3, [pc, #96]	@ (8009210 <HAL_RCC_OscConfig+0x604>)
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2203      	movs	r2, #3
 80091b8:	401a      	ands	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d11e      	bne.n	8009200 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2270      	movs	r2, #112	@ 0x70
 80091c6:	401a      	ands	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d117      	bne.n	8009200 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	23fe      	movs	r3, #254	@ 0xfe
 80091d4:	01db      	lsls	r3, r3, #7
 80091d6:	401a      	ands	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80091de:	429a      	cmp	r2, r3
 80091e0:	d10e      	bne.n	8009200 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	23f8      	movs	r3, #248	@ 0xf8
 80091e6:	039b      	lsls	r3, r3, #14
 80091e8:	401a      	ands	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d106      	bne.n	8009200 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	0f5b      	lsrs	r3, r3, #29
 80091f6:	075a      	lsls	r2, r3, #29
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d001      	beq.n	8009204 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e000      	b.n	8009206 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	0018      	movs	r0, r3
 8009208:	46bd      	mov	sp, r7
 800920a:	b008      	add	sp, #32
 800920c:	bd80      	pop	{r7, pc}
 800920e:	46c0      	nop			@ (mov r8, r8)
 8009210:	40021000 	.word	0x40021000
 8009214:	40007000 	.word	0x40007000
 8009218:	00001388 	.word	0x00001388
 800921c:	efffffff 	.word	0xefffffff
 8009220:	feffffff 	.word	0xfeffffff
 8009224:	1fc1808c 	.word	0x1fc1808c
 8009228:	effefffc 	.word	0xeffefffc

0800922c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e0e9      	b.n	8009414 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009240:	4b76      	ldr	r3, [pc, #472]	@ (800941c <HAL_RCC_ClockConfig+0x1f0>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2207      	movs	r2, #7
 8009246:	4013      	ands	r3, r2
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	429a      	cmp	r2, r3
 800924c:	d91e      	bls.n	800928c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800924e:	4b73      	ldr	r3, [pc, #460]	@ (800941c <HAL_RCC_ClockConfig+0x1f0>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2207      	movs	r2, #7
 8009254:	4393      	bics	r3, r2
 8009256:	0019      	movs	r1, r3
 8009258:	4b70      	ldr	r3, [pc, #448]	@ (800941c <HAL_RCC_ClockConfig+0x1f0>)
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009260:	f7ff f8c0 	bl	80083e4 <HAL_GetTick>
 8009264:	0003      	movs	r3, r0
 8009266:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009268:	e009      	b.n	800927e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800926a:	f7ff f8bb 	bl	80083e4 <HAL_GetTick>
 800926e:	0002      	movs	r2, r0
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	4a6a      	ldr	r2, [pc, #424]	@ (8009420 <HAL_RCC_ClockConfig+0x1f4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d901      	bls.n	800927e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e0ca      	b.n	8009414 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800927e:	4b67      	ldr	r3, [pc, #412]	@ (800941c <HAL_RCC_ClockConfig+0x1f0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2207      	movs	r2, #7
 8009284:	4013      	ands	r3, r2
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	429a      	cmp	r2, r3
 800928a:	d1ee      	bne.n	800926a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2202      	movs	r2, #2
 8009292:	4013      	ands	r3, r2
 8009294:	d015      	beq.n	80092c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2204      	movs	r2, #4
 800929c:	4013      	ands	r3, r2
 800929e:	d006      	beq.n	80092ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80092a0:	4b60      	ldr	r3, [pc, #384]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	4b5f      	ldr	r3, [pc, #380]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 80092a6:	21e0      	movs	r1, #224	@ 0xe0
 80092a8:	01c9      	lsls	r1, r1, #7
 80092aa:	430a      	orrs	r2, r1
 80092ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092ae:	4b5d      	ldr	r3, [pc, #372]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	4a5d      	ldr	r2, [pc, #372]	@ (8009428 <HAL_RCC_ClockConfig+0x1fc>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	0019      	movs	r1, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	4b59      	ldr	r3, [pc, #356]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 80092be:	430a      	orrs	r2, r1
 80092c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2201      	movs	r2, #1
 80092c8:	4013      	ands	r3, r2
 80092ca:	d057      	beq.n	800937c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d107      	bne.n	80092e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80092d4:	4b53      	ldr	r3, [pc, #332]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	2380      	movs	r3, #128	@ 0x80
 80092da:	029b      	lsls	r3, r3, #10
 80092dc:	4013      	ands	r3, r2
 80092de:	d12b      	bne.n	8009338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e097      	b.n	8009414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d107      	bne.n	80092fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092ec:	4b4d      	ldr	r3, [pc, #308]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	2380      	movs	r3, #128	@ 0x80
 80092f2:	049b      	lsls	r3, r3, #18
 80092f4:	4013      	ands	r3, r2
 80092f6:	d11f      	bne.n	8009338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e08b      	b.n	8009414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d107      	bne.n	8009314 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009304:	4b47      	ldr	r3, [pc, #284]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	2380      	movs	r3, #128	@ 0x80
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	4013      	ands	r3, r2
 800930e:	d113      	bne.n	8009338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e07f      	b.n	8009414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	2b03      	cmp	r3, #3
 800931a:	d106      	bne.n	800932a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800931c:	4b41      	ldr	r3, [pc, #260]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 800931e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009320:	2202      	movs	r2, #2
 8009322:	4013      	ands	r3, r2
 8009324:	d108      	bne.n	8009338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e074      	b.n	8009414 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800932a:	4b3e      	ldr	r3, [pc, #248]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 800932c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800932e:	2202      	movs	r2, #2
 8009330:	4013      	ands	r3, r2
 8009332:	d101      	bne.n	8009338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e06d      	b.n	8009414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009338:	4b3a      	ldr	r3, [pc, #232]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	2207      	movs	r2, #7
 800933e:	4393      	bics	r3, r2
 8009340:	0019      	movs	r1, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	4b37      	ldr	r3, [pc, #220]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 8009348:	430a      	orrs	r2, r1
 800934a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800934c:	f7ff f84a 	bl	80083e4 <HAL_GetTick>
 8009350:	0003      	movs	r3, r0
 8009352:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009354:	e009      	b.n	800936a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009356:	f7ff f845 	bl	80083e4 <HAL_GetTick>
 800935a:	0002      	movs	r2, r0
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	4a2f      	ldr	r2, [pc, #188]	@ (8009420 <HAL_RCC_ClockConfig+0x1f4>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d901      	bls.n	800936a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e054      	b.n	8009414 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800936a:	4b2e      	ldr	r3, [pc, #184]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	2238      	movs	r2, #56	@ 0x38
 8009370:	401a      	ands	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	429a      	cmp	r2, r3
 800937a:	d1ec      	bne.n	8009356 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800937c:	4b27      	ldr	r3, [pc, #156]	@ (800941c <HAL_RCC_ClockConfig+0x1f0>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2207      	movs	r2, #7
 8009382:	4013      	ands	r3, r2
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d21e      	bcs.n	80093c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800938a:	4b24      	ldr	r3, [pc, #144]	@ (800941c <HAL_RCC_ClockConfig+0x1f0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2207      	movs	r2, #7
 8009390:	4393      	bics	r3, r2
 8009392:	0019      	movs	r1, r3
 8009394:	4b21      	ldr	r3, [pc, #132]	@ (800941c <HAL_RCC_ClockConfig+0x1f0>)
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	430a      	orrs	r2, r1
 800939a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800939c:	f7ff f822 	bl	80083e4 <HAL_GetTick>
 80093a0:	0003      	movs	r3, r0
 80093a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80093a4:	e009      	b.n	80093ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093a6:	f7ff f81d 	bl	80083e4 <HAL_GetTick>
 80093aa:	0002      	movs	r2, r0
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	4a1b      	ldr	r2, [pc, #108]	@ (8009420 <HAL_RCC_ClockConfig+0x1f4>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d901      	bls.n	80093ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e02c      	b.n	8009414 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80093ba:	4b18      	ldr	r3, [pc, #96]	@ (800941c <HAL_RCC_ClockConfig+0x1f0>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2207      	movs	r2, #7
 80093c0:	4013      	ands	r3, r2
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d1ee      	bne.n	80093a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2204      	movs	r2, #4
 80093ce:	4013      	ands	r3, r2
 80093d0:	d009      	beq.n	80093e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80093d2:	4b14      	ldr	r3, [pc, #80]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	4a15      	ldr	r2, [pc, #84]	@ (800942c <HAL_RCC_ClockConfig+0x200>)
 80093d8:	4013      	ands	r3, r2
 80093da:	0019      	movs	r1, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68da      	ldr	r2, [r3, #12]
 80093e0:	4b10      	ldr	r3, [pc, #64]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 80093e2:	430a      	orrs	r2, r1
 80093e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80093e6:	f000 f829 	bl	800943c <HAL_RCC_GetSysClockFreq>
 80093ea:	0001      	movs	r1, r0
 80093ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009424 <HAL_RCC_ClockConfig+0x1f8>)
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	0a1b      	lsrs	r3, r3, #8
 80093f2:	220f      	movs	r2, #15
 80093f4:	401a      	ands	r2, r3
 80093f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009430 <HAL_RCC_ClockConfig+0x204>)
 80093f8:	0092      	lsls	r2, r2, #2
 80093fa:	58d3      	ldr	r3, [r2, r3]
 80093fc:	221f      	movs	r2, #31
 80093fe:	4013      	ands	r3, r2
 8009400:	000a      	movs	r2, r1
 8009402:	40da      	lsrs	r2, r3
 8009404:	4b0b      	ldr	r3, [pc, #44]	@ (8009434 <HAL_RCC_ClockConfig+0x208>)
 8009406:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009408:	4b0b      	ldr	r3, [pc, #44]	@ (8009438 <HAL_RCC_ClockConfig+0x20c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	0018      	movs	r0, r3
 800940e:	f7fe ff8d 	bl	800832c <HAL_InitTick>
 8009412:	0003      	movs	r3, r0
}
 8009414:	0018      	movs	r0, r3
 8009416:	46bd      	mov	sp, r7
 8009418:	b004      	add	sp, #16
 800941a:	bd80      	pop	{r7, pc}
 800941c:	40022000 	.word	0x40022000
 8009420:	00001388 	.word	0x00001388
 8009424:	40021000 	.word	0x40021000
 8009428:	fffff0ff 	.word	0xfffff0ff
 800942c:	ffff8fff 	.word	0xffff8fff
 8009430:	0800c43c 	.word	0x0800c43c
 8009434:	20000054 	.word	0x20000054
 8009438:	20000058 	.word	0x20000058

0800943c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009442:	4b3c      	ldr	r3, [pc, #240]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	2238      	movs	r2, #56	@ 0x38
 8009448:	4013      	ands	r3, r2
 800944a:	d10f      	bne.n	800946c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800944c:	4b39      	ldr	r3, [pc, #228]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	0adb      	lsrs	r3, r3, #11
 8009452:	2207      	movs	r2, #7
 8009454:	4013      	ands	r3, r2
 8009456:	2201      	movs	r2, #1
 8009458:	409a      	lsls	r2, r3
 800945a:	0013      	movs	r3, r2
 800945c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	4835      	ldr	r0, [pc, #212]	@ (8009538 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009462:	f7f6 fe5f 	bl	8000124 <__udivsi3>
 8009466:	0003      	movs	r3, r0
 8009468:	613b      	str	r3, [r7, #16]
 800946a:	e05d      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800946c:	4b31      	ldr	r3, [pc, #196]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	2238      	movs	r2, #56	@ 0x38
 8009472:	4013      	ands	r3, r2
 8009474:	2b08      	cmp	r3, #8
 8009476:	d102      	bne.n	800947e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009478:	4b30      	ldr	r3, [pc, #192]	@ (800953c <HAL_RCC_GetSysClockFreq+0x100>)
 800947a:	613b      	str	r3, [r7, #16]
 800947c:	e054      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800947e:	4b2d      	ldr	r3, [pc, #180]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	2238      	movs	r2, #56	@ 0x38
 8009484:	4013      	ands	r3, r2
 8009486:	2b10      	cmp	r3, #16
 8009488:	d138      	bne.n	80094fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800948a:	4b2a      	ldr	r3, [pc, #168]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	2203      	movs	r2, #3
 8009490:	4013      	ands	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009494:	4b27      	ldr	r3, [pc, #156]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	091b      	lsrs	r3, r3, #4
 800949a:	2207      	movs	r2, #7
 800949c:	4013      	ands	r3, r2
 800949e:	3301      	adds	r3, #1
 80094a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d10d      	bne.n	80094c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094a8:	68b9      	ldr	r1, [r7, #8]
 80094aa:	4824      	ldr	r0, [pc, #144]	@ (800953c <HAL_RCC_GetSysClockFreq+0x100>)
 80094ac:	f7f6 fe3a 	bl	8000124 <__udivsi3>
 80094b0:	0003      	movs	r3, r0
 80094b2:	0019      	movs	r1, r3
 80094b4:	4b1f      	ldr	r3, [pc, #124]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	0a1b      	lsrs	r3, r3, #8
 80094ba:	227f      	movs	r2, #127	@ 0x7f
 80094bc:	4013      	ands	r3, r2
 80094be:	434b      	muls	r3, r1
 80094c0:	617b      	str	r3, [r7, #20]
        break;
 80094c2:	e00d      	b.n	80094e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80094c4:	68b9      	ldr	r1, [r7, #8]
 80094c6:	481c      	ldr	r0, [pc, #112]	@ (8009538 <HAL_RCC_GetSysClockFreq+0xfc>)
 80094c8:	f7f6 fe2c 	bl	8000124 <__udivsi3>
 80094cc:	0003      	movs	r3, r0
 80094ce:	0019      	movs	r1, r3
 80094d0:	4b18      	ldr	r3, [pc, #96]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	0a1b      	lsrs	r3, r3, #8
 80094d6:	227f      	movs	r2, #127	@ 0x7f
 80094d8:	4013      	ands	r3, r2
 80094da:	434b      	muls	r3, r1
 80094dc:	617b      	str	r3, [r7, #20]
        break;
 80094de:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80094e0:	4b14      	ldr	r3, [pc, #80]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	0f5b      	lsrs	r3, r3, #29
 80094e6:	2207      	movs	r2, #7
 80094e8:	4013      	ands	r3, r2
 80094ea:	3301      	adds	r3, #1
 80094ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	6978      	ldr	r0, [r7, #20]
 80094f2:	f7f6 fe17 	bl	8000124 <__udivsi3>
 80094f6:	0003      	movs	r3, r0
 80094f8:	613b      	str	r3, [r7, #16]
 80094fa:	e015      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80094fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	2238      	movs	r2, #56	@ 0x38
 8009502:	4013      	ands	r3, r2
 8009504:	2b20      	cmp	r3, #32
 8009506:	d103      	bne.n	8009510 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009508:	2380      	movs	r3, #128	@ 0x80
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	613b      	str	r3, [r7, #16]
 800950e:	e00b      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009510:	4b08      	ldr	r3, [pc, #32]	@ (8009534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	2238      	movs	r2, #56	@ 0x38
 8009516:	4013      	ands	r3, r2
 8009518:	2b18      	cmp	r3, #24
 800951a:	d103      	bne.n	8009524 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800951c:	23fa      	movs	r3, #250	@ 0xfa
 800951e:	01db      	lsls	r3, r3, #7
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	e001      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009528:	693b      	ldr	r3, [r7, #16]
}
 800952a:	0018      	movs	r0, r3
 800952c:	46bd      	mov	sp, r7
 800952e:	b006      	add	sp, #24
 8009530:	bd80      	pop	{r7, pc}
 8009532:	46c0      	nop			@ (mov r8, r8)
 8009534:	40021000 	.word	0x40021000
 8009538:	00f42400 	.word	0x00f42400
 800953c:	007a1200 	.word	0x007a1200

08009540 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009544:	4b02      	ldr	r3, [pc, #8]	@ (8009550 <HAL_RCC_GetHCLKFreq+0x10>)
 8009546:	681b      	ldr	r3, [r3, #0]
}
 8009548:	0018      	movs	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	46c0      	nop			@ (mov r8, r8)
 8009550:	20000054 	.word	0x20000054

08009554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009554:	b5b0      	push	{r4, r5, r7, lr}
 8009556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009558:	f7ff fff2 	bl	8009540 <HAL_RCC_GetHCLKFreq>
 800955c:	0004      	movs	r4, r0
 800955e:	f7ff fb49 	bl	8008bf4 <LL_RCC_GetAPB1Prescaler>
 8009562:	0003      	movs	r3, r0
 8009564:	0b1a      	lsrs	r2, r3, #12
 8009566:	4b05      	ldr	r3, [pc, #20]	@ (800957c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009568:	0092      	lsls	r2, r2, #2
 800956a:	58d3      	ldr	r3, [r2, r3]
 800956c:	221f      	movs	r2, #31
 800956e:	4013      	ands	r3, r2
 8009570:	40dc      	lsrs	r4, r3
 8009572:	0023      	movs	r3, r4
}
 8009574:	0018      	movs	r0, r3
 8009576:	46bd      	mov	sp, r7
 8009578:	bdb0      	pop	{r4, r5, r7, pc}
 800957a:	46c0      	nop			@ (mov r8, r8)
 800957c:	0800c47c 	.word	0x0800c47c

08009580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009588:	2313      	movs	r3, #19
 800958a:	18fb      	adds	r3, r7, r3
 800958c:	2200      	movs	r2, #0
 800958e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009590:	2312      	movs	r3, #18
 8009592:	18fb      	adds	r3, r7, r3
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	2380      	movs	r3, #128	@ 0x80
 800959e:	029b      	lsls	r3, r3, #10
 80095a0:	4013      	ands	r3, r2
 80095a2:	d100      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80095a4:	e0a3      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095a6:	2011      	movs	r0, #17
 80095a8:	183b      	adds	r3, r7, r0
 80095aa:	2200      	movs	r2, #0
 80095ac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095ae:	4b86      	ldr	r3, [pc, #536]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80095b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095b2:	2380      	movs	r3, #128	@ 0x80
 80095b4:	055b      	lsls	r3, r3, #21
 80095b6:	4013      	ands	r3, r2
 80095b8:	d110      	bne.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095ba:	4b83      	ldr	r3, [pc, #524]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80095bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095be:	4b82      	ldr	r3, [pc, #520]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80095c0:	2180      	movs	r1, #128	@ 0x80
 80095c2:	0549      	lsls	r1, r1, #21
 80095c4:	430a      	orrs	r2, r1
 80095c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80095c8:	4b7f      	ldr	r3, [pc, #508]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80095ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095cc:	2380      	movs	r3, #128	@ 0x80
 80095ce:	055b      	lsls	r3, r3, #21
 80095d0:	4013      	ands	r3, r2
 80095d2:	60bb      	str	r3, [r7, #8]
 80095d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095d6:	183b      	adds	r3, r7, r0
 80095d8:	2201      	movs	r2, #1
 80095da:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095dc:	4b7b      	ldr	r3, [pc, #492]	@ (80097cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	4b7a      	ldr	r3, [pc, #488]	@ (80097cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80095e2:	2180      	movs	r1, #128	@ 0x80
 80095e4:	0049      	lsls	r1, r1, #1
 80095e6:	430a      	orrs	r2, r1
 80095e8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095ea:	f7fe fefb 	bl	80083e4 <HAL_GetTick>
 80095ee:	0003      	movs	r3, r0
 80095f0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095f2:	e00b      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095f4:	f7fe fef6 	bl	80083e4 <HAL_GetTick>
 80095f8:	0002      	movs	r2, r0
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d904      	bls.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009602:	2313      	movs	r3, #19
 8009604:	18fb      	adds	r3, r7, r3
 8009606:	2203      	movs	r2, #3
 8009608:	701a      	strb	r2, [r3, #0]
        break;
 800960a:	e005      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800960c:	4b6f      	ldr	r3, [pc, #444]	@ (80097cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	2380      	movs	r3, #128	@ 0x80
 8009612:	005b      	lsls	r3, r3, #1
 8009614:	4013      	ands	r3, r2
 8009616:	d0ed      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009618:	2313      	movs	r3, #19
 800961a:	18fb      	adds	r3, r7, r3
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d154      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009622:	4b69      	ldr	r3, [pc, #420]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009624:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009626:	23c0      	movs	r3, #192	@ 0xc0
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4013      	ands	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d019      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	429a      	cmp	r2, r3
 800963c:	d014      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800963e:	4b62      	ldr	r3, [pc, #392]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009642:	4a63      	ldr	r2, [pc, #396]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009644:	4013      	ands	r3, r2
 8009646:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009648:	4b5f      	ldr	r3, [pc, #380]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800964a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800964c:	4b5e      	ldr	r3, [pc, #376]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800964e:	2180      	movs	r1, #128	@ 0x80
 8009650:	0249      	lsls	r1, r1, #9
 8009652:	430a      	orrs	r2, r1
 8009654:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009656:	4b5c      	ldr	r3, [pc, #368]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009658:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800965a:	4b5b      	ldr	r3, [pc, #364]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800965c:	495d      	ldr	r1, [pc, #372]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800965e:	400a      	ands	r2, r1
 8009660:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009662:	4b59      	ldr	r3, [pc, #356]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	2201      	movs	r2, #1
 800966c:	4013      	ands	r3, r2
 800966e:	d016      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009670:	f7fe feb8 	bl	80083e4 <HAL_GetTick>
 8009674:	0003      	movs	r3, r0
 8009676:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009678:	e00c      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800967a:	f7fe feb3 	bl	80083e4 <HAL_GetTick>
 800967e:	0002      	movs	r2, r0
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	4a54      	ldr	r2, [pc, #336]	@ (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d904      	bls.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800968a:	2313      	movs	r3, #19
 800968c:	18fb      	adds	r3, r7, r3
 800968e:	2203      	movs	r2, #3
 8009690:	701a      	strb	r2, [r3, #0]
            break;
 8009692:	e004      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009694:	4b4c      	ldr	r3, [pc, #304]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009698:	2202      	movs	r2, #2
 800969a:	4013      	ands	r3, r2
 800969c:	d0ed      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800969e:	2313      	movs	r3, #19
 80096a0:	18fb      	adds	r3, r7, r3
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10a      	bne.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096a8:	4b47      	ldr	r3, [pc, #284]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096ac:	4a48      	ldr	r2, [pc, #288]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80096ae:	4013      	ands	r3, r2
 80096b0:	0019      	movs	r1, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	699a      	ldr	r2, [r3, #24]
 80096b6:	4b44      	ldr	r3, [pc, #272]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096b8:	430a      	orrs	r2, r1
 80096ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80096bc:	e00c      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096be:	2312      	movs	r3, #18
 80096c0:	18fb      	adds	r3, r7, r3
 80096c2:	2213      	movs	r2, #19
 80096c4:	18ba      	adds	r2, r7, r2
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	701a      	strb	r2, [r3, #0]
 80096ca:	e005      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096cc:	2312      	movs	r3, #18
 80096ce:	18fb      	adds	r3, r7, r3
 80096d0:	2213      	movs	r2, #19
 80096d2:	18ba      	adds	r2, r7, r2
 80096d4:	7812      	ldrb	r2, [r2, #0]
 80096d6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80096d8:	2311      	movs	r3, #17
 80096da:	18fb      	adds	r3, r7, r3
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d105      	bne.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096e2:	4b39      	ldr	r3, [pc, #228]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096e6:	4b38      	ldr	r3, [pc, #224]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096e8:	493c      	ldr	r1, [pc, #240]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80096ea:	400a      	ands	r2, r1
 80096ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2201      	movs	r2, #1
 80096f4:	4013      	ands	r3, r2
 80096f6:	d009      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096f8:	4b33      	ldr	r3, [pc, #204]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80096fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fc:	2203      	movs	r2, #3
 80096fe:	4393      	bics	r3, r2
 8009700:	0019      	movs	r1, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	4b30      	ldr	r3, [pc, #192]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009708:	430a      	orrs	r2, r1
 800970a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2202      	movs	r2, #2
 8009712:	4013      	ands	r3, r2
 8009714:	d009      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009716:	4b2c      	ldr	r3, [pc, #176]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971a:	220c      	movs	r2, #12
 800971c:	4393      	bics	r3, r2
 800971e:	0019      	movs	r1, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689a      	ldr	r2, [r3, #8]
 8009724:	4b28      	ldr	r3, [pc, #160]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009726:	430a      	orrs	r2, r1
 8009728:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2220      	movs	r2, #32
 8009730:	4013      	ands	r3, r2
 8009732:	d009      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009734:	4b24      	ldr	r3, [pc, #144]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009738:	4a29      	ldr	r2, [pc, #164]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800973a:	4013      	ands	r3, r2
 800973c:	0019      	movs	r1, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68da      	ldr	r2, [r3, #12]
 8009742:	4b21      	ldr	r3, [pc, #132]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009744:	430a      	orrs	r2, r1
 8009746:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	2380      	movs	r3, #128	@ 0x80
 800974e:	01db      	lsls	r3, r3, #7
 8009750:	4013      	ands	r3, r2
 8009752:	d015      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009754:	4b1c      	ldr	r3, [pc, #112]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	0899      	lsrs	r1, r3, #2
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	695a      	ldr	r2, [r3, #20]
 8009760:	4b19      	ldr	r3, [pc, #100]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009762:	430a      	orrs	r2, r1
 8009764:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	695a      	ldr	r2, [r3, #20]
 800976a:	2380      	movs	r3, #128	@ 0x80
 800976c:	05db      	lsls	r3, r3, #23
 800976e:	429a      	cmp	r2, r3
 8009770:	d106      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009772:	4b15      	ldr	r3, [pc, #84]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	4b14      	ldr	r3, [pc, #80]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009778:	2180      	movs	r1, #128	@ 0x80
 800977a:	0249      	lsls	r1, r1, #9
 800977c:	430a      	orrs	r2, r1
 800977e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	2380      	movs	r3, #128	@ 0x80
 8009786:	011b      	lsls	r3, r3, #4
 8009788:	4013      	ands	r3, r2
 800978a:	d016      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800978c:	4b0e      	ldr	r3, [pc, #56]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800978e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009790:	4a14      	ldr	r2, [pc, #80]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009792:	4013      	ands	r3, r2
 8009794:	0019      	movs	r1, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691a      	ldr	r2, [r3, #16]
 800979a:	4b0b      	ldr	r3, [pc, #44]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800979c:	430a      	orrs	r2, r1
 800979e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691a      	ldr	r2, [r3, #16]
 80097a4:	2380      	movs	r3, #128	@ 0x80
 80097a6:	01db      	lsls	r3, r3, #7
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d106      	bne.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80097ac:	4b06      	ldr	r3, [pc, #24]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80097ae:	68da      	ldr	r2, [r3, #12]
 80097b0:	4b05      	ldr	r3, [pc, #20]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80097b2:	2180      	movs	r1, #128	@ 0x80
 80097b4:	0249      	lsls	r1, r1, #9
 80097b6:	430a      	orrs	r2, r1
 80097b8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80097ba:	2312      	movs	r3, #18
 80097bc:	18fb      	adds	r3, r7, r3
 80097be:	781b      	ldrb	r3, [r3, #0]
}
 80097c0:	0018      	movs	r0, r3
 80097c2:	46bd      	mov	sp, r7
 80097c4:	b006      	add	sp, #24
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	40021000 	.word	0x40021000
 80097cc:	40007000 	.word	0x40007000
 80097d0:	fffffcff 	.word	0xfffffcff
 80097d4:	fffeffff 	.word	0xfffeffff
 80097d8:	00001388 	.word	0x00001388
 80097dc:	efffffff 	.word	0xefffffff
 80097e0:	ffffcfff 	.word	0xffffcfff
 80097e4:	ffff3fff 	.word	0xffff3fff

080097e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e046      	b.n	8009888 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2288      	movs	r2, #136	@ 0x88
 80097fe:	589b      	ldr	r3, [r3, r2]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d107      	bne.n	8009814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2284      	movs	r2, #132	@ 0x84
 8009808:	2100      	movs	r1, #0
 800980a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	0018      	movs	r0, r3
 8009810:	f7fe fc04 	bl	800801c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2288      	movs	r2, #136	@ 0x88
 8009818:	2124      	movs	r1, #36	@ 0x24
 800981a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2101      	movs	r1, #1
 8009828:	438a      	bics	r2, r1
 800982a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	0018      	movs	r0, r3
 8009838:	f000 fa74 	bl	8009d24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	0018      	movs	r0, r3
 8009840:	f000 f8cc 	bl	80099dc <UART_SetConfig>
 8009844:	0003      	movs	r3, r0
 8009846:	2b01      	cmp	r3, #1
 8009848:	d101      	bne.n	800984e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e01c      	b.n	8009888 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	490d      	ldr	r1, [pc, #52]	@ (8009890 <HAL_UART_Init+0xa8>)
 800985a:	400a      	ands	r2, r1
 800985c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	689a      	ldr	r2, [r3, #8]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	212a      	movs	r1, #42	@ 0x2a
 800986a:	438a      	bics	r2, r1
 800986c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2101      	movs	r1, #1
 800987a:	430a      	orrs	r2, r1
 800987c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	0018      	movs	r0, r3
 8009882:	f000 fb03 	bl	8009e8c <UART_CheckIdleState>
 8009886:	0003      	movs	r3, r0
}
 8009888:	0018      	movs	r0, r3
 800988a:	46bd      	mov	sp, r7
 800988c:	b002      	add	sp, #8
 800988e:	bd80      	pop	{r7, pc}
 8009890:	ffffb7ff 	.word	0xffffb7ff

08009894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08a      	sub	sp, #40	@ 0x28
 8009898:	af02      	add	r7, sp, #8
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	1dbb      	adds	r3, r7, #6
 80098a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2288      	movs	r2, #136	@ 0x88
 80098a8:	589b      	ldr	r3, [r3, r2]
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	d000      	beq.n	80098b0 <HAL_UART_Transmit+0x1c>
 80098ae:	e090      	b.n	80099d2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <HAL_UART_Transmit+0x2a>
 80098b6:	1dbb      	adds	r3, r7, #6
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e088      	b.n	80099d4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	689a      	ldr	r2, [r3, #8]
 80098c6:	2380      	movs	r3, #128	@ 0x80
 80098c8:	015b      	lsls	r3, r3, #5
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d109      	bne.n	80098e2 <HAL_UART_Transmit+0x4e>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d105      	bne.n	80098e2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	2201      	movs	r2, #1
 80098da:	4013      	ands	r3, r2
 80098dc:	d001      	beq.n	80098e2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e078      	b.n	80099d4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2290      	movs	r2, #144	@ 0x90
 80098e6:	2100      	movs	r1, #0
 80098e8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2288      	movs	r2, #136	@ 0x88
 80098ee:	2121      	movs	r1, #33	@ 0x21
 80098f0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098f2:	f7fe fd77 	bl	80083e4 <HAL_GetTick>
 80098f6:	0003      	movs	r3, r0
 80098f8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	1dba      	adds	r2, r7, #6
 80098fe:	2154      	movs	r1, #84	@ 0x54
 8009900:	8812      	ldrh	r2, [r2, #0]
 8009902:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	1dba      	adds	r2, r7, #6
 8009908:	2156      	movs	r1, #86	@ 0x56
 800990a:	8812      	ldrh	r2, [r2, #0]
 800990c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	689a      	ldr	r2, [r3, #8]
 8009912:	2380      	movs	r3, #128	@ 0x80
 8009914:	015b      	lsls	r3, r3, #5
 8009916:	429a      	cmp	r2, r3
 8009918:	d108      	bne.n	800992c <HAL_UART_Transmit+0x98>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d104      	bne.n	800992c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	61bb      	str	r3, [r7, #24]
 800992a:	e003      	b.n	8009934 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009934:	e030      	b.n	8009998 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	0013      	movs	r3, r2
 8009940:	2200      	movs	r2, #0
 8009942:	2180      	movs	r1, #128	@ 0x80
 8009944:	f000 fb4c 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 8009948:	1e03      	subs	r3, r0, #0
 800994a:	d005      	beq.n	8009958 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2288      	movs	r2, #136	@ 0x88
 8009950:	2120      	movs	r1, #32
 8009952:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e03d      	b.n	80099d4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10b      	bne.n	8009976 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	001a      	movs	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	05d2      	lsls	r2, r2, #23
 800996a:	0dd2      	lsrs	r2, r2, #23
 800996c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	3302      	adds	r3, #2
 8009972:	61bb      	str	r3, [r7, #24]
 8009974:	e007      	b.n	8009986 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	781a      	ldrb	r2, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	3301      	adds	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2256      	movs	r2, #86	@ 0x56
 800998a:	5a9b      	ldrh	r3, [r3, r2]
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b299      	uxth	r1, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2256      	movs	r2, #86	@ 0x56
 8009996:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2256      	movs	r2, #86	@ 0x56
 800999c:	5a9b      	ldrh	r3, [r3, r2]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1c8      	bne.n	8009936 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	0013      	movs	r3, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	2140      	movs	r1, #64	@ 0x40
 80099b2:	f000 fb15 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 80099b6:	1e03      	subs	r3, r0, #0
 80099b8:	d005      	beq.n	80099c6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2288      	movs	r2, #136	@ 0x88
 80099be:	2120      	movs	r1, #32
 80099c0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e006      	b.n	80099d4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2288      	movs	r2, #136	@ 0x88
 80099ca:	2120      	movs	r1, #32
 80099cc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	e000      	b.n	80099d4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80099d2:	2302      	movs	r3, #2
  }
}
 80099d4:	0018      	movs	r0, r3
 80099d6:	46bd      	mov	sp, r7
 80099d8:	b008      	add	sp, #32
 80099da:	bd80      	pop	{r7, pc}

080099dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b088      	sub	sp, #32
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099e4:	231a      	movs	r3, #26
 80099e6:	18fb      	adds	r3, r7, r3
 80099e8:	2200      	movs	r2, #0
 80099ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689a      	ldr	r2, [r3, #8]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	431a      	orrs	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	431a      	orrs	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4abc      	ldr	r2, [pc, #752]	@ (8009cfc <UART_SetConfig+0x320>)
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	0019      	movs	r1, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	69fa      	ldr	r2, [r7, #28]
 8009a16:	430a      	orrs	r2, r1
 8009a18:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	4ab7      	ldr	r2, [pc, #732]	@ (8009d00 <UART_SetConfig+0x324>)
 8009a22:	4013      	ands	r3, r2
 8009a24:	0019      	movs	r1, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a1b      	ldr	r3, [r3, #32]
 8009a3c:	69fa      	ldr	r2, [r7, #28]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	4aae      	ldr	r2, [pc, #696]	@ (8009d04 <UART_SetConfig+0x328>)
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	0019      	movs	r1, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5e:	220f      	movs	r2, #15
 8009a60:	4393      	bics	r3, r2
 8009a62:	0019      	movs	r1, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4aa4      	ldr	r2, [pc, #656]	@ (8009d08 <UART_SetConfig+0x32c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d127      	bne.n	8009aca <UART_SetConfig+0xee>
 8009a7a:	4ba4      	ldr	r3, [pc, #656]	@ (8009d0c <UART_SetConfig+0x330>)
 8009a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a7e:	2203      	movs	r2, #3
 8009a80:	4013      	ands	r3, r2
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d017      	beq.n	8009ab6 <UART_SetConfig+0xda>
 8009a86:	d81b      	bhi.n	8009ac0 <UART_SetConfig+0xe4>
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d00a      	beq.n	8009aa2 <UART_SetConfig+0xc6>
 8009a8c:	d818      	bhi.n	8009ac0 <UART_SetConfig+0xe4>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <UART_SetConfig+0xbc>
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d00a      	beq.n	8009aac <UART_SetConfig+0xd0>
 8009a96:	e013      	b.n	8009ac0 <UART_SetConfig+0xe4>
 8009a98:	231b      	movs	r3, #27
 8009a9a:	18fb      	adds	r3, r7, r3
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	e058      	b.n	8009b54 <UART_SetConfig+0x178>
 8009aa2:	231b      	movs	r3, #27
 8009aa4:	18fb      	adds	r3, r7, r3
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	e053      	b.n	8009b54 <UART_SetConfig+0x178>
 8009aac:	231b      	movs	r3, #27
 8009aae:	18fb      	adds	r3, r7, r3
 8009ab0:	2204      	movs	r2, #4
 8009ab2:	701a      	strb	r2, [r3, #0]
 8009ab4:	e04e      	b.n	8009b54 <UART_SetConfig+0x178>
 8009ab6:	231b      	movs	r3, #27
 8009ab8:	18fb      	adds	r3, r7, r3
 8009aba:	2208      	movs	r2, #8
 8009abc:	701a      	strb	r2, [r3, #0]
 8009abe:	e049      	b.n	8009b54 <UART_SetConfig+0x178>
 8009ac0:	231b      	movs	r3, #27
 8009ac2:	18fb      	adds	r3, r7, r3
 8009ac4:	2210      	movs	r2, #16
 8009ac6:	701a      	strb	r2, [r3, #0]
 8009ac8:	e044      	b.n	8009b54 <UART_SetConfig+0x178>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a90      	ldr	r2, [pc, #576]	@ (8009d10 <UART_SetConfig+0x334>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d127      	bne.n	8009b24 <UART_SetConfig+0x148>
 8009ad4:	4b8d      	ldr	r3, [pc, #564]	@ (8009d0c <UART_SetConfig+0x330>)
 8009ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad8:	220c      	movs	r2, #12
 8009ada:	4013      	ands	r3, r2
 8009adc:	2b0c      	cmp	r3, #12
 8009ade:	d017      	beq.n	8009b10 <UART_SetConfig+0x134>
 8009ae0:	d81b      	bhi.n	8009b1a <UART_SetConfig+0x13e>
 8009ae2:	2b08      	cmp	r3, #8
 8009ae4:	d00a      	beq.n	8009afc <UART_SetConfig+0x120>
 8009ae6:	d818      	bhi.n	8009b1a <UART_SetConfig+0x13e>
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <UART_SetConfig+0x116>
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	d00a      	beq.n	8009b06 <UART_SetConfig+0x12a>
 8009af0:	e013      	b.n	8009b1a <UART_SetConfig+0x13e>
 8009af2:	231b      	movs	r3, #27
 8009af4:	18fb      	adds	r3, r7, r3
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]
 8009afa:	e02b      	b.n	8009b54 <UART_SetConfig+0x178>
 8009afc:	231b      	movs	r3, #27
 8009afe:	18fb      	adds	r3, r7, r3
 8009b00:	2202      	movs	r2, #2
 8009b02:	701a      	strb	r2, [r3, #0]
 8009b04:	e026      	b.n	8009b54 <UART_SetConfig+0x178>
 8009b06:	231b      	movs	r3, #27
 8009b08:	18fb      	adds	r3, r7, r3
 8009b0a:	2204      	movs	r2, #4
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	e021      	b.n	8009b54 <UART_SetConfig+0x178>
 8009b10:	231b      	movs	r3, #27
 8009b12:	18fb      	adds	r3, r7, r3
 8009b14:	2208      	movs	r2, #8
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	e01c      	b.n	8009b54 <UART_SetConfig+0x178>
 8009b1a:	231b      	movs	r3, #27
 8009b1c:	18fb      	adds	r3, r7, r3
 8009b1e:	2210      	movs	r2, #16
 8009b20:	701a      	strb	r2, [r3, #0]
 8009b22:	e017      	b.n	8009b54 <UART_SetConfig+0x178>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a7a      	ldr	r2, [pc, #488]	@ (8009d14 <UART_SetConfig+0x338>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d104      	bne.n	8009b38 <UART_SetConfig+0x15c>
 8009b2e:	231b      	movs	r3, #27
 8009b30:	18fb      	adds	r3, r7, r3
 8009b32:	2200      	movs	r2, #0
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	e00d      	b.n	8009b54 <UART_SetConfig+0x178>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a76      	ldr	r2, [pc, #472]	@ (8009d18 <UART_SetConfig+0x33c>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d104      	bne.n	8009b4c <UART_SetConfig+0x170>
 8009b42:	231b      	movs	r3, #27
 8009b44:	18fb      	adds	r3, r7, r3
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	e003      	b.n	8009b54 <UART_SetConfig+0x178>
 8009b4c:	231b      	movs	r3, #27
 8009b4e:	18fb      	adds	r3, r7, r3
 8009b50:	2210      	movs	r2, #16
 8009b52:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	69da      	ldr	r2, [r3, #28]
 8009b58:	2380      	movs	r3, #128	@ 0x80
 8009b5a:	021b      	lsls	r3, r3, #8
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d000      	beq.n	8009b62 <UART_SetConfig+0x186>
 8009b60:	e065      	b.n	8009c2e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8009b62:	231b      	movs	r3, #27
 8009b64:	18fb      	adds	r3, r7, r3
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	2b08      	cmp	r3, #8
 8009b6a:	d015      	beq.n	8009b98 <UART_SetConfig+0x1bc>
 8009b6c:	dc18      	bgt.n	8009ba0 <UART_SetConfig+0x1c4>
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d00d      	beq.n	8009b8e <UART_SetConfig+0x1b2>
 8009b72:	dc15      	bgt.n	8009ba0 <UART_SetConfig+0x1c4>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <UART_SetConfig+0x1a2>
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d005      	beq.n	8009b88 <UART_SetConfig+0x1ac>
 8009b7c:	e010      	b.n	8009ba0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b7e:	f7ff fce9 	bl	8009554 <HAL_RCC_GetPCLK1Freq>
 8009b82:	0003      	movs	r3, r0
 8009b84:	617b      	str	r3, [r7, #20]
        break;
 8009b86:	e012      	b.n	8009bae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b88:	4b64      	ldr	r3, [pc, #400]	@ (8009d1c <UART_SetConfig+0x340>)
 8009b8a:	617b      	str	r3, [r7, #20]
        break;
 8009b8c:	e00f      	b.n	8009bae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b8e:	f7ff fc55 	bl	800943c <HAL_RCC_GetSysClockFreq>
 8009b92:	0003      	movs	r3, r0
 8009b94:	617b      	str	r3, [r7, #20]
        break;
 8009b96:	e00a      	b.n	8009bae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b98:	2380      	movs	r3, #128	@ 0x80
 8009b9a:	021b      	lsls	r3, r3, #8
 8009b9c:	617b      	str	r3, [r7, #20]
        break;
 8009b9e:	e006      	b.n	8009bae <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009ba4:	231a      	movs	r3, #26
 8009ba6:	18fb      	adds	r3, r7, r3
 8009ba8:	2201      	movs	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
        break;
 8009bac:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d100      	bne.n	8009bb6 <UART_SetConfig+0x1da>
 8009bb4:	e08d      	b.n	8009cd2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bba:	4b59      	ldr	r3, [pc, #356]	@ (8009d20 <UART_SetConfig+0x344>)
 8009bbc:	0052      	lsls	r2, r2, #1
 8009bbe:	5ad3      	ldrh	r3, [r2, r3]
 8009bc0:	0019      	movs	r1, r3
 8009bc2:	6978      	ldr	r0, [r7, #20]
 8009bc4:	f7f6 faae 	bl	8000124 <__udivsi3>
 8009bc8:	0003      	movs	r3, r0
 8009bca:	005a      	lsls	r2, r3, #1
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	085b      	lsrs	r3, r3, #1
 8009bd2:	18d2      	adds	r2, r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	0019      	movs	r1, r3
 8009bda:	0010      	movs	r0, r2
 8009bdc:	f7f6 faa2 	bl	8000124 <__udivsi3>
 8009be0:	0003      	movs	r3, r0
 8009be2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	2b0f      	cmp	r3, #15
 8009be8:	d91c      	bls.n	8009c24 <UART_SetConfig+0x248>
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	2380      	movs	r3, #128	@ 0x80
 8009bee:	025b      	lsls	r3, r3, #9
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d217      	bcs.n	8009c24 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	200e      	movs	r0, #14
 8009bfa:	183b      	adds	r3, r7, r0
 8009bfc:	210f      	movs	r1, #15
 8009bfe:	438a      	bics	r2, r1
 8009c00:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	085b      	lsrs	r3, r3, #1
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	2207      	movs	r2, #7
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	b299      	uxth	r1, r3
 8009c0e:	183b      	adds	r3, r7, r0
 8009c10:	183a      	adds	r2, r7, r0
 8009c12:	8812      	ldrh	r2, [r2, #0]
 8009c14:	430a      	orrs	r2, r1
 8009c16:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	183a      	adds	r2, r7, r0
 8009c1e:	8812      	ldrh	r2, [r2, #0]
 8009c20:	60da      	str	r2, [r3, #12]
 8009c22:	e056      	b.n	8009cd2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8009c24:	231a      	movs	r3, #26
 8009c26:	18fb      	adds	r3, r7, r3
 8009c28:	2201      	movs	r2, #1
 8009c2a:	701a      	strb	r2, [r3, #0]
 8009c2c:	e051      	b.n	8009cd2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c2e:	231b      	movs	r3, #27
 8009c30:	18fb      	adds	r3, r7, r3
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b08      	cmp	r3, #8
 8009c36:	d015      	beq.n	8009c64 <UART_SetConfig+0x288>
 8009c38:	dc18      	bgt.n	8009c6c <UART_SetConfig+0x290>
 8009c3a:	2b04      	cmp	r3, #4
 8009c3c:	d00d      	beq.n	8009c5a <UART_SetConfig+0x27e>
 8009c3e:	dc15      	bgt.n	8009c6c <UART_SetConfig+0x290>
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <UART_SetConfig+0x26e>
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d005      	beq.n	8009c54 <UART_SetConfig+0x278>
 8009c48:	e010      	b.n	8009c6c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4a:	f7ff fc83 	bl	8009554 <HAL_RCC_GetPCLK1Freq>
 8009c4e:	0003      	movs	r3, r0
 8009c50:	617b      	str	r3, [r7, #20]
        break;
 8009c52:	e012      	b.n	8009c7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c54:	4b31      	ldr	r3, [pc, #196]	@ (8009d1c <UART_SetConfig+0x340>)
 8009c56:	617b      	str	r3, [r7, #20]
        break;
 8009c58:	e00f      	b.n	8009c7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c5a:	f7ff fbef 	bl	800943c <HAL_RCC_GetSysClockFreq>
 8009c5e:	0003      	movs	r3, r0
 8009c60:	617b      	str	r3, [r7, #20]
        break;
 8009c62:	e00a      	b.n	8009c7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c64:	2380      	movs	r3, #128	@ 0x80
 8009c66:	021b      	lsls	r3, r3, #8
 8009c68:	617b      	str	r3, [r7, #20]
        break;
 8009c6a:	e006      	b.n	8009c7a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009c70:	231a      	movs	r3, #26
 8009c72:	18fb      	adds	r3, r7, r3
 8009c74:	2201      	movs	r2, #1
 8009c76:	701a      	strb	r2, [r3, #0]
        break;
 8009c78:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d028      	beq.n	8009cd2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c84:	4b26      	ldr	r3, [pc, #152]	@ (8009d20 <UART_SetConfig+0x344>)
 8009c86:	0052      	lsls	r2, r2, #1
 8009c88:	5ad3      	ldrh	r3, [r2, r3]
 8009c8a:	0019      	movs	r1, r3
 8009c8c:	6978      	ldr	r0, [r7, #20]
 8009c8e:	f7f6 fa49 	bl	8000124 <__udivsi3>
 8009c92:	0003      	movs	r3, r0
 8009c94:	001a      	movs	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	085b      	lsrs	r3, r3, #1
 8009c9c:	18d2      	adds	r2, r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	0019      	movs	r1, r3
 8009ca4:	0010      	movs	r0, r2
 8009ca6:	f7f6 fa3d 	bl	8000124 <__udivsi3>
 8009caa:	0003      	movs	r3, r0
 8009cac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2b0f      	cmp	r3, #15
 8009cb2:	d90a      	bls.n	8009cca <UART_SetConfig+0x2ee>
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	2380      	movs	r3, #128	@ 0x80
 8009cb8:	025b      	lsls	r3, r3, #9
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d205      	bcs.n	8009cca <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60da      	str	r2, [r3, #12]
 8009cc8:	e003      	b.n	8009cd2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8009cca:	231a      	movs	r3, #26
 8009ccc:	18fb      	adds	r3, r7, r3
 8009cce:	2201      	movs	r2, #1
 8009cd0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	226a      	movs	r2, #106	@ 0x6a
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2268      	movs	r2, #104	@ 0x68
 8009cde:	2101      	movs	r1, #1
 8009ce0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009cee:	231a      	movs	r3, #26
 8009cf0:	18fb      	adds	r3, r7, r3
 8009cf2:	781b      	ldrb	r3, [r3, #0]
}
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	b008      	add	sp, #32
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	cfff69f3 	.word	0xcfff69f3
 8009d00:	ffffcfff 	.word	0xffffcfff
 8009d04:	11fff4ff 	.word	0x11fff4ff
 8009d08:	40013800 	.word	0x40013800
 8009d0c:	40021000 	.word	0x40021000
 8009d10:	40004400 	.word	0x40004400
 8009d14:	40004800 	.word	0x40004800
 8009d18:	40004c00 	.word	0x40004c00
 8009d1c:	00f42400 	.word	0x00f42400
 8009d20:	0800c49c 	.word	0x0800c49c

08009d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d30:	2208      	movs	r2, #8
 8009d32:	4013      	ands	r3, r2
 8009d34:	d00b      	beq.n	8009d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8009e68 <UART_AdvFeatureConfig+0x144>)
 8009d3e:	4013      	ands	r3, r2
 8009d40:	0019      	movs	r1, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d52:	2201      	movs	r2, #1
 8009d54:	4013      	ands	r3, r2
 8009d56:	d00b      	beq.n	8009d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	4a43      	ldr	r2, [pc, #268]	@ (8009e6c <UART_AdvFeatureConfig+0x148>)
 8009d60:	4013      	ands	r3, r2
 8009d62:	0019      	movs	r1, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d74:	2202      	movs	r2, #2
 8009d76:	4013      	ands	r3, r2
 8009d78:	d00b      	beq.n	8009d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4a3b      	ldr	r2, [pc, #236]	@ (8009e70 <UART_AdvFeatureConfig+0x14c>)
 8009d82:	4013      	ands	r3, r2
 8009d84:	0019      	movs	r1, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d96:	2204      	movs	r2, #4
 8009d98:	4013      	ands	r3, r2
 8009d9a:	d00b      	beq.n	8009db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	4a34      	ldr	r2, [pc, #208]	@ (8009e74 <UART_AdvFeatureConfig+0x150>)
 8009da4:	4013      	ands	r3, r2
 8009da6:	0019      	movs	r1, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db8:	2210      	movs	r2, #16
 8009dba:	4013      	ands	r3, r2
 8009dbc:	d00b      	beq.n	8009dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8009e78 <UART_AdvFeatureConfig+0x154>)
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	0019      	movs	r1, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dda:	2220      	movs	r2, #32
 8009ddc:	4013      	ands	r3, r2
 8009dde:	d00b      	beq.n	8009df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	4a25      	ldr	r2, [pc, #148]	@ (8009e7c <UART_AdvFeatureConfig+0x158>)
 8009de8:	4013      	ands	r3, r2
 8009dea:	0019      	movs	r1, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfc:	2240      	movs	r2, #64	@ 0x40
 8009dfe:	4013      	ands	r3, r2
 8009e00:	d01d      	beq.n	8009e3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	4a1d      	ldr	r2, [pc, #116]	@ (8009e80 <UART_AdvFeatureConfig+0x15c>)
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	0019      	movs	r1, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e1e:	2380      	movs	r3, #128	@ 0x80
 8009e20:	035b      	lsls	r3, r3, #13
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d10b      	bne.n	8009e3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	4a15      	ldr	r2, [pc, #84]	@ (8009e84 <UART_AdvFeatureConfig+0x160>)
 8009e2e:	4013      	ands	r3, r2
 8009e30:	0019      	movs	r1, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e42:	2280      	movs	r2, #128	@ 0x80
 8009e44:	4013      	ands	r3, r2
 8009e46:	d00b      	beq.n	8009e60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8009e88 <UART_AdvFeatureConfig+0x164>)
 8009e50:	4013      	ands	r3, r2
 8009e52:	0019      	movs	r1, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	605a      	str	r2, [r3, #4]
  }
}
 8009e60:	46c0      	nop			@ (mov r8, r8)
 8009e62:	46bd      	mov	sp, r7
 8009e64:	b002      	add	sp, #8
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	ffff7fff 	.word	0xffff7fff
 8009e6c:	fffdffff 	.word	0xfffdffff
 8009e70:	fffeffff 	.word	0xfffeffff
 8009e74:	fffbffff 	.word	0xfffbffff
 8009e78:	ffffefff 	.word	0xffffefff
 8009e7c:	ffffdfff 	.word	0xffffdfff
 8009e80:	ffefffff 	.word	0xffefffff
 8009e84:	ff9fffff 	.word	0xff9fffff
 8009e88:	fff7ffff 	.word	0xfff7ffff

08009e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b092      	sub	sp, #72	@ 0x48
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2290      	movs	r2, #144	@ 0x90
 8009e98:	2100      	movs	r1, #0
 8009e9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e9c:	f7fe faa2 	bl	80083e4 <HAL_GetTick>
 8009ea0:	0003      	movs	r3, r0
 8009ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2208      	movs	r2, #8
 8009eac:	4013      	ands	r3, r2
 8009eae:	2b08      	cmp	r3, #8
 8009eb0:	d12d      	bne.n	8009f0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb4:	2280      	movs	r2, #128	@ 0x80
 8009eb6:	0391      	lsls	r1, r2, #14
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	4a47      	ldr	r2, [pc, #284]	@ (8009fd8 <UART_CheckIdleState+0x14c>)
 8009ebc:	9200      	str	r2, [sp, #0]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f000 f88e 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 8009ec4:	1e03      	subs	r3, r0, #0
 8009ec6:	d022      	beq.n	8009f0e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed8:	f383 8810 	msr	PRIMASK, r3
}
 8009edc:	46c0      	nop			@ (mov r8, r8)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2180      	movs	r1, #128	@ 0x80
 8009eea:	438a      	bics	r2, r1
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef4:	f383 8810 	msr	PRIMASK, r3
}
 8009ef8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2288      	movs	r2, #136	@ 0x88
 8009efe:	2120      	movs	r1, #32
 8009f00:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2284      	movs	r2, #132	@ 0x84
 8009f06:	2100      	movs	r1, #0
 8009f08:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e060      	b.n	8009fd0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2204      	movs	r2, #4
 8009f16:	4013      	ands	r3, r2
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d146      	bne.n	8009faa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f1e:	2280      	movs	r2, #128	@ 0x80
 8009f20:	03d1      	lsls	r1, r2, #15
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	4a2c      	ldr	r2, [pc, #176]	@ (8009fd8 <UART_CheckIdleState+0x14c>)
 8009f26:	9200      	str	r2, [sp, #0]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f000 f859 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 8009f2e:	1e03      	subs	r3, r0, #0
 8009f30:	d03b      	beq.n	8009faa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f32:	f3ef 8310 	mrs	r3, PRIMASK
 8009f36:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f38:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	f383 8810 	msr	PRIMASK, r3
}
 8009f46:	46c0      	nop			@ (mov r8, r8)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4922      	ldr	r1, [pc, #136]	@ (8009fdc <UART_CheckIdleState+0x150>)
 8009f54:	400a      	ands	r2, r1
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f383 8810 	msr	PRIMASK, r3
}
 8009f62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f64:	f3ef 8310 	mrs	r3, PRIMASK
 8009f68:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f6a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f6e:	2301      	movs	r3, #1
 8009f70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	f383 8810 	msr	PRIMASK, r3
}
 8009f78:	46c0      	nop			@ (mov r8, r8)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2101      	movs	r1, #1
 8009f86:	438a      	bics	r2, r1
 8009f88:	609a      	str	r2, [r3, #8]
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	f383 8810 	msr	PRIMASK, r3
}
 8009f94:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	228c      	movs	r2, #140	@ 0x8c
 8009f9a:	2120      	movs	r1, #32
 8009f9c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2284      	movs	r2, #132	@ 0x84
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e012      	b.n	8009fd0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2288      	movs	r2, #136	@ 0x88
 8009fae:	2120      	movs	r1, #32
 8009fb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	228c      	movs	r2, #140	@ 0x8c
 8009fb6:	2120      	movs	r1, #32
 8009fb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2284      	movs	r2, #132	@ 0x84
 8009fca:	2100      	movs	r1, #0
 8009fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	b010      	add	sp, #64	@ 0x40
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	01ffffff 	.word	0x01ffffff
 8009fdc:	fffffedf 	.word	0xfffffedf

08009fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	1dfb      	adds	r3, r7, #7
 8009fee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff0:	e051      	b.n	800a096 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	d04e      	beq.n	800a096 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ff8:	f7fe f9f4 	bl	80083e4 <HAL_GetTick>
 8009ffc:	0002      	movs	r2, r0
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	429a      	cmp	r2, r3
 800a006:	d302      	bcc.n	800a00e <UART_WaitOnFlagUntilTimeout+0x2e>
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e051      	b.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2204      	movs	r2, #4
 800a01a:	4013      	ands	r3, r2
 800a01c:	d03b      	beq.n	800a096 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b80      	cmp	r3, #128	@ 0x80
 800a022:	d038      	beq.n	800a096 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	2b40      	cmp	r3, #64	@ 0x40
 800a028:	d035      	beq.n	800a096 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	2208      	movs	r2, #8
 800a032:	4013      	ands	r3, r2
 800a034:	2b08      	cmp	r3, #8
 800a036:	d111      	bne.n	800a05c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2208      	movs	r2, #8
 800a03e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	0018      	movs	r0, r3
 800a044:	f000 f83c 	bl	800a0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2290      	movs	r2, #144	@ 0x90
 800a04c:	2108      	movs	r1, #8
 800a04e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2284      	movs	r2, #132	@ 0x84
 800a054:	2100      	movs	r1, #0
 800a056:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e02c      	b.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	69da      	ldr	r2, [r3, #28]
 800a062:	2380      	movs	r3, #128	@ 0x80
 800a064:	011b      	lsls	r3, r3, #4
 800a066:	401a      	ands	r2, r3
 800a068:	2380      	movs	r3, #128	@ 0x80
 800a06a:	011b      	lsls	r3, r3, #4
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d112      	bne.n	800a096 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2280      	movs	r2, #128	@ 0x80
 800a076:	0112      	lsls	r2, r2, #4
 800a078:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	0018      	movs	r0, r3
 800a07e:	f000 f81f 	bl	800a0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2290      	movs	r2, #144	@ 0x90
 800a086:	2120      	movs	r1, #32
 800a088:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2284      	movs	r2, #132	@ 0x84
 800a08e:	2100      	movs	r1, #0
 800a090:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e00f      	b.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	4013      	ands	r3, r2
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	425a      	negs	r2, r3
 800a0a6:	4153      	adcs	r3, r2
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	001a      	movs	r2, r3
 800a0ac:	1dfb      	adds	r3, r7, #7
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d09e      	beq.n	8009ff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	b004      	add	sp, #16
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08e      	sub	sp, #56	@ 0x38
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0cc:	617b      	str	r3, [r7, #20]
  return(result);
 800a0ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	f383 8810 	msr	PRIMASK, r3
}
 800a0dc:	46c0      	nop			@ (mov r8, r8)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4926      	ldr	r1, [pc, #152]	@ (800a184 <UART_EndRxTransfer+0xc4>)
 800a0ea:	400a      	ands	r2, r1
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	f383 8810 	msr	PRIMASK, r3
}
 800a0f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a0fe:	623b      	str	r3, [r7, #32]
  return(result);
 800a100:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a102:	633b      	str	r3, [r7, #48]	@ 0x30
 800a104:	2301      	movs	r3, #1
 800a106:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	f383 8810 	msr	PRIMASK, r3
}
 800a10e:	46c0      	nop			@ (mov r8, r8)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689a      	ldr	r2, [r3, #8]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	491b      	ldr	r1, [pc, #108]	@ (800a188 <UART_EndRxTransfer+0xc8>)
 800a11c:	400a      	ands	r2, r1
 800a11e:	609a      	str	r2, [r3, #8]
 800a120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a122:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a126:	f383 8810 	msr	PRIMASK, r3
}
 800a12a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a130:	2b01      	cmp	r3, #1
 800a132:	d118      	bne.n	800a166 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a134:	f3ef 8310 	mrs	r3, PRIMASK
 800a138:	60bb      	str	r3, [r7, #8]
  return(result);
 800a13a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a13c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a13e:	2301      	movs	r3, #1
 800a140:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f383 8810 	msr	PRIMASK, r3
}
 800a148:	46c0      	nop			@ (mov r8, r8)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2110      	movs	r1, #16
 800a156:	438a      	bics	r2, r1
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f383 8810 	msr	PRIMASK, r3
}
 800a164:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	228c      	movs	r2, #140	@ 0x8c
 800a16a:	2120      	movs	r1, #32
 800a16c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a17a:	46c0      	nop			@ (mov r8, r8)
 800a17c:	46bd      	mov	sp, r7
 800a17e:	b00e      	add	sp, #56	@ 0x38
 800a180:	bd80      	pop	{r7, pc}
 800a182:	46c0      	nop			@ (mov r8, r8)
 800a184:	fffffedf 	.word	0xfffffedf
 800a188:	effffffe 	.word	0xeffffffe

0800a18c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2284      	movs	r2, #132	@ 0x84
 800a198:	5c9b      	ldrb	r3, [r3, r2]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d101      	bne.n	800a1a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	e027      	b.n	800a1f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2284      	movs	r2, #132	@ 0x84
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2288      	movs	r2, #136	@ 0x88
 800a1ae:	2124      	movs	r1, #36	@ 0x24
 800a1b0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	438a      	bics	r2, r1
 800a1c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	4a0b      	ldr	r2, [pc, #44]	@ (800a1fc <HAL_UARTEx_DisableFifoMode+0x70>)
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2288      	movs	r2, #136	@ 0x88
 800a1e4:	2120      	movs	r1, #32
 800a1e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2284      	movs	r2, #132	@ 0x84
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	b004      	add	sp, #16
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	46c0      	nop			@ (mov r8, r8)
 800a1fc:	dfffffff 	.word	0xdfffffff

0800a200 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2284      	movs	r2, #132	@ 0x84
 800a20e:	5c9b      	ldrb	r3, [r3, r2]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d101      	bne.n	800a218 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a214:	2302      	movs	r3, #2
 800a216:	e02e      	b.n	800a276 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2284      	movs	r2, #132	@ 0x84
 800a21c:	2101      	movs	r1, #1
 800a21e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2288      	movs	r2, #136	@ 0x88
 800a224:	2124      	movs	r1, #36	@ 0x24
 800a226:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2101      	movs	r1, #1
 800a23c:	438a      	bics	r2, r1
 800a23e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	08d9      	lsrs	r1, r3, #3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	430a      	orrs	r2, r1
 800a252:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	0018      	movs	r0, r3
 800a258:	f000 f854 	bl	800a304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2288      	movs	r2, #136	@ 0x88
 800a268:	2120      	movs	r1, #32
 800a26a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2284      	movs	r2, #132	@ 0x84
 800a270:	2100      	movs	r1, #0
 800a272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	0018      	movs	r0, r3
 800a278:	46bd      	mov	sp, r7
 800a27a:	b004      	add	sp, #16
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2284      	movs	r2, #132	@ 0x84
 800a28e:	5c9b      	ldrb	r3, [r3, r2]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a294:	2302      	movs	r3, #2
 800a296:	e02f      	b.n	800a2f8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2284      	movs	r2, #132	@ 0x84
 800a29c:	2101      	movs	r1, #1
 800a29e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2288      	movs	r2, #136	@ 0x88
 800a2a4:	2124      	movs	r1, #36	@ 0x24
 800a2a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	438a      	bics	r2, r1
 800a2be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	4a0e      	ldr	r2, [pc, #56]	@ (800a300 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	0019      	movs	r1, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	0018      	movs	r0, r3
 800a2da:	f000 f813 	bl	800a304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2288      	movs	r2, #136	@ 0x88
 800a2ea:	2120      	movs	r1, #32
 800a2ec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2284      	movs	r2, #132	@ 0x84
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	b004      	add	sp, #16
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	f1ffffff 	.word	0xf1ffffff

0800a304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a310:	2b00      	cmp	r3, #0
 800a312:	d108      	bne.n	800a326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	226a      	movs	r2, #106	@ 0x6a
 800a318:	2101      	movs	r1, #1
 800a31a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2268      	movs	r2, #104	@ 0x68
 800a320:	2101      	movs	r1, #1
 800a322:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a324:	e043      	b.n	800a3ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a326:	260f      	movs	r6, #15
 800a328:	19bb      	adds	r3, r7, r6
 800a32a:	2208      	movs	r2, #8
 800a32c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a32e:	200e      	movs	r0, #14
 800a330:	183b      	adds	r3, r7, r0
 800a332:	2208      	movs	r2, #8
 800a334:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	0e5b      	lsrs	r3, r3, #25
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	240d      	movs	r4, #13
 800a342:	193b      	adds	r3, r7, r4
 800a344:	2107      	movs	r1, #7
 800a346:	400a      	ands	r2, r1
 800a348:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	0f5b      	lsrs	r3, r3, #29
 800a352:	b2da      	uxtb	r2, r3
 800a354:	250c      	movs	r5, #12
 800a356:	197b      	adds	r3, r7, r5
 800a358:	2107      	movs	r1, #7
 800a35a:	400a      	ands	r2, r1
 800a35c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a35e:	183b      	adds	r3, r7, r0
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	197a      	adds	r2, r7, r5
 800a364:	7812      	ldrb	r2, [r2, #0]
 800a366:	4914      	ldr	r1, [pc, #80]	@ (800a3b8 <UARTEx_SetNbDataToProcess+0xb4>)
 800a368:	5c8a      	ldrb	r2, [r1, r2]
 800a36a:	435a      	muls	r2, r3
 800a36c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a36e:	197b      	adds	r3, r7, r5
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	4a12      	ldr	r2, [pc, #72]	@ (800a3bc <UARTEx_SetNbDataToProcess+0xb8>)
 800a374:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a376:	0019      	movs	r1, r3
 800a378:	f7f5 ff5e 	bl	8000238 <__divsi3>
 800a37c:	0003      	movs	r3, r0
 800a37e:	b299      	uxth	r1, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	226a      	movs	r2, #106	@ 0x6a
 800a384:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a386:	19bb      	adds	r3, r7, r6
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	193a      	adds	r2, r7, r4
 800a38c:	7812      	ldrb	r2, [r2, #0]
 800a38e:	490a      	ldr	r1, [pc, #40]	@ (800a3b8 <UARTEx_SetNbDataToProcess+0xb4>)
 800a390:	5c8a      	ldrb	r2, [r1, r2]
 800a392:	435a      	muls	r2, r3
 800a394:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a396:	193b      	adds	r3, r7, r4
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	4a08      	ldr	r2, [pc, #32]	@ (800a3bc <UARTEx_SetNbDataToProcess+0xb8>)
 800a39c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a39e:	0019      	movs	r1, r3
 800a3a0:	f7f5 ff4a 	bl	8000238 <__divsi3>
 800a3a4:	0003      	movs	r3, r0
 800a3a6:	b299      	uxth	r1, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2268      	movs	r2, #104	@ 0x68
 800a3ac:	5299      	strh	r1, [r3, r2]
}
 800a3ae:	46c0      	nop			@ (mov r8, r8)
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	b005      	add	sp, #20
 800a3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3b6:	46c0      	nop			@ (mov r8, r8)
 800a3b8:	0800c4b4 	.word	0x0800c4b4
 800a3bc:	0800c4bc 	.word	0x0800c4bc

0800a3c0 <__assert_func>:
 800a3c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a3c2:	0014      	movs	r4, r2
 800a3c4:	001a      	movs	r2, r3
 800a3c6:	4b09      	ldr	r3, [pc, #36]	@ (800a3ec <__assert_func+0x2c>)
 800a3c8:	0005      	movs	r5, r0
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	000e      	movs	r6, r1
 800a3ce:	68d8      	ldr	r0, [r3, #12]
 800a3d0:	4b07      	ldr	r3, [pc, #28]	@ (800a3f0 <__assert_func+0x30>)
 800a3d2:	2c00      	cmp	r4, #0
 800a3d4:	d101      	bne.n	800a3da <__assert_func+0x1a>
 800a3d6:	4b07      	ldr	r3, [pc, #28]	@ (800a3f4 <__assert_func+0x34>)
 800a3d8:	001c      	movs	r4, r3
 800a3da:	4907      	ldr	r1, [pc, #28]	@ (800a3f8 <__assert_func+0x38>)
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	9402      	str	r4, [sp, #8]
 800a3e0:	002b      	movs	r3, r5
 800a3e2:	9600      	str	r6, [sp, #0]
 800a3e4:	f000 f978 	bl	800a6d8 <fiprintf>
 800a3e8:	f000 facc 	bl	800a984 <abort>
 800a3ec:	2000006c 	.word	0x2000006c
 800a3f0:	0800c4c4 	.word	0x0800c4c4
 800a3f4:	0800c4ff 	.word	0x0800c4ff
 800a3f8:	0800c4d1 	.word	0x0800c4d1

0800a3fc <malloc>:
 800a3fc:	b510      	push	{r4, lr}
 800a3fe:	4b03      	ldr	r3, [pc, #12]	@ (800a40c <malloc+0x10>)
 800a400:	0001      	movs	r1, r0
 800a402:	6818      	ldr	r0, [r3, #0]
 800a404:	f000 f830 	bl	800a468 <_malloc_r>
 800a408:	bd10      	pop	{r4, pc}
 800a40a:	46c0      	nop			@ (mov r8, r8)
 800a40c:	2000006c 	.word	0x2000006c

0800a410 <free>:
 800a410:	b510      	push	{r4, lr}
 800a412:	4b03      	ldr	r3, [pc, #12]	@ (800a420 <free+0x10>)
 800a414:	0001      	movs	r1, r0
 800a416:	6818      	ldr	r0, [r3, #0]
 800a418:	f000 fabc 	bl	800a994 <_free_r>
 800a41c:	bd10      	pop	{r4, pc}
 800a41e:	46c0      	nop			@ (mov r8, r8)
 800a420:	2000006c 	.word	0x2000006c

0800a424 <sbrk_aligned>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	4e0f      	ldr	r6, [pc, #60]	@ (800a464 <sbrk_aligned+0x40>)
 800a428:	000d      	movs	r5, r1
 800a42a:	6831      	ldr	r1, [r6, #0]
 800a42c:	0004      	movs	r4, r0
 800a42e:	2900      	cmp	r1, #0
 800a430:	d102      	bne.n	800a438 <sbrk_aligned+0x14>
 800a432:	f000 fa4b 	bl	800a8cc <_sbrk_r>
 800a436:	6030      	str	r0, [r6, #0]
 800a438:	0029      	movs	r1, r5
 800a43a:	0020      	movs	r0, r4
 800a43c:	f000 fa46 	bl	800a8cc <_sbrk_r>
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	d103      	bne.n	800a44c <sbrk_aligned+0x28>
 800a444:	2501      	movs	r5, #1
 800a446:	426d      	negs	r5, r5
 800a448:	0028      	movs	r0, r5
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	2303      	movs	r3, #3
 800a44e:	1cc5      	adds	r5, r0, #3
 800a450:	439d      	bics	r5, r3
 800a452:	42a8      	cmp	r0, r5
 800a454:	d0f8      	beq.n	800a448 <sbrk_aligned+0x24>
 800a456:	1a29      	subs	r1, r5, r0
 800a458:	0020      	movs	r0, r4
 800a45a:	f000 fa37 	bl	800a8cc <_sbrk_r>
 800a45e:	3001      	adds	r0, #1
 800a460:	d1f2      	bne.n	800a448 <sbrk_aligned+0x24>
 800a462:	e7ef      	b.n	800a444 <sbrk_aligned+0x20>
 800a464:	20000298 	.word	0x20000298

0800a468 <_malloc_r>:
 800a468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a46a:	2203      	movs	r2, #3
 800a46c:	1ccb      	adds	r3, r1, #3
 800a46e:	4393      	bics	r3, r2
 800a470:	3308      	adds	r3, #8
 800a472:	0005      	movs	r5, r0
 800a474:	001f      	movs	r7, r3
 800a476:	2b0c      	cmp	r3, #12
 800a478:	d234      	bcs.n	800a4e4 <_malloc_r+0x7c>
 800a47a:	270c      	movs	r7, #12
 800a47c:	42b9      	cmp	r1, r7
 800a47e:	d833      	bhi.n	800a4e8 <_malloc_r+0x80>
 800a480:	0028      	movs	r0, r5
 800a482:	f000 f871 	bl	800a568 <__malloc_lock>
 800a486:	4e37      	ldr	r6, [pc, #220]	@ (800a564 <_malloc_r+0xfc>)
 800a488:	6833      	ldr	r3, [r6, #0]
 800a48a:	001c      	movs	r4, r3
 800a48c:	2c00      	cmp	r4, #0
 800a48e:	d12f      	bne.n	800a4f0 <_malloc_r+0x88>
 800a490:	0039      	movs	r1, r7
 800a492:	0028      	movs	r0, r5
 800a494:	f7ff ffc6 	bl	800a424 <sbrk_aligned>
 800a498:	0004      	movs	r4, r0
 800a49a:	1c43      	adds	r3, r0, #1
 800a49c:	d15f      	bne.n	800a55e <_malloc_r+0xf6>
 800a49e:	6834      	ldr	r4, [r6, #0]
 800a4a0:	9400      	str	r4, [sp, #0]
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d14a      	bne.n	800a53e <_malloc_r+0xd6>
 800a4a8:	2c00      	cmp	r4, #0
 800a4aa:	d052      	beq.n	800a552 <_malloc_r+0xea>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	0028      	movs	r0, r5
 800a4b0:	18e3      	adds	r3, r4, r3
 800a4b2:	9900      	ldr	r1, [sp, #0]
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	f000 fa09 	bl	800a8cc <_sbrk_r>
 800a4ba:	9b01      	ldr	r3, [sp, #4]
 800a4bc:	4283      	cmp	r3, r0
 800a4be:	d148      	bne.n	800a552 <_malloc_r+0xea>
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	0028      	movs	r0, r5
 800a4c4:	1aff      	subs	r7, r7, r3
 800a4c6:	0039      	movs	r1, r7
 800a4c8:	f7ff ffac 	bl	800a424 <sbrk_aligned>
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	d040      	beq.n	800a552 <_malloc_r+0xea>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	19db      	adds	r3, r3, r7
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	6833      	ldr	r3, [r6, #0]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	d133      	bne.n	800a546 <_malloc_r+0xde>
 800a4de:	9b00      	ldr	r3, [sp, #0]
 800a4e0:	6033      	str	r3, [r6, #0]
 800a4e2:	e019      	b.n	800a518 <_malloc_r+0xb0>
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	dac9      	bge.n	800a47c <_malloc_r+0x14>
 800a4e8:	230c      	movs	r3, #12
 800a4ea:	602b      	str	r3, [r5, #0]
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4f0:	6821      	ldr	r1, [r4, #0]
 800a4f2:	1bc9      	subs	r1, r1, r7
 800a4f4:	d420      	bmi.n	800a538 <_malloc_r+0xd0>
 800a4f6:	290b      	cmp	r1, #11
 800a4f8:	d90a      	bls.n	800a510 <_malloc_r+0xa8>
 800a4fa:	19e2      	adds	r2, r4, r7
 800a4fc:	6027      	str	r7, [r4, #0]
 800a4fe:	42a3      	cmp	r3, r4
 800a500:	d104      	bne.n	800a50c <_malloc_r+0xa4>
 800a502:	6032      	str	r2, [r6, #0]
 800a504:	6863      	ldr	r3, [r4, #4]
 800a506:	6011      	str	r1, [r2, #0]
 800a508:	6053      	str	r3, [r2, #4]
 800a50a:	e005      	b.n	800a518 <_malloc_r+0xb0>
 800a50c:	605a      	str	r2, [r3, #4]
 800a50e:	e7f9      	b.n	800a504 <_malloc_r+0x9c>
 800a510:	6862      	ldr	r2, [r4, #4]
 800a512:	42a3      	cmp	r3, r4
 800a514:	d10e      	bne.n	800a534 <_malloc_r+0xcc>
 800a516:	6032      	str	r2, [r6, #0]
 800a518:	0028      	movs	r0, r5
 800a51a:	f000 f82d 	bl	800a578 <__malloc_unlock>
 800a51e:	0020      	movs	r0, r4
 800a520:	2207      	movs	r2, #7
 800a522:	300b      	adds	r0, #11
 800a524:	1d23      	adds	r3, r4, #4
 800a526:	4390      	bics	r0, r2
 800a528:	1ac2      	subs	r2, r0, r3
 800a52a:	4298      	cmp	r0, r3
 800a52c:	d0df      	beq.n	800a4ee <_malloc_r+0x86>
 800a52e:	1a1b      	subs	r3, r3, r0
 800a530:	50a3      	str	r3, [r4, r2]
 800a532:	e7dc      	b.n	800a4ee <_malloc_r+0x86>
 800a534:	605a      	str	r2, [r3, #4]
 800a536:	e7ef      	b.n	800a518 <_malloc_r+0xb0>
 800a538:	0023      	movs	r3, r4
 800a53a:	6864      	ldr	r4, [r4, #4]
 800a53c:	e7a6      	b.n	800a48c <_malloc_r+0x24>
 800a53e:	9c00      	ldr	r4, [sp, #0]
 800a540:	6863      	ldr	r3, [r4, #4]
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	e7ad      	b.n	800a4a2 <_malloc_r+0x3a>
 800a546:	001a      	movs	r2, r3
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	d1fb      	bne.n	800a546 <_malloc_r+0xde>
 800a54e:	2300      	movs	r3, #0
 800a550:	e7da      	b.n	800a508 <_malloc_r+0xa0>
 800a552:	230c      	movs	r3, #12
 800a554:	0028      	movs	r0, r5
 800a556:	602b      	str	r3, [r5, #0]
 800a558:	f000 f80e 	bl	800a578 <__malloc_unlock>
 800a55c:	e7c6      	b.n	800a4ec <_malloc_r+0x84>
 800a55e:	6007      	str	r7, [r0, #0]
 800a560:	e7da      	b.n	800a518 <_malloc_r+0xb0>
 800a562:	46c0      	nop			@ (mov r8, r8)
 800a564:	2000029c 	.word	0x2000029c

0800a568 <__malloc_lock>:
 800a568:	b510      	push	{r4, lr}
 800a56a:	4802      	ldr	r0, [pc, #8]	@ (800a574 <__malloc_lock+0xc>)
 800a56c:	f000 f9ff 	bl	800a96e <__retarget_lock_acquire_recursive>
 800a570:	bd10      	pop	{r4, pc}
 800a572:	46c0      	nop			@ (mov r8, r8)
 800a574:	200003e0 	.word	0x200003e0

0800a578 <__malloc_unlock>:
 800a578:	b510      	push	{r4, lr}
 800a57a:	4802      	ldr	r0, [pc, #8]	@ (800a584 <__malloc_unlock+0xc>)
 800a57c:	f000 f9f8 	bl	800a970 <__retarget_lock_release_recursive>
 800a580:	bd10      	pop	{r4, pc}
 800a582:	46c0      	nop			@ (mov r8, r8)
 800a584:	200003e0 	.word	0x200003e0

0800a588 <std>:
 800a588:	2300      	movs	r3, #0
 800a58a:	b510      	push	{r4, lr}
 800a58c:	0004      	movs	r4, r0
 800a58e:	6003      	str	r3, [r0, #0]
 800a590:	6043      	str	r3, [r0, #4]
 800a592:	6083      	str	r3, [r0, #8]
 800a594:	8181      	strh	r1, [r0, #12]
 800a596:	6643      	str	r3, [r0, #100]	@ 0x64
 800a598:	81c2      	strh	r2, [r0, #14]
 800a59a:	6103      	str	r3, [r0, #16]
 800a59c:	6143      	str	r3, [r0, #20]
 800a59e:	6183      	str	r3, [r0, #24]
 800a5a0:	0019      	movs	r1, r3
 800a5a2:	2208      	movs	r2, #8
 800a5a4:	305c      	adds	r0, #92	@ 0x5c
 800a5a6:	f000 f92d 	bl	800a804 <memset>
 800a5aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d8 <std+0x50>)
 800a5ac:	6224      	str	r4, [r4, #32]
 800a5ae:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5dc <std+0x54>)
 800a5b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e0 <std+0x58>)
 800a5b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e4 <std+0x5c>)
 800a5ba:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e8 <std+0x60>)
 800a5be:	429c      	cmp	r4, r3
 800a5c0:	d005      	beq.n	800a5ce <std+0x46>
 800a5c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ec <std+0x64>)
 800a5c4:	429c      	cmp	r4, r3
 800a5c6:	d002      	beq.n	800a5ce <std+0x46>
 800a5c8:	4b09      	ldr	r3, [pc, #36]	@ (800a5f0 <std+0x68>)
 800a5ca:	429c      	cmp	r4, r3
 800a5cc:	d103      	bne.n	800a5d6 <std+0x4e>
 800a5ce:	0020      	movs	r0, r4
 800a5d0:	3058      	adds	r0, #88	@ 0x58
 800a5d2:	f000 f9cb 	bl	800a96c <__retarget_lock_init_recursive>
 800a5d6:	bd10      	pop	{r4, pc}
 800a5d8:	0800a751 	.word	0x0800a751
 800a5dc:	0800a779 	.word	0x0800a779
 800a5e0:	0800a7b1 	.word	0x0800a7b1
 800a5e4:	0800a7dd 	.word	0x0800a7dd
 800a5e8:	200002a0 	.word	0x200002a0
 800a5ec:	20000308 	.word	0x20000308
 800a5f0:	20000370 	.word	0x20000370

0800a5f4 <stdio_exit_handler>:
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	4a03      	ldr	r2, [pc, #12]	@ (800a604 <stdio_exit_handler+0x10>)
 800a5f8:	4903      	ldr	r1, [pc, #12]	@ (800a608 <stdio_exit_handler+0x14>)
 800a5fa:	4804      	ldr	r0, [pc, #16]	@ (800a60c <stdio_exit_handler+0x18>)
 800a5fc:	f000 f87c 	bl	800a6f8 <_fwalk_sglue>
 800a600:	bd10      	pop	{r4, pc}
 800a602:	46c0      	nop			@ (mov r8, r8)
 800a604:	20000060 	.word	0x20000060
 800a608:	0800b0b9 	.word	0x0800b0b9
 800a60c:	20000070 	.word	0x20000070

0800a610 <cleanup_stdio>:
 800a610:	6841      	ldr	r1, [r0, #4]
 800a612:	4b0b      	ldr	r3, [pc, #44]	@ (800a640 <cleanup_stdio+0x30>)
 800a614:	b510      	push	{r4, lr}
 800a616:	0004      	movs	r4, r0
 800a618:	4299      	cmp	r1, r3
 800a61a:	d001      	beq.n	800a620 <cleanup_stdio+0x10>
 800a61c:	f000 fd4c 	bl	800b0b8 <_fflush_r>
 800a620:	68a1      	ldr	r1, [r4, #8]
 800a622:	4b08      	ldr	r3, [pc, #32]	@ (800a644 <cleanup_stdio+0x34>)
 800a624:	4299      	cmp	r1, r3
 800a626:	d002      	beq.n	800a62e <cleanup_stdio+0x1e>
 800a628:	0020      	movs	r0, r4
 800a62a:	f000 fd45 	bl	800b0b8 <_fflush_r>
 800a62e:	68e1      	ldr	r1, [r4, #12]
 800a630:	4b05      	ldr	r3, [pc, #20]	@ (800a648 <cleanup_stdio+0x38>)
 800a632:	4299      	cmp	r1, r3
 800a634:	d002      	beq.n	800a63c <cleanup_stdio+0x2c>
 800a636:	0020      	movs	r0, r4
 800a638:	f000 fd3e 	bl	800b0b8 <_fflush_r>
 800a63c:	bd10      	pop	{r4, pc}
 800a63e:	46c0      	nop			@ (mov r8, r8)
 800a640:	200002a0 	.word	0x200002a0
 800a644:	20000308 	.word	0x20000308
 800a648:	20000370 	.word	0x20000370

0800a64c <global_stdio_init.part.0>:
 800a64c:	b510      	push	{r4, lr}
 800a64e:	4b09      	ldr	r3, [pc, #36]	@ (800a674 <global_stdio_init.part.0+0x28>)
 800a650:	4a09      	ldr	r2, [pc, #36]	@ (800a678 <global_stdio_init.part.0+0x2c>)
 800a652:	2104      	movs	r1, #4
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	4809      	ldr	r0, [pc, #36]	@ (800a67c <global_stdio_init.part.0+0x30>)
 800a658:	2200      	movs	r2, #0
 800a65a:	f7ff ff95 	bl	800a588 <std>
 800a65e:	2201      	movs	r2, #1
 800a660:	2109      	movs	r1, #9
 800a662:	4807      	ldr	r0, [pc, #28]	@ (800a680 <global_stdio_init.part.0+0x34>)
 800a664:	f7ff ff90 	bl	800a588 <std>
 800a668:	2202      	movs	r2, #2
 800a66a:	2112      	movs	r1, #18
 800a66c:	4805      	ldr	r0, [pc, #20]	@ (800a684 <global_stdio_init.part.0+0x38>)
 800a66e:	f7ff ff8b 	bl	800a588 <std>
 800a672:	bd10      	pop	{r4, pc}
 800a674:	200003d8 	.word	0x200003d8
 800a678:	0800a5f5 	.word	0x0800a5f5
 800a67c:	200002a0 	.word	0x200002a0
 800a680:	20000308 	.word	0x20000308
 800a684:	20000370 	.word	0x20000370

0800a688 <__sfp_lock_acquire>:
 800a688:	b510      	push	{r4, lr}
 800a68a:	4802      	ldr	r0, [pc, #8]	@ (800a694 <__sfp_lock_acquire+0xc>)
 800a68c:	f000 f96f 	bl	800a96e <__retarget_lock_acquire_recursive>
 800a690:	bd10      	pop	{r4, pc}
 800a692:	46c0      	nop			@ (mov r8, r8)
 800a694:	200003e1 	.word	0x200003e1

0800a698 <__sfp_lock_release>:
 800a698:	b510      	push	{r4, lr}
 800a69a:	4802      	ldr	r0, [pc, #8]	@ (800a6a4 <__sfp_lock_release+0xc>)
 800a69c:	f000 f968 	bl	800a970 <__retarget_lock_release_recursive>
 800a6a0:	bd10      	pop	{r4, pc}
 800a6a2:	46c0      	nop			@ (mov r8, r8)
 800a6a4:	200003e1 	.word	0x200003e1

0800a6a8 <__sinit>:
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	0004      	movs	r4, r0
 800a6ac:	f7ff ffec 	bl	800a688 <__sfp_lock_acquire>
 800a6b0:	6a23      	ldr	r3, [r4, #32]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <__sinit+0x14>
 800a6b6:	f7ff ffef 	bl	800a698 <__sfp_lock_release>
 800a6ba:	bd10      	pop	{r4, pc}
 800a6bc:	4b04      	ldr	r3, [pc, #16]	@ (800a6d0 <__sinit+0x28>)
 800a6be:	6223      	str	r3, [r4, #32]
 800a6c0:	4b04      	ldr	r3, [pc, #16]	@ (800a6d4 <__sinit+0x2c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1f6      	bne.n	800a6b6 <__sinit+0xe>
 800a6c8:	f7ff ffc0 	bl	800a64c <global_stdio_init.part.0>
 800a6cc:	e7f3      	b.n	800a6b6 <__sinit+0xe>
 800a6ce:	46c0      	nop			@ (mov r8, r8)
 800a6d0:	0800a611 	.word	0x0800a611
 800a6d4:	200003d8 	.word	0x200003d8

0800a6d8 <fiprintf>:
 800a6d8:	b40e      	push	{r1, r2, r3}
 800a6da:	b517      	push	{r0, r1, r2, r4, lr}
 800a6dc:	4c05      	ldr	r4, [pc, #20]	@ (800a6f4 <fiprintf+0x1c>)
 800a6de:	ab05      	add	r3, sp, #20
 800a6e0:	cb04      	ldmia	r3!, {r2}
 800a6e2:	0001      	movs	r1, r0
 800a6e4:	6820      	ldr	r0, [r4, #0]
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	f000 f9c6 	bl	800aa78 <_vfiprintf_r>
 800a6ec:	bc1e      	pop	{r1, r2, r3, r4}
 800a6ee:	bc08      	pop	{r3}
 800a6f0:	b003      	add	sp, #12
 800a6f2:	4718      	bx	r3
 800a6f4:	2000006c 	.word	0x2000006c

0800a6f8 <_fwalk_sglue>:
 800a6f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6fa:	0014      	movs	r4, r2
 800a6fc:	2600      	movs	r6, #0
 800a6fe:	9000      	str	r0, [sp, #0]
 800a700:	9101      	str	r1, [sp, #4]
 800a702:	68a5      	ldr	r5, [r4, #8]
 800a704:	6867      	ldr	r7, [r4, #4]
 800a706:	3f01      	subs	r7, #1
 800a708:	d504      	bpl.n	800a714 <_fwalk_sglue+0x1c>
 800a70a:	6824      	ldr	r4, [r4, #0]
 800a70c:	2c00      	cmp	r4, #0
 800a70e:	d1f8      	bne.n	800a702 <_fwalk_sglue+0xa>
 800a710:	0030      	movs	r0, r6
 800a712:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a714:	89ab      	ldrh	r3, [r5, #12]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d908      	bls.n	800a72c <_fwalk_sglue+0x34>
 800a71a:	220e      	movs	r2, #14
 800a71c:	5eab      	ldrsh	r3, [r5, r2]
 800a71e:	3301      	adds	r3, #1
 800a720:	d004      	beq.n	800a72c <_fwalk_sglue+0x34>
 800a722:	0029      	movs	r1, r5
 800a724:	9800      	ldr	r0, [sp, #0]
 800a726:	9b01      	ldr	r3, [sp, #4]
 800a728:	4798      	blx	r3
 800a72a:	4306      	orrs	r6, r0
 800a72c:	3568      	adds	r5, #104	@ 0x68
 800a72e:	e7ea      	b.n	800a706 <_fwalk_sglue+0xe>

0800a730 <iprintf>:
 800a730:	b40f      	push	{r0, r1, r2, r3}
 800a732:	b507      	push	{r0, r1, r2, lr}
 800a734:	4905      	ldr	r1, [pc, #20]	@ (800a74c <iprintf+0x1c>)
 800a736:	ab04      	add	r3, sp, #16
 800a738:	6808      	ldr	r0, [r1, #0]
 800a73a:	cb04      	ldmia	r3!, {r2}
 800a73c:	6881      	ldr	r1, [r0, #8]
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	f000 f99a 	bl	800aa78 <_vfiprintf_r>
 800a744:	b003      	add	sp, #12
 800a746:	bc08      	pop	{r3}
 800a748:	b004      	add	sp, #16
 800a74a:	4718      	bx	r3
 800a74c:	2000006c 	.word	0x2000006c

0800a750 <__sread>:
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	000c      	movs	r4, r1
 800a754:	250e      	movs	r5, #14
 800a756:	5f49      	ldrsh	r1, [r1, r5]
 800a758:	f000 f8a4 	bl	800a8a4 <_read_r>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	db03      	blt.n	800a768 <__sread+0x18>
 800a760:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a762:	181b      	adds	r3, r3, r0
 800a764:	6563      	str	r3, [r4, #84]	@ 0x54
 800a766:	bd70      	pop	{r4, r5, r6, pc}
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	4a02      	ldr	r2, [pc, #8]	@ (800a774 <__sread+0x24>)
 800a76c:	4013      	ands	r3, r2
 800a76e:	81a3      	strh	r3, [r4, #12]
 800a770:	e7f9      	b.n	800a766 <__sread+0x16>
 800a772:	46c0      	nop			@ (mov r8, r8)
 800a774:	ffffefff 	.word	0xffffefff

0800a778 <__swrite>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	001f      	movs	r7, r3
 800a77c:	898b      	ldrh	r3, [r1, #12]
 800a77e:	0005      	movs	r5, r0
 800a780:	000c      	movs	r4, r1
 800a782:	0016      	movs	r6, r2
 800a784:	05db      	lsls	r3, r3, #23
 800a786:	d505      	bpl.n	800a794 <__swrite+0x1c>
 800a788:	230e      	movs	r3, #14
 800a78a:	5ec9      	ldrsh	r1, [r1, r3]
 800a78c:	2200      	movs	r2, #0
 800a78e:	2302      	movs	r3, #2
 800a790:	f000 f874 	bl	800a87c <_lseek_r>
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	4a05      	ldr	r2, [pc, #20]	@ (800a7ac <__swrite+0x34>)
 800a798:	0028      	movs	r0, r5
 800a79a:	4013      	ands	r3, r2
 800a79c:	81a3      	strh	r3, [r4, #12]
 800a79e:	0032      	movs	r2, r6
 800a7a0:	230e      	movs	r3, #14
 800a7a2:	5ee1      	ldrsh	r1, [r4, r3]
 800a7a4:	003b      	movs	r3, r7
 800a7a6:	f000 f8a3 	bl	800a8f0 <_write_r>
 800a7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ac:	ffffefff 	.word	0xffffefff

0800a7b0 <__sseek>:
 800a7b0:	b570      	push	{r4, r5, r6, lr}
 800a7b2:	000c      	movs	r4, r1
 800a7b4:	250e      	movs	r5, #14
 800a7b6:	5f49      	ldrsh	r1, [r1, r5]
 800a7b8:	f000 f860 	bl	800a87c <_lseek_r>
 800a7bc:	89a3      	ldrh	r3, [r4, #12]
 800a7be:	1c42      	adds	r2, r0, #1
 800a7c0:	d103      	bne.n	800a7ca <__sseek+0x1a>
 800a7c2:	4a05      	ldr	r2, [pc, #20]	@ (800a7d8 <__sseek+0x28>)
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	81a3      	strh	r3, [r4, #12]
 800a7c8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ca:	2280      	movs	r2, #128	@ 0x80
 800a7cc:	0152      	lsls	r2, r2, #5
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7d4:	e7f8      	b.n	800a7c8 <__sseek+0x18>
 800a7d6:	46c0      	nop			@ (mov r8, r8)
 800a7d8:	ffffefff 	.word	0xffffefff

0800a7dc <__sclose>:
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	230e      	movs	r3, #14
 800a7e0:	5ec9      	ldrsh	r1, [r1, r3]
 800a7e2:	f000 f839 	bl	800a858 <_close_r>
 800a7e6:	bd10      	pop	{r4, pc}

0800a7e8 <memcmp>:
 800a7e8:	b530      	push	{r4, r5, lr}
 800a7ea:	2400      	movs	r4, #0
 800a7ec:	3901      	subs	r1, #1
 800a7ee:	42a2      	cmp	r2, r4
 800a7f0:	d101      	bne.n	800a7f6 <memcmp+0xe>
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	e005      	b.n	800a802 <memcmp+0x1a>
 800a7f6:	5d03      	ldrb	r3, [r0, r4]
 800a7f8:	3401      	adds	r4, #1
 800a7fa:	5d0d      	ldrb	r5, [r1, r4]
 800a7fc:	42ab      	cmp	r3, r5
 800a7fe:	d0f6      	beq.n	800a7ee <memcmp+0x6>
 800a800:	1b58      	subs	r0, r3, r5
 800a802:	bd30      	pop	{r4, r5, pc}

0800a804 <memset>:
 800a804:	0003      	movs	r3, r0
 800a806:	1882      	adds	r2, r0, r2
 800a808:	4293      	cmp	r3, r2
 800a80a:	d100      	bne.n	800a80e <memset+0xa>
 800a80c:	4770      	bx	lr
 800a80e:	7019      	strb	r1, [r3, #0]
 800a810:	3301      	adds	r3, #1
 800a812:	e7f9      	b.n	800a808 <memset+0x4>

0800a814 <strcspn>:
 800a814:	0003      	movs	r3, r0
 800a816:	b530      	push	{r4, r5, lr}
 800a818:	781c      	ldrb	r4, [r3, #0]
 800a81a:	2c00      	cmp	r4, #0
 800a81c:	d109      	bne.n	800a832 <strcspn+0x1e>
 800a81e:	1a18      	subs	r0, r3, r0
 800a820:	bd30      	pop	{r4, r5, pc}
 800a822:	42a5      	cmp	r5, r4
 800a824:	d0fb      	beq.n	800a81e <strcspn+0xa>
 800a826:	3201      	adds	r2, #1
 800a828:	7815      	ldrb	r5, [r2, #0]
 800a82a:	2d00      	cmp	r5, #0
 800a82c:	d1f9      	bne.n	800a822 <strcspn+0xe>
 800a82e:	3301      	adds	r3, #1
 800a830:	e7f2      	b.n	800a818 <strcspn+0x4>
 800a832:	000a      	movs	r2, r1
 800a834:	e7f8      	b.n	800a828 <strcspn+0x14>

0800a836 <strspn>:
 800a836:	0003      	movs	r3, r0
 800a838:	b530      	push	{r4, r5, lr}
 800a83a:	781c      	ldrb	r4, [r3, #0]
 800a83c:	2c00      	cmp	r4, #0
 800a83e:	d007      	beq.n	800a850 <strspn+0x1a>
 800a840:	000a      	movs	r2, r1
 800a842:	e002      	b.n	800a84a <strspn+0x14>
 800a844:	42a5      	cmp	r5, r4
 800a846:	d005      	beq.n	800a854 <strspn+0x1e>
 800a848:	3201      	adds	r2, #1
 800a84a:	7815      	ldrb	r5, [r2, #0]
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	d1f9      	bne.n	800a844 <strspn+0xe>
 800a850:	1a18      	subs	r0, r3, r0
 800a852:	bd30      	pop	{r4, r5, pc}
 800a854:	3301      	adds	r3, #1
 800a856:	e7f0      	b.n	800a83a <strspn+0x4>

0800a858 <_close_r>:
 800a858:	2300      	movs	r3, #0
 800a85a:	b570      	push	{r4, r5, r6, lr}
 800a85c:	4d06      	ldr	r5, [pc, #24]	@ (800a878 <_close_r+0x20>)
 800a85e:	0004      	movs	r4, r0
 800a860:	0008      	movs	r0, r1
 800a862:	602b      	str	r3, [r5, #0]
 800a864:	f7fd fcaf 	bl	80081c6 <_close>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	d103      	bne.n	800a874 <_close_r+0x1c>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d000      	beq.n	800a874 <_close_r+0x1c>
 800a872:	6023      	str	r3, [r4, #0]
 800a874:	bd70      	pop	{r4, r5, r6, pc}
 800a876:	46c0      	nop			@ (mov r8, r8)
 800a878:	200003dc 	.word	0x200003dc

0800a87c <_lseek_r>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	0004      	movs	r4, r0
 800a880:	0008      	movs	r0, r1
 800a882:	0011      	movs	r1, r2
 800a884:	001a      	movs	r2, r3
 800a886:	2300      	movs	r3, #0
 800a888:	4d05      	ldr	r5, [pc, #20]	@ (800a8a0 <_lseek_r+0x24>)
 800a88a:	602b      	str	r3, [r5, #0]
 800a88c:	f7fd fcbc 	bl	8008208 <_lseek>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d103      	bne.n	800a89c <_lseek_r+0x20>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d000      	beq.n	800a89c <_lseek_r+0x20>
 800a89a:	6023      	str	r3, [r4, #0]
 800a89c:	bd70      	pop	{r4, r5, r6, pc}
 800a89e:	46c0      	nop			@ (mov r8, r8)
 800a8a0:	200003dc 	.word	0x200003dc

0800a8a4 <_read_r>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	0004      	movs	r4, r0
 800a8a8:	0008      	movs	r0, r1
 800a8aa:	0011      	movs	r1, r2
 800a8ac:	001a      	movs	r2, r3
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	4d05      	ldr	r5, [pc, #20]	@ (800a8c8 <_read_r+0x24>)
 800a8b2:	602b      	str	r3, [r5, #0]
 800a8b4:	f7fd fc4e 	bl	8008154 <_read>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d103      	bne.n	800a8c4 <_read_r+0x20>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d000      	beq.n	800a8c4 <_read_r+0x20>
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
 800a8c6:	46c0      	nop			@ (mov r8, r8)
 800a8c8:	200003dc 	.word	0x200003dc

0800a8cc <_sbrk_r>:
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	b570      	push	{r4, r5, r6, lr}
 800a8d0:	4d06      	ldr	r5, [pc, #24]	@ (800a8ec <_sbrk_r+0x20>)
 800a8d2:	0004      	movs	r4, r0
 800a8d4:	0008      	movs	r0, r1
 800a8d6:	602b      	str	r3, [r5, #0]
 800a8d8:	f7fd fca2 	bl	8008220 <_sbrk>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d103      	bne.n	800a8e8 <_sbrk_r+0x1c>
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d000      	beq.n	800a8e8 <_sbrk_r+0x1c>
 800a8e6:	6023      	str	r3, [r4, #0]
 800a8e8:	bd70      	pop	{r4, r5, r6, pc}
 800a8ea:	46c0      	nop			@ (mov r8, r8)
 800a8ec:	200003dc 	.word	0x200003dc

0800a8f0 <_write_r>:
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	0004      	movs	r4, r0
 800a8f4:	0008      	movs	r0, r1
 800a8f6:	0011      	movs	r1, r2
 800a8f8:	001a      	movs	r2, r3
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	4d05      	ldr	r5, [pc, #20]	@ (800a914 <_write_r+0x24>)
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7fd fc45 	bl	800818e <_write>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d103      	bne.n	800a910 <_write_r+0x20>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d000      	beq.n	800a910 <_write_r+0x20>
 800a90e:	6023      	str	r3, [r4, #0]
 800a910:	bd70      	pop	{r4, r5, r6, pc}
 800a912:	46c0      	nop			@ (mov r8, r8)
 800a914:	200003dc 	.word	0x200003dc

0800a918 <__errno>:
 800a918:	4b01      	ldr	r3, [pc, #4]	@ (800a920 <__errno+0x8>)
 800a91a:	6818      	ldr	r0, [r3, #0]
 800a91c:	4770      	bx	lr
 800a91e:	46c0      	nop			@ (mov r8, r8)
 800a920:	2000006c 	.word	0x2000006c

0800a924 <__libc_init_array>:
 800a924:	b570      	push	{r4, r5, r6, lr}
 800a926:	2600      	movs	r6, #0
 800a928:	4c0c      	ldr	r4, [pc, #48]	@ (800a95c <__libc_init_array+0x38>)
 800a92a:	4d0d      	ldr	r5, [pc, #52]	@ (800a960 <__libc_init_array+0x3c>)
 800a92c:	1b64      	subs	r4, r4, r5
 800a92e:	10a4      	asrs	r4, r4, #2
 800a930:	42a6      	cmp	r6, r4
 800a932:	d109      	bne.n	800a948 <__libc_init_array+0x24>
 800a934:	2600      	movs	r6, #0
 800a936:	f000 fd71 	bl	800b41c <_init>
 800a93a:	4c0a      	ldr	r4, [pc, #40]	@ (800a964 <__libc_init_array+0x40>)
 800a93c:	4d0a      	ldr	r5, [pc, #40]	@ (800a968 <__libc_init_array+0x44>)
 800a93e:	1b64      	subs	r4, r4, r5
 800a940:	10a4      	asrs	r4, r4, #2
 800a942:	42a6      	cmp	r6, r4
 800a944:	d105      	bne.n	800a952 <__libc_init_array+0x2e>
 800a946:	bd70      	pop	{r4, r5, r6, pc}
 800a948:	00b3      	lsls	r3, r6, #2
 800a94a:	58eb      	ldr	r3, [r5, r3]
 800a94c:	4798      	blx	r3
 800a94e:	3601      	adds	r6, #1
 800a950:	e7ee      	b.n	800a930 <__libc_init_array+0xc>
 800a952:	00b3      	lsls	r3, r6, #2
 800a954:	58eb      	ldr	r3, [r5, r3]
 800a956:	4798      	blx	r3
 800a958:	3601      	adds	r6, #1
 800a95a:	e7f2      	b.n	800a942 <__libc_init_array+0x1e>
 800a95c:	0800c534 	.word	0x0800c534
 800a960:	0800c534 	.word	0x0800c534
 800a964:	0800c538 	.word	0x0800c538
 800a968:	0800c534 	.word	0x0800c534

0800a96c <__retarget_lock_init_recursive>:
 800a96c:	4770      	bx	lr

0800a96e <__retarget_lock_acquire_recursive>:
 800a96e:	4770      	bx	lr

0800a970 <__retarget_lock_release_recursive>:
 800a970:	4770      	bx	lr

0800a972 <memcpy>:
 800a972:	2300      	movs	r3, #0
 800a974:	b510      	push	{r4, lr}
 800a976:	429a      	cmp	r2, r3
 800a978:	d100      	bne.n	800a97c <memcpy+0xa>
 800a97a:	bd10      	pop	{r4, pc}
 800a97c:	5ccc      	ldrb	r4, [r1, r3]
 800a97e:	54c4      	strb	r4, [r0, r3]
 800a980:	3301      	adds	r3, #1
 800a982:	e7f8      	b.n	800a976 <memcpy+0x4>

0800a984 <abort>:
 800a984:	2006      	movs	r0, #6
 800a986:	b510      	push	{r4, lr}
 800a988:	f000 fc8c 	bl	800b2a4 <raise>
 800a98c:	2001      	movs	r0, #1
 800a98e:	f7fd fbd4 	bl	800813a <_exit>
	...

0800a994 <_free_r>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	0005      	movs	r5, r0
 800a998:	1e0c      	subs	r4, r1, #0
 800a99a:	d010      	beq.n	800a9be <_free_r+0x2a>
 800a99c:	3c04      	subs	r4, #4
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	da00      	bge.n	800a9a6 <_free_r+0x12>
 800a9a4:	18e4      	adds	r4, r4, r3
 800a9a6:	0028      	movs	r0, r5
 800a9a8:	f7ff fdde 	bl	800a568 <__malloc_lock>
 800a9ac:	4a1d      	ldr	r2, [pc, #116]	@ (800aa24 <_free_r+0x90>)
 800a9ae:	6813      	ldr	r3, [r2, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d105      	bne.n	800a9c0 <_free_r+0x2c>
 800a9b4:	6063      	str	r3, [r4, #4]
 800a9b6:	6014      	str	r4, [r2, #0]
 800a9b8:	0028      	movs	r0, r5
 800a9ba:	f7ff fddd 	bl	800a578 <__malloc_unlock>
 800a9be:	bd70      	pop	{r4, r5, r6, pc}
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	d908      	bls.n	800a9d6 <_free_r+0x42>
 800a9c4:	6820      	ldr	r0, [r4, #0]
 800a9c6:	1821      	adds	r1, r4, r0
 800a9c8:	428b      	cmp	r3, r1
 800a9ca:	d1f3      	bne.n	800a9b4 <_free_r+0x20>
 800a9cc:	6819      	ldr	r1, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	1809      	adds	r1, r1, r0
 800a9d2:	6021      	str	r1, [r4, #0]
 800a9d4:	e7ee      	b.n	800a9b4 <_free_r+0x20>
 800a9d6:	001a      	movs	r2, r3
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <_free_r+0x4e>
 800a9de:	42a3      	cmp	r3, r4
 800a9e0:	d9f9      	bls.n	800a9d6 <_free_r+0x42>
 800a9e2:	6811      	ldr	r1, [r2, #0]
 800a9e4:	1850      	adds	r0, r2, r1
 800a9e6:	42a0      	cmp	r0, r4
 800a9e8:	d10b      	bne.n	800aa02 <_free_r+0x6e>
 800a9ea:	6820      	ldr	r0, [r4, #0]
 800a9ec:	1809      	adds	r1, r1, r0
 800a9ee:	1850      	adds	r0, r2, r1
 800a9f0:	6011      	str	r1, [r2, #0]
 800a9f2:	4283      	cmp	r3, r0
 800a9f4:	d1e0      	bne.n	800a9b8 <_free_r+0x24>
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	1841      	adds	r1, r0, r1
 800a9fc:	6011      	str	r1, [r2, #0]
 800a9fe:	6053      	str	r3, [r2, #4]
 800aa00:	e7da      	b.n	800a9b8 <_free_r+0x24>
 800aa02:	42a0      	cmp	r0, r4
 800aa04:	d902      	bls.n	800aa0c <_free_r+0x78>
 800aa06:	230c      	movs	r3, #12
 800aa08:	602b      	str	r3, [r5, #0]
 800aa0a:	e7d5      	b.n	800a9b8 <_free_r+0x24>
 800aa0c:	6820      	ldr	r0, [r4, #0]
 800aa0e:	1821      	adds	r1, r4, r0
 800aa10:	428b      	cmp	r3, r1
 800aa12:	d103      	bne.n	800aa1c <_free_r+0x88>
 800aa14:	6819      	ldr	r1, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	1809      	adds	r1, r1, r0
 800aa1a:	6021      	str	r1, [r4, #0]
 800aa1c:	6063      	str	r3, [r4, #4]
 800aa1e:	6054      	str	r4, [r2, #4]
 800aa20:	e7ca      	b.n	800a9b8 <_free_r+0x24>
 800aa22:	46c0      	nop			@ (mov r8, r8)
 800aa24:	2000029c 	.word	0x2000029c

0800aa28 <__sfputc_r>:
 800aa28:	6893      	ldr	r3, [r2, #8]
 800aa2a:	b510      	push	{r4, lr}
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	6093      	str	r3, [r2, #8]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	da04      	bge.n	800aa3e <__sfputc_r+0x16>
 800aa34:	6994      	ldr	r4, [r2, #24]
 800aa36:	42a3      	cmp	r3, r4
 800aa38:	db07      	blt.n	800aa4a <__sfputc_r+0x22>
 800aa3a:	290a      	cmp	r1, #10
 800aa3c:	d005      	beq.n	800aa4a <__sfputc_r+0x22>
 800aa3e:	6813      	ldr	r3, [r2, #0]
 800aa40:	1c58      	adds	r0, r3, #1
 800aa42:	6010      	str	r0, [r2, #0]
 800aa44:	7019      	strb	r1, [r3, #0]
 800aa46:	0008      	movs	r0, r1
 800aa48:	bd10      	pop	{r4, pc}
 800aa4a:	f000 fb60 	bl	800b10e <__swbuf_r>
 800aa4e:	0001      	movs	r1, r0
 800aa50:	e7f9      	b.n	800aa46 <__sfputc_r+0x1e>

0800aa52 <__sfputs_r>:
 800aa52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa54:	0006      	movs	r6, r0
 800aa56:	000f      	movs	r7, r1
 800aa58:	0014      	movs	r4, r2
 800aa5a:	18d5      	adds	r5, r2, r3
 800aa5c:	42ac      	cmp	r4, r5
 800aa5e:	d101      	bne.n	800aa64 <__sfputs_r+0x12>
 800aa60:	2000      	movs	r0, #0
 800aa62:	e007      	b.n	800aa74 <__sfputs_r+0x22>
 800aa64:	7821      	ldrb	r1, [r4, #0]
 800aa66:	003a      	movs	r2, r7
 800aa68:	0030      	movs	r0, r6
 800aa6a:	f7ff ffdd 	bl	800aa28 <__sfputc_r>
 800aa6e:	3401      	adds	r4, #1
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d1f3      	bne.n	800aa5c <__sfputs_r+0xa>
 800aa74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa78 <_vfiprintf_r>:
 800aa78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7a:	b0a1      	sub	sp, #132	@ 0x84
 800aa7c:	000f      	movs	r7, r1
 800aa7e:	0015      	movs	r5, r2
 800aa80:	001e      	movs	r6, r3
 800aa82:	9003      	str	r0, [sp, #12]
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d004      	beq.n	800aa92 <_vfiprintf_r+0x1a>
 800aa88:	6a03      	ldr	r3, [r0, #32]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <_vfiprintf_r+0x1a>
 800aa8e:	f7ff fe0b 	bl	800a6a8 <__sinit>
 800aa92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa94:	07db      	lsls	r3, r3, #31
 800aa96:	d405      	bmi.n	800aaa4 <_vfiprintf_r+0x2c>
 800aa98:	89bb      	ldrh	r3, [r7, #12]
 800aa9a:	059b      	lsls	r3, r3, #22
 800aa9c:	d402      	bmi.n	800aaa4 <_vfiprintf_r+0x2c>
 800aa9e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800aaa0:	f7ff ff65 	bl	800a96e <__retarget_lock_acquire_recursive>
 800aaa4:	89bb      	ldrh	r3, [r7, #12]
 800aaa6:	071b      	lsls	r3, r3, #28
 800aaa8:	d502      	bpl.n	800aab0 <_vfiprintf_r+0x38>
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d113      	bne.n	800aad8 <_vfiprintf_r+0x60>
 800aab0:	0039      	movs	r1, r7
 800aab2:	9803      	ldr	r0, [sp, #12]
 800aab4:	f000 fb6e 	bl	800b194 <__swsetup_r>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d00d      	beq.n	800aad8 <_vfiprintf_r+0x60>
 800aabc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aabe:	07db      	lsls	r3, r3, #31
 800aac0:	d503      	bpl.n	800aaca <_vfiprintf_r+0x52>
 800aac2:	2001      	movs	r0, #1
 800aac4:	4240      	negs	r0, r0
 800aac6:	b021      	add	sp, #132	@ 0x84
 800aac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaca:	89bb      	ldrh	r3, [r7, #12]
 800aacc:	059b      	lsls	r3, r3, #22
 800aace:	d4f8      	bmi.n	800aac2 <_vfiprintf_r+0x4a>
 800aad0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800aad2:	f7ff ff4d 	bl	800a970 <__retarget_lock_release_recursive>
 800aad6:	e7f4      	b.n	800aac2 <_vfiprintf_r+0x4a>
 800aad8:	2300      	movs	r3, #0
 800aada:	ac08      	add	r4, sp, #32
 800aadc:	6163      	str	r3, [r4, #20]
 800aade:	3320      	adds	r3, #32
 800aae0:	7663      	strb	r3, [r4, #25]
 800aae2:	3310      	adds	r3, #16
 800aae4:	76a3      	strb	r3, [r4, #26]
 800aae6:	9607      	str	r6, [sp, #28]
 800aae8:	002e      	movs	r6, r5
 800aaea:	7833      	ldrb	r3, [r6, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <_vfiprintf_r+0x7c>
 800aaf0:	2b25      	cmp	r3, #37	@ 0x25
 800aaf2:	d148      	bne.n	800ab86 <_vfiprintf_r+0x10e>
 800aaf4:	1b73      	subs	r3, r6, r5
 800aaf6:	9305      	str	r3, [sp, #20]
 800aaf8:	42ae      	cmp	r6, r5
 800aafa:	d00b      	beq.n	800ab14 <_vfiprintf_r+0x9c>
 800aafc:	002a      	movs	r2, r5
 800aafe:	0039      	movs	r1, r7
 800ab00:	9803      	ldr	r0, [sp, #12]
 800ab02:	f7ff ffa6 	bl	800aa52 <__sfputs_r>
 800ab06:	3001      	adds	r0, #1
 800ab08:	d100      	bne.n	800ab0c <_vfiprintf_r+0x94>
 800ab0a:	e0ae      	b.n	800ac6a <_vfiprintf_r+0x1f2>
 800ab0c:	6963      	ldr	r3, [r4, #20]
 800ab0e:	9a05      	ldr	r2, [sp, #20]
 800ab10:	189b      	adds	r3, r3, r2
 800ab12:	6163      	str	r3, [r4, #20]
 800ab14:	7833      	ldrb	r3, [r6, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d100      	bne.n	800ab1c <_vfiprintf_r+0xa4>
 800ab1a:	e0a6      	b.n	800ac6a <_vfiprintf_r+0x1f2>
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	2300      	movs	r3, #0
 800ab20:	4252      	negs	r2, r2
 800ab22:	6062      	str	r2, [r4, #4]
 800ab24:	a904      	add	r1, sp, #16
 800ab26:	3254      	adds	r2, #84	@ 0x54
 800ab28:	1852      	adds	r2, r2, r1
 800ab2a:	1c75      	adds	r5, r6, #1
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	60e3      	str	r3, [r4, #12]
 800ab30:	60a3      	str	r3, [r4, #8]
 800ab32:	7013      	strb	r3, [r2, #0]
 800ab34:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ab36:	4b59      	ldr	r3, [pc, #356]	@ (800ac9c <_vfiprintf_r+0x224>)
 800ab38:	2205      	movs	r2, #5
 800ab3a:	0018      	movs	r0, r3
 800ab3c:	7829      	ldrb	r1, [r5, #0]
 800ab3e:	9305      	str	r3, [sp, #20]
 800ab40:	f000 fbd0 	bl	800b2e4 <memchr>
 800ab44:	1c6e      	adds	r6, r5, #1
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d11f      	bne.n	800ab8a <_vfiprintf_r+0x112>
 800ab4a:	6822      	ldr	r2, [r4, #0]
 800ab4c:	06d3      	lsls	r3, r2, #27
 800ab4e:	d504      	bpl.n	800ab5a <_vfiprintf_r+0xe2>
 800ab50:	2353      	movs	r3, #83	@ 0x53
 800ab52:	a904      	add	r1, sp, #16
 800ab54:	185b      	adds	r3, r3, r1
 800ab56:	2120      	movs	r1, #32
 800ab58:	7019      	strb	r1, [r3, #0]
 800ab5a:	0713      	lsls	r3, r2, #28
 800ab5c:	d504      	bpl.n	800ab68 <_vfiprintf_r+0xf0>
 800ab5e:	2353      	movs	r3, #83	@ 0x53
 800ab60:	a904      	add	r1, sp, #16
 800ab62:	185b      	adds	r3, r3, r1
 800ab64:	212b      	movs	r1, #43	@ 0x2b
 800ab66:	7019      	strb	r1, [r3, #0]
 800ab68:	782b      	ldrb	r3, [r5, #0]
 800ab6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab6c:	d016      	beq.n	800ab9c <_vfiprintf_r+0x124>
 800ab6e:	002e      	movs	r6, r5
 800ab70:	2100      	movs	r1, #0
 800ab72:	200a      	movs	r0, #10
 800ab74:	68e3      	ldr	r3, [r4, #12]
 800ab76:	7832      	ldrb	r2, [r6, #0]
 800ab78:	1c75      	adds	r5, r6, #1
 800ab7a:	3a30      	subs	r2, #48	@ 0x30
 800ab7c:	2a09      	cmp	r2, #9
 800ab7e:	d950      	bls.n	800ac22 <_vfiprintf_r+0x1aa>
 800ab80:	2900      	cmp	r1, #0
 800ab82:	d111      	bne.n	800aba8 <_vfiprintf_r+0x130>
 800ab84:	e017      	b.n	800abb6 <_vfiprintf_r+0x13e>
 800ab86:	3601      	adds	r6, #1
 800ab88:	e7af      	b.n	800aaea <_vfiprintf_r+0x72>
 800ab8a:	9b05      	ldr	r3, [sp, #20]
 800ab8c:	6822      	ldr	r2, [r4, #0]
 800ab8e:	1ac0      	subs	r0, r0, r3
 800ab90:	2301      	movs	r3, #1
 800ab92:	4083      	lsls	r3, r0
 800ab94:	4313      	orrs	r3, r2
 800ab96:	0035      	movs	r5, r6
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	e7cc      	b.n	800ab36 <_vfiprintf_r+0xbe>
 800ab9c:	9b07      	ldr	r3, [sp, #28]
 800ab9e:	1d19      	adds	r1, r3, #4
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	9107      	str	r1, [sp, #28]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	db01      	blt.n	800abac <_vfiprintf_r+0x134>
 800aba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abaa:	e004      	b.n	800abb6 <_vfiprintf_r+0x13e>
 800abac:	425b      	negs	r3, r3
 800abae:	60e3      	str	r3, [r4, #12]
 800abb0:	2302      	movs	r3, #2
 800abb2:	4313      	orrs	r3, r2
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	7833      	ldrb	r3, [r6, #0]
 800abb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800abba:	d10c      	bne.n	800abd6 <_vfiprintf_r+0x15e>
 800abbc:	7873      	ldrb	r3, [r6, #1]
 800abbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800abc0:	d134      	bne.n	800ac2c <_vfiprintf_r+0x1b4>
 800abc2:	9b07      	ldr	r3, [sp, #28]
 800abc4:	3602      	adds	r6, #2
 800abc6:	1d1a      	adds	r2, r3, #4
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	9207      	str	r2, [sp, #28]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	da01      	bge.n	800abd4 <_vfiprintf_r+0x15c>
 800abd0:	2301      	movs	r3, #1
 800abd2:	425b      	negs	r3, r3
 800abd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd6:	4d32      	ldr	r5, [pc, #200]	@ (800aca0 <_vfiprintf_r+0x228>)
 800abd8:	2203      	movs	r2, #3
 800abda:	0028      	movs	r0, r5
 800abdc:	7831      	ldrb	r1, [r6, #0]
 800abde:	f000 fb81 	bl	800b2e4 <memchr>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d006      	beq.n	800abf4 <_vfiprintf_r+0x17c>
 800abe6:	2340      	movs	r3, #64	@ 0x40
 800abe8:	1b40      	subs	r0, r0, r5
 800abea:	4083      	lsls	r3, r0
 800abec:	6822      	ldr	r2, [r4, #0]
 800abee:	3601      	adds	r6, #1
 800abf0:	4313      	orrs	r3, r2
 800abf2:	6023      	str	r3, [r4, #0]
 800abf4:	7831      	ldrb	r1, [r6, #0]
 800abf6:	2206      	movs	r2, #6
 800abf8:	482a      	ldr	r0, [pc, #168]	@ (800aca4 <_vfiprintf_r+0x22c>)
 800abfa:	1c75      	adds	r5, r6, #1
 800abfc:	7621      	strb	r1, [r4, #24]
 800abfe:	f000 fb71 	bl	800b2e4 <memchr>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d040      	beq.n	800ac88 <_vfiprintf_r+0x210>
 800ac06:	4b28      	ldr	r3, [pc, #160]	@ (800aca8 <_vfiprintf_r+0x230>)
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d122      	bne.n	800ac52 <_vfiprintf_r+0x1da>
 800ac0c:	2207      	movs	r2, #7
 800ac0e:	9b07      	ldr	r3, [sp, #28]
 800ac10:	3307      	adds	r3, #7
 800ac12:	4393      	bics	r3, r2
 800ac14:	3308      	adds	r3, #8
 800ac16:	9307      	str	r3, [sp, #28]
 800ac18:	6963      	ldr	r3, [r4, #20]
 800ac1a:	9a04      	ldr	r2, [sp, #16]
 800ac1c:	189b      	adds	r3, r3, r2
 800ac1e:	6163      	str	r3, [r4, #20]
 800ac20:	e762      	b.n	800aae8 <_vfiprintf_r+0x70>
 800ac22:	4343      	muls	r3, r0
 800ac24:	002e      	movs	r6, r5
 800ac26:	2101      	movs	r1, #1
 800ac28:	189b      	adds	r3, r3, r2
 800ac2a:	e7a4      	b.n	800ab76 <_vfiprintf_r+0xfe>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	200a      	movs	r0, #10
 800ac30:	0019      	movs	r1, r3
 800ac32:	3601      	adds	r6, #1
 800ac34:	6063      	str	r3, [r4, #4]
 800ac36:	7832      	ldrb	r2, [r6, #0]
 800ac38:	1c75      	adds	r5, r6, #1
 800ac3a:	3a30      	subs	r2, #48	@ 0x30
 800ac3c:	2a09      	cmp	r2, #9
 800ac3e:	d903      	bls.n	800ac48 <_vfiprintf_r+0x1d0>
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d0c8      	beq.n	800abd6 <_vfiprintf_r+0x15e>
 800ac44:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac46:	e7c6      	b.n	800abd6 <_vfiprintf_r+0x15e>
 800ac48:	4341      	muls	r1, r0
 800ac4a:	002e      	movs	r6, r5
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	1889      	adds	r1, r1, r2
 800ac50:	e7f1      	b.n	800ac36 <_vfiprintf_r+0x1be>
 800ac52:	aa07      	add	r2, sp, #28
 800ac54:	9200      	str	r2, [sp, #0]
 800ac56:	0021      	movs	r1, r4
 800ac58:	003a      	movs	r2, r7
 800ac5a:	4b14      	ldr	r3, [pc, #80]	@ (800acac <_vfiprintf_r+0x234>)
 800ac5c:	9803      	ldr	r0, [sp, #12]
 800ac5e:	e000      	b.n	800ac62 <_vfiprintf_r+0x1ea>
 800ac60:	bf00      	nop
 800ac62:	9004      	str	r0, [sp, #16]
 800ac64:	9b04      	ldr	r3, [sp, #16]
 800ac66:	3301      	adds	r3, #1
 800ac68:	d1d6      	bne.n	800ac18 <_vfiprintf_r+0x1a0>
 800ac6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac6c:	07db      	lsls	r3, r3, #31
 800ac6e:	d405      	bmi.n	800ac7c <_vfiprintf_r+0x204>
 800ac70:	89bb      	ldrh	r3, [r7, #12]
 800ac72:	059b      	lsls	r3, r3, #22
 800ac74:	d402      	bmi.n	800ac7c <_vfiprintf_r+0x204>
 800ac76:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ac78:	f7ff fe7a 	bl	800a970 <__retarget_lock_release_recursive>
 800ac7c:	89bb      	ldrh	r3, [r7, #12]
 800ac7e:	065b      	lsls	r3, r3, #25
 800ac80:	d500      	bpl.n	800ac84 <_vfiprintf_r+0x20c>
 800ac82:	e71e      	b.n	800aac2 <_vfiprintf_r+0x4a>
 800ac84:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ac86:	e71e      	b.n	800aac6 <_vfiprintf_r+0x4e>
 800ac88:	aa07      	add	r2, sp, #28
 800ac8a:	9200      	str	r2, [sp, #0]
 800ac8c:	0021      	movs	r1, r4
 800ac8e:	003a      	movs	r2, r7
 800ac90:	4b06      	ldr	r3, [pc, #24]	@ (800acac <_vfiprintf_r+0x234>)
 800ac92:	9803      	ldr	r0, [sp, #12]
 800ac94:	f000 f87c 	bl	800ad90 <_printf_i>
 800ac98:	e7e3      	b.n	800ac62 <_vfiprintf_r+0x1ea>
 800ac9a:	46c0      	nop			@ (mov r8, r8)
 800ac9c:	0800c500 	.word	0x0800c500
 800aca0:	0800c506 	.word	0x0800c506
 800aca4:	0800c50a 	.word	0x0800c50a
 800aca8:	00000000 	.word	0x00000000
 800acac:	0800aa53 	.word	0x0800aa53

0800acb0 <_printf_common>:
 800acb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acb2:	0016      	movs	r6, r2
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	688a      	ldr	r2, [r1, #8]
 800acb8:	690b      	ldr	r3, [r1, #16]
 800acba:	000c      	movs	r4, r1
 800acbc:	9000      	str	r0, [sp, #0]
 800acbe:	4293      	cmp	r3, r2
 800acc0:	da00      	bge.n	800acc4 <_printf_common+0x14>
 800acc2:	0013      	movs	r3, r2
 800acc4:	0022      	movs	r2, r4
 800acc6:	6033      	str	r3, [r6, #0]
 800acc8:	3243      	adds	r2, #67	@ 0x43
 800acca:	7812      	ldrb	r2, [r2, #0]
 800accc:	2a00      	cmp	r2, #0
 800acce:	d001      	beq.n	800acd4 <_printf_common+0x24>
 800acd0:	3301      	adds	r3, #1
 800acd2:	6033      	str	r3, [r6, #0]
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	069b      	lsls	r3, r3, #26
 800acd8:	d502      	bpl.n	800ace0 <_printf_common+0x30>
 800acda:	6833      	ldr	r3, [r6, #0]
 800acdc:	3302      	adds	r3, #2
 800acde:	6033      	str	r3, [r6, #0]
 800ace0:	6822      	ldr	r2, [r4, #0]
 800ace2:	2306      	movs	r3, #6
 800ace4:	0015      	movs	r5, r2
 800ace6:	401d      	ands	r5, r3
 800ace8:	421a      	tst	r2, r3
 800acea:	d027      	beq.n	800ad3c <_printf_common+0x8c>
 800acec:	0023      	movs	r3, r4
 800acee:	3343      	adds	r3, #67	@ 0x43
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	1e5a      	subs	r2, r3, #1
 800acf4:	4193      	sbcs	r3, r2
 800acf6:	6822      	ldr	r2, [r4, #0]
 800acf8:	0692      	lsls	r2, r2, #26
 800acfa:	d430      	bmi.n	800ad5e <_printf_common+0xae>
 800acfc:	0022      	movs	r2, r4
 800acfe:	9901      	ldr	r1, [sp, #4]
 800ad00:	9800      	ldr	r0, [sp, #0]
 800ad02:	9d08      	ldr	r5, [sp, #32]
 800ad04:	3243      	adds	r2, #67	@ 0x43
 800ad06:	47a8      	blx	r5
 800ad08:	3001      	adds	r0, #1
 800ad0a:	d025      	beq.n	800ad58 <_printf_common+0xa8>
 800ad0c:	2206      	movs	r2, #6
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	2500      	movs	r5, #0
 800ad12:	4013      	ands	r3, r2
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d105      	bne.n	800ad24 <_printf_common+0x74>
 800ad18:	6833      	ldr	r3, [r6, #0]
 800ad1a:	68e5      	ldr	r5, [r4, #12]
 800ad1c:	1aed      	subs	r5, r5, r3
 800ad1e:	43eb      	mvns	r3, r5
 800ad20:	17db      	asrs	r3, r3, #31
 800ad22:	401d      	ands	r5, r3
 800ad24:	68a3      	ldr	r3, [r4, #8]
 800ad26:	6922      	ldr	r2, [r4, #16]
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	dd01      	ble.n	800ad30 <_printf_common+0x80>
 800ad2c:	1a9b      	subs	r3, r3, r2
 800ad2e:	18ed      	adds	r5, r5, r3
 800ad30:	2600      	movs	r6, #0
 800ad32:	42b5      	cmp	r5, r6
 800ad34:	d120      	bne.n	800ad78 <_printf_common+0xc8>
 800ad36:	2000      	movs	r0, #0
 800ad38:	e010      	b.n	800ad5c <_printf_common+0xac>
 800ad3a:	3501      	adds	r5, #1
 800ad3c:	68e3      	ldr	r3, [r4, #12]
 800ad3e:	6832      	ldr	r2, [r6, #0]
 800ad40:	1a9b      	subs	r3, r3, r2
 800ad42:	42ab      	cmp	r3, r5
 800ad44:	ddd2      	ble.n	800acec <_printf_common+0x3c>
 800ad46:	0022      	movs	r2, r4
 800ad48:	2301      	movs	r3, #1
 800ad4a:	9901      	ldr	r1, [sp, #4]
 800ad4c:	9800      	ldr	r0, [sp, #0]
 800ad4e:	9f08      	ldr	r7, [sp, #32]
 800ad50:	3219      	adds	r2, #25
 800ad52:	47b8      	blx	r7
 800ad54:	3001      	adds	r0, #1
 800ad56:	d1f0      	bne.n	800ad3a <_printf_common+0x8a>
 800ad58:	2001      	movs	r0, #1
 800ad5a:	4240      	negs	r0, r0
 800ad5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad5e:	2030      	movs	r0, #48	@ 0x30
 800ad60:	18e1      	adds	r1, r4, r3
 800ad62:	3143      	adds	r1, #67	@ 0x43
 800ad64:	7008      	strb	r0, [r1, #0]
 800ad66:	0021      	movs	r1, r4
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	3145      	adds	r1, #69	@ 0x45
 800ad6c:	7809      	ldrb	r1, [r1, #0]
 800ad6e:	18a2      	adds	r2, r4, r2
 800ad70:	3243      	adds	r2, #67	@ 0x43
 800ad72:	3302      	adds	r3, #2
 800ad74:	7011      	strb	r1, [r2, #0]
 800ad76:	e7c1      	b.n	800acfc <_printf_common+0x4c>
 800ad78:	0022      	movs	r2, r4
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	9901      	ldr	r1, [sp, #4]
 800ad7e:	9800      	ldr	r0, [sp, #0]
 800ad80:	9f08      	ldr	r7, [sp, #32]
 800ad82:	321a      	adds	r2, #26
 800ad84:	47b8      	blx	r7
 800ad86:	3001      	adds	r0, #1
 800ad88:	d0e6      	beq.n	800ad58 <_printf_common+0xa8>
 800ad8a:	3601      	adds	r6, #1
 800ad8c:	e7d1      	b.n	800ad32 <_printf_common+0x82>
	...

0800ad90 <_printf_i>:
 800ad90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad92:	b08b      	sub	sp, #44	@ 0x2c
 800ad94:	9206      	str	r2, [sp, #24]
 800ad96:	000a      	movs	r2, r1
 800ad98:	3243      	adds	r2, #67	@ 0x43
 800ad9a:	9307      	str	r3, [sp, #28]
 800ad9c:	9005      	str	r0, [sp, #20]
 800ad9e:	9203      	str	r2, [sp, #12]
 800ada0:	7e0a      	ldrb	r2, [r1, #24]
 800ada2:	000c      	movs	r4, r1
 800ada4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ada6:	2a78      	cmp	r2, #120	@ 0x78
 800ada8:	d809      	bhi.n	800adbe <_printf_i+0x2e>
 800adaa:	2a62      	cmp	r2, #98	@ 0x62
 800adac:	d80b      	bhi.n	800adc6 <_printf_i+0x36>
 800adae:	2a00      	cmp	r2, #0
 800adb0:	d100      	bne.n	800adb4 <_printf_i+0x24>
 800adb2:	e0bc      	b.n	800af2e <_printf_i+0x19e>
 800adb4:	497b      	ldr	r1, [pc, #492]	@ (800afa4 <_printf_i+0x214>)
 800adb6:	9104      	str	r1, [sp, #16]
 800adb8:	2a58      	cmp	r2, #88	@ 0x58
 800adba:	d100      	bne.n	800adbe <_printf_i+0x2e>
 800adbc:	e090      	b.n	800aee0 <_printf_i+0x150>
 800adbe:	0025      	movs	r5, r4
 800adc0:	3542      	adds	r5, #66	@ 0x42
 800adc2:	702a      	strb	r2, [r5, #0]
 800adc4:	e022      	b.n	800ae0c <_printf_i+0x7c>
 800adc6:	0010      	movs	r0, r2
 800adc8:	3863      	subs	r0, #99	@ 0x63
 800adca:	2815      	cmp	r0, #21
 800adcc:	d8f7      	bhi.n	800adbe <_printf_i+0x2e>
 800adce:	f7f5 f99f 	bl	8000110 <__gnu_thumb1_case_shi>
 800add2:	0016      	.short	0x0016
 800add4:	fff6001f 	.word	0xfff6001f
 800add8:	fff6fff6 	.word	0xfff6fff6
 800addc:	001ffff6 	.word	0x001ffff6
 800ade0:	fff6fff6 	.word	0xfff6fff6
 800ade4:	fff6fff6 	.word	0xfff6fff6
 800ade8:	003600a1 	.word	0x003600a1
 800adec:	fff60080 	.word	0xfff60080
 800adf0:	00b2fff6 	.word	0x00b2fff6
 800adf4:	0036fff6 	.word	0x0036fff6
 800adf8:	fff6fff6 	.word	0xfff6fff6
 800adfc:	0084      	.short	0x0084
 800adfe:	0025      	movs	r5, r4
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	3542      	adds	r5, #66	@ 0x42
 800ae04:	1d11      	adds	r1, r2, #4
 800ae06:	6019      	str	r1, [r3, #0]
 800ae08:	6813      	ldr	r3, [r2, #0]
 800ae0a:	702b      	strb	r3, [r5, #0]
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e0a0      	b.n	800af52 <_printf_i+0x1c2>
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	6809      	ldr	r1, [r1, #0]
 800ae14:	1d02      	adds	r2, r0, #4
 800ae16:	060d      	lsls	r5, r1, #24
 800ae18:	d50b      	bpl.n	800ae32 <_printf_i+0xa2>
 800ae1a:	6806      	ldr	r6, [r0, #0]
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	2e00      	cmp	r6, #0
 800ae20:	da03      	bge.n	800ae2a <_printf_i+0x9a>
 800ae22:	232d      	movs	r3, #45	@ 0x2d
 800ae24:	9a03      	ldr	r2, [sp, #12]
 800ae26:	4276      	negs	r6, r6
 800ae28:	7013      	strb	r3, [r2, #0]
 800ae2a:	4b5e      	ldr	r3, [pc, #376]	@ (800afa4 <_printf_i+0x214>)
 800ae2c:	270a      	movs	r7, #10
 800ae2e:	9304      	str	r3, [sp, #16]
 800ae30:	e018      	b.n	800ae64 <_printf_i+0xd4>
 800ae32:	6806      	ldr	r6, [r0, #0]
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	0649      	lsls	r1, r1, #25
 800ae38:	d5f1      	bpl.n	800ae1e <_printf_i+0x8e>
 800ae3a:	b236      	sxth	r6, r6
 800ae3c:	e7ef      	b.n	800ae1e <_printf_i+0x8e>
 800ae3e:	6808      	ldr	r0, [r1, #0]
 800ae40:	6819      	ldr	r1, [r3, #0]
 800ae42:	c940      	ldmia	r1!, {r6}
 800ae44:	0605      	lsls	r5, r0, #24
 800ae46:	d402      	bmi.n	800ae4e <_printf_i+0xbe>
 800ae48:	0640      	lsls	r0, r0, #25
 800ae4a:	d500      	bpl.n	800ae4e <_printf_i+0xbe>
 800ae4c:	b2b6      	uxth	r6, r6
 800ae4e:	6019      	str	r1, [r3, #0]
 800ae50:	4b54      	ldr	r3, [pc, #336]	@ (800afa4 <_printf_i+0x214>)
 800ae52:	270a      	movs	r7, #10
 800ae54:	9304      	str	r3, [sp, #16]
 800ae56:	2a6f      	cmp	r2, #111	@ 0x6f
 800ae58:	d100      	bne.n	800ae5c <_printf_i+0xcc>
 800ae5a:	3f02      	subs	r7, #2
 800ae5c:	0023      	movs	r3, r4
 800ae5e:	2200      	movs	r2, #0
 800ae60:	3343      	adds	r3, #67	@ 0x43
 800ae62:	701a      	strb	r2, [r3, #0]
 800ae64:	6863      	ldr	r3, [r4, #4]
 800ae66:	60a3      	str	r3, [r4, #8]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	db03      	blt.n	800ae74 <_printf_i+0xe4>
 800ae6c:	2104      	movs	r1, #4
 800ae6e:	6822      	ldr	r2, [r4, #0]
 800ae70:	438a      	bics	r2, r1
 800ae72:	6022      	str	r2, [r4, #0]
 800ae74:	2e00      	cmp	r6, #0
 800ae76:	d102      	bne.n	800ae7e <_printf_i+0xee>
 800ae78:	9d03      	ldr	r5, [sp, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00c      	beq.n	800ae98 <_printf_i+0x108>
 800ae7e:	9d03      	ldr	r5, [sp, #12]
 800ae80:	0030      	movs	r0, r6
 800ae82:	0039      	movs	r1, r7
 800ae84:	f7f5 f9d4 	bl	8000230 <__aeabi_uidivmod>
 800ae88:	9b04      	ldr	r3, [sp, #16]
 800ae8a:	3d01      	subs	r5, #1
 800ae8c:	5c5b      	ldrb	r3, [r3, r1]
 800ae8e:	702b      	strb	r3, [r5, #0]
 800ae90:	0033      	movs	r3, r6
 800ae92:	0006      	movs	r6, r0
 800ae94:	429f      	cmp	r7, r3
 800ae96:	d9f3      	bls.n	800ae80 <_printf_i+0xf0>
 800ae98:	2f08      	cmp	r7, #8
 800ae9a:	d109      	bne.n	800aeb0 <_printf_i+0x120>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	07db      	lsls	r3, r3, #31
 800aea0:	d506      	bpl.n	800aeb0 <_printf_i+0x120>
 800aea2:	6862      	ldr	r2, [r4, #4]
 800aea4:	6923      	ldr	r3, [r4, #16]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	dc02      	bgt.n	800aeb0 <_printf_i+0x120>
 800aeaa:	2330      	movs	r3, #48	@ 0x30
 800aeac:	3d01      	subs	r5, #1
 800aeae:	702b      	strb	r3, [r5, #0]
 800aeb0:	9b03      	ldr	r3, [sp, #12]
 800aeb2:	1b5b      	subs	r3, r3, r5
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	9b07      	ldr	r3, [sp, #28]
 800aeb8:	0021      	movs	r1, r4
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	9805      	ldr	r0, [sp, #20]
 800aebe:	9b06      	ldr	r3, [sp, #24]
 800aec0:	aa09      	add	r2, sp, #36	@ 0x24
 800aec2:	f7ff fef5 	bl	800acb0 <_printf_common>
 800aec6:	3001      	adds	r0, #1
 800aec8:	d148      	bne.n	800af5c <_printf_i+0x1cc>
 800aeca:	2001      	movs	r0, #1
 800aecc:	4240      	negs	r0, r0
 800aece:	b00b      	add	sp, #44	@ 0x2c
 800aed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed2:	2220      	movs	r2, #32
 800aed4:	6809      	ldr	r1, [r1, #0]
 800aed6:	430a      	orrs	r2, r1
 800aed8:	6022      	str	r2, [r4, #0]
 800aeda:	2278      	movs	r2, #120	@ 0x78
 800aedc:	4932      	ldr	r1, [pc, #200]	@ (800afa8 <_printf_i+0x218>)
 800aede:	9104      	str	r1, [sp, #16]
 800aee0:	0021      	movs	r1, r4
 800aee2:	3145      	adds	r1, #69	@ 0x45
 800aee4:	700a      	strb	r2, [r1, #0]
 800aee6:	6819      	ldr	r1, [r3, #0]
 800aee8:	6822      	ldr	r2, [r4, #0]
 800aeea:	c940      	ldmia	r1!, {r6}
 800aeec:	0610      	lsls	r0, r2, #24
 800aeee:	d402      	bmi.n	800aef6 <_printf_i+0x166>
 800aef0:	0650      	lsls	r0, r2, #25
 800aef2:	d500      	bpl.n	800aef6 <_printf_i+0x166>
 800aef4:	b2b6      	uxth	r6, r6
 800aef6:	6019      	str	r1, [r3, #0]
 800aef8:	07d3      	lsls	r3, r2, #31
 800aefa:	d502      	bpl.n	800af02 <_printf_i+0x172>
 800aefc:	2320      	movs	r3, #32
 800aefe:	4313      	orrs	r3, r2
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	2e00      	cmp	r6, #0
 800af04:	d001      	beq.n	800af0a <_printf_i+0x17a>
 800af06:	2710      	movs	r7, #16
 800af08:	e7a8      	b.n	800ae5c <_printf_i+0xcc>
 800af0a:	2220      	movs	r2, #32
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	4393      	bics	r3, r2
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	e7f8      	b.n	800af06 <_printf_i+0x176>
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	680d      	ldr	r5, [r1, #0]
 800af18:	1d10      	adds	r0, r2, #4
 800af1a:	6949      	ldr	r1, [r1, #20]
 800af1c:	6018      	str	r0, [r3, #0]
 800af1e:	6813      	ldr	r3, [r2, #0]
 800af20:	062e      	lsls	r6, r5, #24
 800af22:	d501      	bpl.n	800af28 <_printf_i+0x198>
 800af24:	6019      	str	r1, [r3, #0]
 800af26:	e002      	b.n	800af2e <_printf_i+0x19e>
 800af28:	066d      	lsls	r5, r5, #25
 800af2a:	d5fb      	bpl.n	800af24 <_printf_i+0x194>
 800af2c:	8019      	strh	r1, [r3, #0]
 800af2e:	2300      	movs	r3, #0
 800af30:	9d03      	ldr	r5, [sp, #12]
 800af32:	6123      	str	r3, [r4, #16]
 800af34:	e7bf      	b.n	800aeb6 <_printf_i+0x126>
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	1d11      	adds	r1, r2, #4
 800af3a:	6019      	str	r1, [r3, #0]
 800af3c:	6815      	ldr	r5, [r2, #0]
 800af3e:	2100      	movs	r1, #0
 800af40:	0028      	movs	r0, r5
 800af42:	6862      	ldr	r2, [r4, #4]
 800af44:	f000 f9ce 	bl	800b2e4 <memchr>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d001      	beq.n	800af50 <_printf_i+0x1c0>
 800af4c:	1b40      	subs	r0, r0, r5
 800af4e:	6060      	str	r0, [r4, #4]
 800af50:	6863      	ldr	r3, [r4, #4]
 800af52:	6123      	str	r3, [r4, #16]
 800af54:	2300      	movs	r3, #0
 800af56:	9a03      	ldr	r2, [sp, #12]
 800af58:	7013      	strb	r3, [r2, #0]
 800af5a:	e7ac      	b.n	800aeb6 <_printf_i+0x126>
 800af5c:	002a      	movs	r2, r5
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	9906      	ldr	r1, [sp, #24]
 800af62:	9805      	ldr	r0, [sp, #20]
 800af64:	9d07      	ldr	r5, [sp, #28]
 800af66:	47a8      	blx	r5
 800af68:	3001      	adds	r0, #1
 800af6a:	d0ae      	beq.n	800aeca <_printf_i+0x13a>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	079b      	lsls	r3, r3, #30
 800af70:	d415      	bmi.n	800af9e <_printf_i+0x20e>
 800af72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af74:	68e0      	ldr	r0, [r4, #12]
 800af76:	4298      	cmp	r0, r3
 800af78:	daa9      	bge.n	800aece <_printf_i+0x13e>
 800af7a:	0018      	movs	r0, r3
 800af7c:	e7a7      	b.n	800aece <_printf_i+0x13e>
 800af7e:	0022      	movs	r2, r4
 800af80:	2301      	movs	r3, #1
 800af82:	9906      	ldr	r1, [sp, #24]
 800af84:	9805      	ldr	r0, [sp, #20]
 800af86:	9e07      	ldr	r6, [sp, #28]
 800af88:	3219      	adds	r2, #25
 800af8a:	47b0      	blx	r6
 800af8c:	3001      	adds	r0, #1
 800af8e:	d09c      	beq.n	800aeca <_printf_i+0x13a>
 800af90:	3501      	adds	r5, #1
 800af92:	68e3      	ldr	r3, [r4, #12]
 800af94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af96:	1a9b      	subs	r3, r3, r2
 800af98:	42ab      	cmp	r3, r5
 800af9a:	dcf0      	bgt.n	800af7e <_printf_i+0x1ee>
 800af9c:	e7e9      	b.n	800af72 <_printf_i+0x1e2>
 800af9e:	2500      	movs	r5, #0
 800afa0:	e7f7      	b.n	800af92 <_printf_i+0x202>
 800afa2:	46c0      	nop			@ (mov r8, r8)
 800afa4:	0800c511 	.word	0x0800c511
 800afa8:	0800c522 	.word	0x0800c522

0800afac <__sflush_r>:
 800afac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afae:	220c      	movs	r2, #12
 800afb0:	5e8b      	ldrsh	r3, [r1, r2]
 800afb2:	0005      	movs	r5, r0
 800afb4:	000c      	movs	r4, r1
 800afb6:	071a      	lsls	r2, r3, #28
 800afb8:	d456      	bmi.n	800b068 <__sflush_r+0xbc>
 800afba:	684a      	ldr	r2, [r1, #4]
 800afbc:	2a00      	cmp	r2, #0
 800afbe:	dc02      	bgt.n	800afc6 <__sflush_r+0x1a>
 800afc0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800afc2:	2a00      	cmp	r2, #0
 800afc4:	dd4e      	ble.n	800b064 <__sflush_r+0xb8>
 800afc6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800afc8:	2f00      	cmp	r7, #0
 800afca:	d04b      	beq.n	800b064 <__sflush_r+0xb8>
 800afcc:	2200      	movs	r2, #0
 800afce:	2080      	movs	r0, #128	@ 0x80
 800afd0:	682e      	ldr	r6, [r5, #0]
 800afd2:	602a      	str	r2, [r5, #0]
 800afd4:	001a      	movs	r2, r3
 800afd6:	0140      	lsls	r0, r0, #5
 800afd8:	6a21      	ldr	r1, [r4, #32]
 800afda:	4002      	ands	r2, r0
 800afdc:	4203      	tst	r3, r0
 800afde:	d033      	beq.n	800b048 <__sflush_r+0x9c>
 800afe0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	075b      	lsls	r3, r3, #29
 800afe6:	d506      	bpl.n	800aff6 <__sflush_r+0x4a>
 800afe8:	6863      	ldr	r3, [r4, #4]
 800afea:	1ad2      	subs	r2, r2, r3
 800afec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <__sflush_r+0x4a>
 800aff2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aff4:	1ad2      	subs	r2, r2, r3
 800aff6:	2300      	movs	r3, #0
 800aff8:	0028      	movs	r0, r5
 800affa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800affc:	6a21      	ldr	r1, [r4, #32]
 800affe:	47b8      	blx	r7
 800b000:	89a2      	ldrh	r2, [r4, #12]
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	d106      	bne.n	800b014 <__sflush_r+0x68>
 800b006:	6829      	ldr	r1, [r5, #0]
 800b008:	291d      	cmp	r1, #29
 800b00a:	d846      	bhi.n	800b09a <__sflush_r+0xee>
 800b00c:	4b29      	ldr	r3, [pc, #164]	@ (800b0b4 <__sflush_r+0x108>)
 800b00e:	410b      	asrs	r3, r1
 800b010:	07db      	lsls	r3, r3, #31
 800b012:	d442      	bmi.n	800b09a <__sflush_r+0xee>
 800b014:	2300      	movs	r3, #0
 800b016:	6063      	str	r3, [r4, #4]
 800b018:	6923      	ldr	r3, [r4, #16]
 800b01a:	6023      	str	r3, [r4, #0]
 800b01c:	04d2      	lsls	r2, r2, #19
 800b01e:	d505      	bpl.n	800b02c <__sflush_r+0x80>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <__sflush_r+0x7e>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d100      	bne.n	800b02c <__sflush_r+0x80>
 800b02a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b02c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b02e:	602e      	str	r6, [r5, #0]
 800b030:	2900      	cmp	r1, #0
 800b032:	d017      	beq.n	800b064 <__sflush_r+0xb8>
 800b034:	0023      	movs	r3, r4
 800b036:	3344      	adds	r3, #68	@ 0x44
 800b038:	4299      	cmp	r1, r3
 800b03a:	d002      	beq.n	800b042 <__sflush_r+0x96>
 800b03c:	0028      	movs	r0, r5
 800b03e:	f7ff fca9 	bl	800a994 <_free_r>
 800b042:	2300      	movs	r3, #0
 800b044:	6363      	str	r3, [r4, #52]	@ 0x34
 800b046:	e00d      	b.n	800b064 <__sflush_r+0xb8>
 800b048:	2301      	movs	r3, #1
 800b04a:	0028      	movs	r0, r5
 800b04c:	47b8      	blx	r7
 800b04e:	0002      	movs	r2, r0
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	d1c6      	bne.n	800afe2 <__sflush_r+0x36>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0c3      	beq.n	800afe2 <__sflush_r+0x36>
 800b05a:	2b1d      	cmp	r3, #29
 800b05c:	d001      	beq.n	800b062 <__sflush_r+0xb6>
 800b05e:	2b16      	cmp	r3, #22
 800b060:	d11a      	bne.n	800b098 <__sflush_r+0xec>
 800b062:	602e      	str	r6, [r5, #0]
 800b064:	2000      	movs	r0, #0
 800b066:	e01e      	b.n	800b0a6 <__sflush_r+0xfa>
 800b068:	690e      	ldr	r6, [r1, #16]
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	d0fa      	beq.n	800b064 <__sflush_r+0xb8>
 800b06e:	680f      	ldr	r7, [r1, #0]
 800b070:	600e      	str	r6, [r1, #0]
 800b072:	1bba      	subs	r2, r7, r6
 800b074:	9201      	str	r2, [sp, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	079b      	lsls	r3, r3, #30
 800b07a:	d100      	bne.n	800b07e <__sflush_r+0xd2>
 800b07c:	694a      	ldr	r2, [r1, #20]
 800b07e:	60a2      	str	r2, [r4, #8]
 800b080:	9b01      	ldr	r3, [sp, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	ddee      	ble.n	800b064 <__sflush_r+0xb8>
 800b086:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b088:	0032      	movs	r2, r6
 800b08a:	001f      	movs	r7, r3
 800b08c:	0028      	movs	r0, r5
 800b08e:	9b01      	ldr	r3, [sp, #4]
 800b090:	6a21      	ldr	r1, [r4, #32]
 800b092:	47b8      	blx	r7
 800b094:	2800      	cmp	r0, #0
 800b096:	dc07      	bgt.n	800b0a8 <__sflush_r+0xfc>
 800b098:	89a2      	ldrh	r2, [r4, #12]
 800b09a:	2340      	movs	r3, #64	@ 0x40
 800b09c:	2001      	movs	r0, #1
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	b21b      	sxth	r3, r3
 800b0a2:	81a3      	strh	r3, [r4, #12]
 800b0a4:	4240      	negs	r0, r0
 800b0a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0a8:	9b01      	ldr	r3, [sp, #4]
 800b0aa:	1836      	adds	r6, r6, r0
 800b0ac:	1a1b      	subs	r3, r3, r0
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	e7e6      	b.n	800b080 <__sflush_r+0xd4>
 800b0b2:	46c0      	nop			@ (mov r8, r8)
 800b0b4:	dfbffffe 	.word	0xdfbffffe

0800b0b8 <_fflush_r>:
 800b0b8:	690b      	ldr	r3, [r1, #16]
 800b0ba:	b570      	push	{r4, r5, r6, lr}
 800b0bc:	0005      	movs	r5, r0
 800b0be:	000c      	movs	r4, r1
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d102      	bne.n	800b0ca <_fflush_r+0x12>
 800b0c4:	2500      	movs	r5, #0
 800b0c6:	0028      	movs	r0, r5
 800b0c8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d004      	beq.n	800b0d8 <_fflush_r+0x20>
 800b0ce:	6a03      	ldr	r3, [r0, #32]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <_fflush_r+0x20>
 800b0d4:	f7ff fae8 	bl	800a6a8 <__sinit>
 800b0d8:	220c      	movs	r2, #12
 800b0da:	5ea3      	ldrsh	r3, [r4, r2]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d0f1      	beq.n	800b0c4 <_fflush_r+0xc>
 800b0e0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0e2:	07d2      	lsls	r2, r2, #31
 800b0e4:	d404      	bmi.n	800b0f0 <_fflush_r+0x38>
 800b0e6:	059b      	lsls	r3, r3, #22
 800b0e8:	d402      	bmi.n	800b0f0 <_fflush_r+0x38>
 800b0ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ec:	f7ff fc3f 	bl	800a96e <__retarget_lock_acquire_recursive>
 800b0f0:	0028      	movs	r0, r5
 800b0f2:	0021      	movs	r1, r4
 800b0f4:	f7ff ff5a 	bl	800afac <__sflush_r>
 800b0f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0fa:	0005      	movs	r5, r0
 800b0fc:	07db      	lsls	r3, r3, #31
 800b0fe:	d4e2      	bmi.n	800b0c6 <_fflush_r+0xe>
 800b100:	89a3      	ldrh	r3, [r4, #12]
 800b102:	059b      	lsls	r3, r3, #22
 800b104:	d4df      	bmi.n	800b0c6 <_fflush_r+0xe>
 800b106:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b108:	f7ff fc32 	bl	800a970 <__retarget_lock_release_recursive>
 800b10c:	e7db      	b.n	800b0c6 <_fflush_r+0xe>

0800b10e <__swbuf_r>:
 800b10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b110:	0006      	movs	r6, r0
 800b112:	000d      	movs	r5, r1
 800b114:	0014      	movs	r4, r2
 800b116:	2800      	cmp	r0, #0
 800b118:	d004      	beq.n	800b124 <__swbuf_r+0x16>
 800b11a:	6a03      	ldr	r3, [r0, #32]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <__swbuf_r+0x16>
 800b120:	f7ff fac2 	bl	800a6a8 <__sinit>
 800b124:	69a3      	ldr	r3, [r4, #24]
 800b126:	60a3      	str	r3, [r4, #8]
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	071b      	lsls	r3, r3, #28
 800b12c:	d502      	bpl.n	800b134 <__swbuf_r+0x26>
 800b12e:	6923      	ldr	r3, [r4, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d109      	bne.n	800b148 <__swbuf_r+0x3a>
 800b134:	0021      	movs	r1, r4
 800b136:	0030      	movs	r0, r6
 800b138:	f000 f82c 	bl	800b194 <__swsetup_r>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d003      	beq.n	800b148 <__swbuf_r+0x3a>
 800b140:	2501      	movs	r5, #1
 800b142:	426d      	negs	r5, r5
 800b144:	0028      	movs	r0, r5
 800b146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b148:	6923      	ldr	r3, [r4, #16]
 800b14a:	6820      	ldr	r0, [r4, #0]
 800b14c:	b2ef      	uxtb	r7, r5
 800b14e:	1ac0      	subs	r0, r0, r3
 800b150:	6963      	ldr	r3, [r4, #20]
 800b152:	b2ed      	uxtb	r5, r5
 800b154:	4283      	cmp	r3, r0
 800b156:	dc05      	bgt.n	800b164 <__swbuf_r+0x56>
 800b158:	0021      	movs	r1, r4
 800b15a:	0030      	movs	r0, r6
 800b15c:	f7ff ffac 	bl	800b0b8 <_fflush_r>
 800b160:	2800      	cmp	r0, #0
 800b162:	d1ed      	bne.n	800b140 <__swbuf_r+0x32>
 800b164:	68a3      	ldr	r3, [r4, #8]
 800b166:	3001      	adds	r0, #1
 800b168:	3b01      	subs	r3, #1
 800b16a:	60a3      	str	r3, [r4, #8]
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	1c5a      	adds	r2, r3, #1
 800b170:	6022      	str	r2, [r4, #0]
 800b172:	701f      	strb	r7, [r3, #0]
 800b174:	6963      	ldr	r3, [r4, #20]
 800b176:	4283      	cmp	r3, r0
 800b178:	d004      	beq.n	800b184 <__swbuf_r+0x76>
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	07db      	lsls	r3, r3, #31
 800b17e:	d5e1      	bpl.n	800b144 <__swbuf_r+0x36>
 800b180:	2d0a      	cmp	r5, #10
 800b182:	d1df      	bne.n	800b144 <__swbuf_r+0x36>
 800b184:	0021      	movs	r1, r4
 800b186:	0030      	movs	r0, r6
 800b188:	f7ff ff96 	bl	800b0b8 <_fflush_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d0d9      	beq.n	800b144 <__swbuf_r+0x36>
 800b190:	e7d6      	b.n	800b140 <__swbuf_r+0x32>
	...

0800b194 <__swsetup_r>:
 800b194:	4b2d      	ldr	r3, [pc, #180]	@ (800b24c <__swsetup_r+0xb8>)
 800b196:	b570      	push	{r4, r5, r6, lr}
 800b198:	0005      	movs	r5, r0
 800b19a:	6818      	ldr	r0, [r3, #0]
 800b19c:	000c      	movs	r4, r1
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d004      	beq.n	800b1ac <__swsetup_r+0x18>
 800b1a2:	6a03      	ldr	r3, [r0, #32]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <__swsetup_r+0x18>
 800b1a8:	f7ff fa7e 	bl	800a6a8 <__sinit>
 800b1ac:	230c      	movs	r3, #12
 800b1ae:	5ee2      	ldrsh	r2, [r4, r3]
 800b1b0:	0713      	lsls	r3, r2, #28
 800b1b2:	d423      	bmi.n	800b1fc <__swsetup_r+0x68>
 800b1b4:	06d3      	lsls	r3, r2, #27
 800b1b6:	d407      	bmi.n	800b1c8 <__swsetup_r+0x34>
 800b1b8:	2309      	movs	r3, #9
 800b1ba:	602b      	str	r3, [r5, #0]
 800b1bc:	2340      	movs	r3, #64	@ 0x40
 800b1be:	2001      	movs	r0, #1
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	4240      	negs	r0, r0
 800b1c6:	e03a      	b.n	800b23e <__swsetup_r+0xaa>
 800b1c8:	0752      	lsls	r2, r2, #29
 800b1ca:	d513      	bpl.n	800b1f4 <__swsetup_r+0x60>
 800b1cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1ce:	2900      	cmp	r1, #0
 800b1d0:	d008      	beq.n	800b1e4 <__swsetup_r+0x50>
 800b1d2:	0023      	movs	r3, r4
 800b1d4:	3344      	adds	r3, #68	@ 0x44
 800b1d6:	4299      	cmp	r1, r3
 800b1d8:	d002      	beq.n	800b1e0 <__swsetup_r+0x4c>
 800b1da:	0028      	movs	r0, r5
 800b1dc:	f7ff fbda 	bl	800a994 <_free_r>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1e4:	2224      	movs	r2, #36	@ 0x24
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	4393      	bics	r3, r2
 800b1ea:	81a3      	strh	r3, [r4, #12]
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	6063      	str	r3, [r4, #4]
 800b1f0:	6923      	ldr	r3, [r4, #16]
 800b1f2:	6023      	str	r3, [r4, #0]
 800b1f4:	2308      	movs	r3, #8
 800b1f6:	89a2      	ldrh	r2, [r4, #12]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	81a3      	strh	r3, [r4, #12]
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10b      	bne.n	800b21a <__swsetup_r+0x86>
 800b202:	21a0      	movs	r1, #160	@ 0xa0
 800b204:	2280      	movs	r2, #128	@ 0x80
 800b206:	89a3      	ldrh	r3, [r4, #12]
 800b208:	0089      	lsls	r1, r1, #2
 800b20a:	0092      	lsls	r2, r2, #2
 800b20c:	400b      	ands	r3, r1
 800b20e:	4293      	cmp	r3, r2
 800b210:	d003      	beq.n	800b21a <__swsetup_r+0x86>
 800b212:	0021      	movs	r1, r4
 800b214:	0028      	movs	r0, r5
 800b216:	f000 f89b 	bl	800b350 <__smakebuf_r>
 800b21a:	230c      	movs	r3, #12
 800b21c:	5ee2      	ldrsh	r2, [r4, r3]
 800b21e:	2101      	movs	r1, #1
 800b220:	0013      	movs	r3, r2
 800b222:	400b      	ands	r3, r1
 800b224:	420a      	tst	r2, r1
 800b226:	d00b      	beq.n	800b240 <__swsetup_r+0xac>
 800b228:	2300      	movs	r3, #0
 800b22a:	60a3      	str	r3, [r4, #8]
 800b22c:	6963      	ldr	r3, [r4, #20]
 800b22e:	425b      	negs	r3, r3
 800b230:	61a3      	str	r3, [r4, #24]
 800b232:	2000      	movs	r0, #0
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	4283      	cmp	r3, r0
 800b238:	d101      	bne.n	800b23e <__swsetup_r+0xaa>
 800b23a:	0613      	lsls	r3, r2, #24
 800b23c:	d4be      	bmi.n	800b1bc <__swsetup_r+0x28>
 800b23e:	bd70      	pop	{r4, r5, r6, pc}
 800b240:	0791      	lsls	r1, r2, #30
 800b242:	d400      	bmi.n	800b246 <__swsetup_r+0xb2>
 800b244:	6963      	ldr	r3, [r4, #20]
 800b246:	60a3      	str	r3, [r4, #8]
 800b248:	e7f3      	b.n	800b232 <__swsetup_r+0x9e>
 800b24a:	46c0      	nop			@ (mov r8, r8)
 800b24c:	2000006c 	.word	0x2000006c

0800b250 <_raise_r>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	0004      	movs	r4, r0
 800b254:	000d      	movs	r5, r1
 800b256:	291f      	cmp	r1, #31
 800b258:	d904      	bls.n	800b264 <_raise_r+0x14>
 800b25a:	2316      	movs	r3, #22
 800b25c:	6003      	str	r3, [r0, #0]
 800b25e:	2001      	movs	r0, #1
 800b260:	4240      	negs	r0, r0
 800b262:	bd70      	pop	{r4, r5, r6, pc}
 800b264:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b266:	2b00      	cmp	r3, #0
 800b268:	d004      	beq.n	800b274 <_raise_r+0x24>
 800b26a:	008a      	lsls	r2, r1, #2
 800b26c:	189b      	adds	r3, r3, r2
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	2a00      	cmp	r2, #0
 800b272:	d108      	bne.n	800b286 <_raise_r+0x36>
 800b274:	0020      	movs	r0, r4
 800b276:	f000 f831 	bl	800b2dc <_getpid_r>
 800b27a:	002a      	movs	r2, r5
 800b27c:	0001      	movs	r1, r0
 800b27e:	0020      	movs	r0, r4
 800b280:	f000 f81a 	bl	800b2b8 <_kill_r>
 800b284:	e7ed      	b.n	800b262 <_raise_r+0x12>
 800b286:	2a01      	cmp	r2, #1
 800b288:	d009      	beq.n	800b29e <_raise_r+0x4e>
 800b28a:	1c51      	adds	r1, r2, #1
 800b28c:	d103      	bne.n	800b296 <_raise_r+0x46>
 800b28e:	2316      	movs	r3, #22
 800b290:	6003      	str	r3, [r0, #0]
 800b292:	2001      	movs	r0, #1
 800b294:	e7e5      	b.n	800b262 <_raise_r+0x12>
 800b296:	2100      	movs	r1, #0
 800b298:	0028      	movs	r0, r5
 800b29a:	6019      	str	r1, [r3, #0]
 800b29c:	4790      	blx	r2
 800b29e:	2000      	movs	r0, #0
 800b2a0:	e7df      	b.n	800b262 <_raise_r+0x12>
	...

0800b2a4 <raise>:
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	4b03      	ldr	r3, [pc, #12]	@ (800b2b4 <raise+0x10>)
 800b2a8:	0001      	movs	r1, r0
 800b2aa:	6818      	ldr	r0, [r3, #0]
 800b2ac:	f7ff ffd0 	bl	800b250 <_raise_r>
 800b2b0:	bd10      	pop	{r4, pc}
 800b2b2:	46c0      	nop			@ (mov r8, r8)
 800b2b4:	2000006c 	.word	0x2000006c

0800b2b8 <_kill_r>:
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	b570      	push	{r4, r5, r6, lr}
 800b2bc:	4d06      	ldr	r5, [pc, #24]	@ (800b2d8 <_kill_r+0x20>)
 800b2be:	0004      	movs	r4, r0
 800b2c0:	0008      	movs	r0, r1
 800b2c2:	0011      	movs	r1, r2
 800b2c4:	602b      	str	r3, [r5, #0]
 800b2c6:	f7fc ff28 	bl	800811a <_kill>
 800b2ca:	1c43      	adds	r3, r0, #1
 800b2cc:	d103      	bne.n	800b2d6 <_kill_r+0x1e>
 800b2ce:	682b      	ldr	r3, [r5, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d000      	beq.n	800b2d6 <_kill_r+0x1e>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	bd70      	pop	{r4, r5, r6, pc}
 800b2d8:	200003dc 	.word	0x200003dc

0800b2dc <_getpid_r>:
 800b2dc:	b510      	push	{r4, lr}
 800b2de:	f7fc ff16 	bl	800810e <_getpid>
 800b2e2:	bd10      	pop	{r4, pc}

0800b2e4 <memchr>:
 800b2e4:	b2c9      	uxtb	r1, r1
 800b2e6:	1882      	adds	r2, r0, r2
 800b2e8:	4290      	cmp	r0, r2
 800b2ea:	d101      	bne.n	800b2f0 <memchr+0xc>
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	4770      	bx	lr
 800b2f0:	7803      	ldrb	r3, [r0, #0]
 800b2f2:	428b      	cmp	r3, r1
 800b2f4:	d0fb      	beq.n	800b2ee <memchr+0xa>
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	e7f6      	b.n	800b2e8 <memchr+0x4>
	...

0800b2fc <__swhatbuf_r>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	000e      	movs	r6, r1
 800b300:	001d      	movs	r5, r3
 800b302:	230e      	movs	r3, #14
 800b304:	5ec9      	ldrsh	r1, [r1, r3]
 800b306:	0014      	movs	r4, r2
 800b308:	b096      	sub	sp, #88	@ 0x58
 800b30a:	2900      	cmp	r1, #0
 800b30c:	da0c      	bge.n	800b328 <__swhatbuf_r+0x2c>
 800b30e:	89b2      	ldrh	r2, [r6, #12]
 800b310:	2380      	movs	r3, #128	@ 0x80
 800b312:	0011      	movs	r1, r2
 800b314:	4019      	ands	r1, r3
 800b316:	421a      	tst	r2, r3
 800b318:	d114      	bne.n	800b344 <__swhatbuf_r+0x48>
 800b31a:	2380      	movs	r3, #128	@ 0x80
 800b31c:	00db      	lsls	r3, r3, #3
 800b31e:	2000      	movs	r0, #0
 800b320:	6029      	str	r1, [r5, #0]
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	b016      	add	sp, #88	@ 0x58
 800b326:	bd70      	pop	{r4, r5, r6, pc}
 800b328:	466a      	mov	r2, sp
 800b32a:	f000 f853 	bl	800b3d4 <_fstat_r>
 800b32e:	2800      	cmp	r0, #0
 800b330:	dbed      	blt.n	800b30e <__swhatbuf_r+0x12>
 800b332:	23f0      	movs	r3, #240	@ 0xf0
 800b334:	9901      	ldr	r1, [sp, #4]
 800b336:	021b      	lsls	r3, r3, #8
 800b338:	4019      	ands	r1, r3
 800b33a:	4b04      	ldr	r3, [pc, #16]	@ (800b34c <__swhatbuf_r+0x50>)
 800b33c:	18c9      	adds	r1, r1, r3
 800b33e:	424b      	negs	r3, r1
 800b340:	4159      	adcs	r1, r3
 800b342:	e7ea      	b.n	800b31a <__swhatbuf_r+0x1e>
 800b344:	2100      	movs	r1, #0
 800b346:	2340      	movs	r3, #64	@ 0x40
 800b348:	e7e9      	b.n	800b31e <__swhatbuf_r+0x22>
 800b34a:	46c0      	nop			@ (mov r8, r8)
 800b34c:	ffffe000 	.word	0xffffe000

0800b350 <__smakebuf_r>:
 800b350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b352:	2602      	movs	r6, #2
 800b354:	898b      	ldrh	r3, [r1, #12]
 800b356:	0005      	movs	r5, r0
 800b358:	000c      	movs	r4, r1
 800b35a:	b085      	sub	sp, #20
 800b35c:	4233      	tst	r3, r6
 800b35e:	d007      	beq.n	800b370 <__smakebuf_r+0x20>
 800b360:	0023      	movs	r3, r4
 800b362:	3347      	adds	r3, #71	@ 0x47
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	6123      	str	r3, [r4, #16]
 800b368:	2301      	movs	r3, #1
 800b36a:	6163      	str	r3, [r4, #20]
 800b36c:	b005      	add	sp, #20
 800b36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b370:	ab03      	add	r3, sp, #12
 800b372:	aa02      	add	r2, sp, #8
 800b374:	f7ff ffc2 	bl	800b2fc <__swhatbuf_r>
 800b378:	9f02      	ldr	r7, [sp, #8]
 800b37a:	9001      	str	r0, [sp, #4]
 800b37c:	0039      	movs	r1, r7
 800b37e:	0028      	movs	r0, r5
 800b380:	f7ff f872 	bl	800a468 <_malloc_r>
 800b384:	2800      	cmp	r0, #0
 800b386:	d108      	bne.n	800b39a <__smakebuf_r+0x4a>
 800b388:	220c      	movs	r2, #12
 800b38a:	5ea3      	ldrsh	r3, [r4, r2]
 800b38c:	059a      	lsls	r2, r3, #22
 800b38e:	d4ed      	bmi.n	800b36c <__smakebuf_r+0x1c>
 800b390:	2203      	movs	r2, #3
 800b392:	4393      	bics	r3, r2
 800b394:	431e      	orrs	r6, r3
 800b396:	81a6      	strh	r6, [r4, #12]
 800b398:	e7e2      	b.n	800b360 <__smakebuf_r+0x10>
 800b39a:	2380      	movs	r3, #128	@ 0x80
 800b39c:	89a2      	ldrh	r2, [r4, #12]
 800b39e:	6020      	str	r0, [r4, #0]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	9b03      	ldr	r3, [sp, #12]
 800b3a6:	6120      	str	r0, [r4, #16]
 800b3a8:	6167      	str	r7, [r4, #20]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00c      	beq.n	800b3c8 <__smakebuf_r+0x78>
 800b3ae:	0028      	movs	r0, r5
 800b3b0:	230e      	movs	r3, #14
 800b3b2:	5ee1      	ldrsh	r1, [r4, r3]
 800b3b4:	f000 f820 	bl	800b3f8 <_isatty_r>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d005      	beq.n	800b3c8 <__smakebuf_r+0x78>
 800b3bc:	2303      	movs	r3, #3
 800b3be:	89a2      	ldrh	r2, [r4, #12]
 800b3c0:	439a      	bics	r2, r3
 800b3c2:	3b02      	subs	r3, #2
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	9a01      	ldr	r2, [sp, #4]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	81a3      	strh	r3, [r4, #12]
 800b3d0:	e7cc      	b.n	800b36c <__smakebuf_r+0x1c>
	...

0800b3d4 <_fstat_r>:
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	b570      	push	{r4, r5, r6, lr}
 800b3d8:	4d06      	ldr	r5, [pc, #24]	@ (800b3f4 <_fstat_r+0x20>)
 800b3da:	0004      	movs	r4, r0
 800b3dc:	0008      	movs	r0, r1
 800b3de:	0011      	movs	r1, r2
 800b3e0:	602b      	str	r3, [r5, #0]
 800b3e2:	f7fc fefa 	bl	80081da <_fstat>
 800b3e6:	1c43      	adds	r3, r0, #1
 800b3e8:	d103      	bne.n	800b3f2 <_fstat_r+0x1e>
 800b3ea:	682b      	ldr	r3, [r5, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d000      	beq.n	800b3f2 <_fstat_r+0x1e>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}
 800b3f4:	200003dc 	.word	0x200003dc

0800b3f8 <_isatty_r>:
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	b570      	push	{r4, r5, r6, lr}
 800b3fc:	4d06      	ldr	r5, [pc, #24]	@ (800b418 <_isatty_r+0x20>)
 800b3fe:	0004      	movs	r4, r0
 800b400:	0008      	movs	r0, r1
 800b402:	602b      	str	r3, [r5, #0]
 800b404:	f7fc fef7 	bl	80081f6 <_isatty>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d103      	bne.n	800b414 <_isatty_r+0x1c>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d000      	beq.n	800b414 <_isatty_r+0x1c>
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	bd70      	pop	{r4, r5, r6, pc}
 800b416:	46c0      	nop			@ (mov r8, r8)
 800b418:	200003dc 	.word	0x200003dc

0800b41c <_init>:
 800b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41e:	46c0      	nop			@ (mov r8, r8)
 800b420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b422:	bc08      	pop	{r3}
 800b424:	469e      	mov	lr, r3
 800b426:	4770      	bx	lr

0800b428 <_fini>:
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	46c0      	nop			@ (mov r8, r8)
 800b42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b42e:	bc08      	pop	{r3}
 800b430:	469e      	mov	lr, r3
 800b432:	4770      	bx	lr
 800b434:	0000      	movs	r0, r0
	...

0800b438 <__FLASH_Program_Fast_veneer>:
 800b438:	b401      	push	{r0}
 800b43a:	4802      	ldr	r0, [pc, #8]	@ (800b444 <__FLASH_Program_Fast_veneer+0xc>)
 800b43c:	4684      	mov	ip, r0
 800b43e:	bc01      	pop	{r0}
 800b440:	4760      	bx	ip
 800b442:	bf00      	nop
 800b444:	200000bd 	.word	0x200000bd

Disassembly of section .data:

20000000 <cfg>:
20000000:	00000000 08007b59 08007b95 08007c0d     ....Y{...{...|..
20000010:	08007c6d 00000010 00000010 00000800     m|..............
20000020:	00000008 000001f4 00000010 00000010     ................
	...

20000054 <SystemCoreClock>:
20000054:	00f42400                                .$..

20000058 <uwTickPrio>:
20000058:	00000004                                ....

2000005c <uwTickFreq>:
2000005c:	00000001                                ....

20000060 <__sglue>:
20000060:	00000000 00000003 200002a0              ........... 

2000006c <_impure_ptr>:
2000006c:	20000070                                p.. 

20000070 <_impure_data>:
20000070:	00000000 200002a0 20000308 20000370     ....... ... p.. 
	...

200000bc <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000bc:	b580      	push	{r7, lr}
200000be:	b088      	sub	sp, #32
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000c6:	231f      	movs	r3, #31
200000c8:	18fb      	adds	r3, r7, r3
200000ca:	2200      	movs	r2, #0
200000cc:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000ce:	687b      	ldr	r3, [r7, #4]
200000d0:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000d2:	683b      	ldr	r3, [r7, #0]
200000d4:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000d6:	4b1a      	ldr	r3, [pc, #104]	@ (20000140 <FLASH_Program_Fast+0x84>)
200000d8:	695a      	ldr	r2, [r3, #20]
200000da:	4b19      	ldr	r3, [pc, #100]	@ (20000140 <FLASH_Program_Fast+0x84>)
200000dc:	2180      	movs	r1, #128	@ 0x80
200000de:	02c9      	lsls	r1, r1, #11
200000e0:	430a      	orrs	r2, r1
200000e2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000e4:	f3ef 8310 	mrs	r3, PRIMASK
200000e8:	60fb      	str	r3, [r7, #12]
  return(result);
200000ea:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000ee:	b672      	cpsid	i
}
200000f0:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000f2:	e00f      	b.n	20000114 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000f4:	697a      	ldr	r2, [r7, #20]
200000f6:	69bb      	ldr	r3, [r7, #24]
200000f8:	6812      	ldr	r2, [r2, #0]
200000fa:	601a      	str	r2, [r3, #0]
    src += 4U;
200000fc:	697b      	ldr	r3, [r7, #20]
200000fe:	3304      	adds	r3, #4
20000100:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000102:	69bb      	ldr	r3, [r7, #24]
20000104:	3304      	adds	r3, #4
20000106:	61bb      	str	r3, [r7, #24]
    index++;
20000108:	211f      	movs	r1, #31
2000010a:	187b      	adds	r3, r7, r1
2000010c:	781a      	ldrb	r2, [r3, #0]
2000010e:	187b      	adds	r3, r7, r1
20000110:	3201      	adds	r2, #1
20000112:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000114:	231f      	movs	r3, #31
20000116:	18fb      	adds	r3, r7, r3
20000118:	781b      	ldrb	r3, [r3, #0]
2000011a:	2b3f      	cmp	r3, #63	@ 0x3f
2000011c:	d9ea      	bls.n	200000f4 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000011e:	46c0      	nop			@ (mov r8, r8)
20000120:	4b07      	ldr	r3, [pc, #28]	@ (20000140 <FLASH_Program_Fast+0x84>)
20000122:	691a      	ldr	r2, [r3, #16]
20000124:	2380      	movs	r3, #128	@ 0x80
20000126:	025b      	lsls	r3, r3, #9
20000128:	4013      	ands	r3, r2
2000012a:	d1f9      	bne.n	20000120 <FLASH_Program_Fast+0x64>
2000012c:	693b      	ldr	r3, [r7, #16]
2000012e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000130:	68bb      	ldr	r3, [r7, #8]
20000132:	f383 8810 	msr	PRIMASK, r3
}
20000136:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000138:	46c0      	nop			@ (mov r8, r8)
2000013a:	46bd      	mov	sp, r7
2000013c:	b008      	add	sp, #32
2000013e:	bd80      	pop	{r7, pc}
20000140:	40022000 	.word	0x40022000
